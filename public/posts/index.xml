<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Hello, Friends!</title>
		<link>https://daiwei.dev/posts/</link>
		<description>Recent content in Posts on Hello, Friends!</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Wed, 17 Nov 2021 16:38:00 +0800</lastBuildDate>
		<atom:link href="https://daiwei.dev/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Java Build Automation Tools：Ant, Gradle &amp; Maven</title>
			<link>https://daiwei.dev/posts/java_gradle/</link>
			<pubDate>Wed, 17 Nov 2021 16:38:00 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/java_gradle/</guid>
			<description>在进入ANT、Maven或Gradle 之前，我们必须首先了解与它们相关的一些事情。
**依赖：**一般来说，依赖是指某件事需要另一件事来自己执行。简单地说，如果 &amp;lsquo;A&amp;rsquo; 需要 &amp;lsquo;B&amp;rsquo; 才能成功执行，则 &amp;lsquo;A&amp;rsquo; 依赖于 &amp;lsquo;B&amp;rsquo;。在软件世界中，依赖项是您的应用程序成功执行所需的任何东西。它基本上是应用程序所需的任何外部支持库。例如zuul、hystrix、lombok、jdbc等。
最初，我们曾经通过以下方式管理依赖项：
 从互联网上手动下载所需库的jar文件并将其添加到我们的项目中。 编写一个脚本，该脚本将通过网络从外部源自动下载库。  使用这些工具之前面临的问题：
 通过从 Internet 上手动下载来添加依赖项是一项非常累人的任务。 如果外部源的 URL 通过 Internet 更改，我们的脚本可能会失败。 在我们的应用程序中识别和管理传递依赖是非常困难的。  **Depende Management Tools依赖管理工具：**它解决和管理应用程序所需的依赖关系。
什么是构建工具？
 构建工具是从源代码自动创建可执行应用程序的程序（例如，.apk对于 Android 应用程序）。构建包括将代码编译、链接和打包成可用或可执行的形式。
基本上，构建自动化是编写脚本或自动化软件开发人员在日常活动中执行的各种任务的行为，例如：
 下载并管理依赖项。 将源代码编译成二进制代码。 打包那个二进制代码。 运行测试。 部署到生产系统。   我们为什么要使用构建工具或构建自动化？
 在小型项目中，开发人员通常会手动调用构建过程。这对于大型项目来说是不切实际的，因为很难跟踪需要构建的内容、构建过程中的顺序和依赖关系。使用自动化工具可以使构建过程更加一致。
 各种可用的构建工具 ：
  Java - Ant、Maven、Gradle。 .NET 框架 - NAnt c# - MsBuild。   Apache Ant Ant是 Apache Tomcat 代码库的一部分，并于 2000 年作为独立项目发布.</description>
			<content type="html"><![CDATA[<p>在进入<em>ANT</em>、<em>Maven</em>或<em>Gradle 之前</em>，我们必须首先了解与它们相关的一些事情。</p>
<p>**依赖：**一般来说，依赖是指某件事需要另一件事来自己执行。简单地说，如果 &lsquo;A&rsquo; 需要 &lsquo;B&rsquo; 才能成功执行，则 &lsquo;A&rsquo; 依赖于 &lsquo;B&rsquo;。在软件世界中，依赖项是您的应用程序成功执行所需的任何东西。它基本上是应用程序所需的任何外部支持库。例如zuul、hystrix、lombok、jdbc等。</p>
<p>最初，我们曾经通过以下方式管理依赖项：</p>
<ul>
<li>从互联网上手动下载所需库的jar文件并将其添加到我们的项目中。</li>
<li>编写一个脚本，该脚本将通过网络从外部源自动下载库。</li>
</ul>
<p>使用这些工具之前面临的问题：</p>
<ul>
<li>通过从 Internet 上手动下载来添加依赖项是一项非常累人的任务。</li>
<li>如果外部源的 URL 通过 Internet 更改，我们的脚本可能会失败。</li>
<li>在我们的应用程序中识别和管理传递依赖是非常困难的。</li>
</ul>
<p>**Depende Management Tools依赖管理工具：**它解决和管理应用程序所需的依赖关系。</p>
<p><strong>什么是构建工具？</strong></p>
<blockquote>
<p>构建工具是从源代码自动创建可执行应用程序的程序（例如，<code>.apk</code>对于 Android 应用程序）。构建包括将代码编译、链接和打包成可用或可执行的形式。</p>
<p>基本上，构建自动化是编写脚本或自动化软件开发人员在日常活动中执行的各种任务的行为，例如：</p>
<ol>
<li>下载并管理依赖项。</li>
<li>将源代码编译成二进制代码。</li>
<li>打包那个二进制代码。</li>
<li>运行测试。</li>
<li>部署到生产系统。</li>
</ol>
</blockquote>
<p><strong>我们为什么要使用构建工具或构建自动化？</strong></p>
<blockquote>
<p>在小型项目中，开发人员通常会手动调用构建过程。这对于大型项目来说是不切实际的，因为很难跟踪需要构建的内容、构建过程中的顺序和依赖关系。使用自动化工具可以使构建过程更加一致。</p>
</blockquote>
<p><strong>各种可用的构建工具 ：</strong></p>
<blockquote>
<ol>
<li>Java - Ant、Maven、Gradle。</li>
<li>.NET 框架 - NAnt</li>
<li>c# - MsBuild。</li>
</ol>
</blockquote>
<h3 id="apache-ant"><strong>Apache Ant</strong></h3>
<p>Ant是 Apache Tomcat 代码库的一部分，并于 2000 年作为独立项目发布. Ant 的主要好处是它的灵活性。Ant 不会对开发人员强加任何编码约定或项目结构。因此，这意味着 Ant 需要开发人员自己编写所有命令，这有时会导致构建文件很大并且难以维护。最初，Ant 没有对依赖项管理的内置支持。后来它采用了Apache Ivy，作为Apache Ant项目的一个子项目开发，用于依赖管理。<strong>过时的构建工具。</strong></p>
<h3 id="apache-maven"><strong>Apache Maven</strong></h3>
<p><a href="https://maven.apache.org/">Apache Maven</a>是一个依赖管理和构建自动化工具，于 2004 年发布。它继续使用*XML，*但通过遵循“<em>约定优于配置</em>”的原则克服了缺点。它依赖于约定并提供预定义的命令（目标）。它的配置文件，包含构建和依赖管理指令，按照惯例称为“ <em>pom.xml</em> ”，存在于项目的根文件夹中。<strong>Ant 升级版</strong>。</p>
<p><img src="https://miro.medium.com/max/1324/1*p9j7JsTDxRLdsdks4ADlaQ.jpeg" alt="img"></p>
<p>Maven 引擎将<em>pom.xml</em>和项目作为输入。它读取<em>pom.xml</em>文件并将其中提到的依赖项作为 jar 文件下载到本地存储库中。然后，它执行生命周期、构建阶段和插件。最后，生成一个打包和测试的工件。</p>
<p><strong>pom.xml 示例：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="o">&lt;?</span><span class="n">xml</span> <span class="n">version</span><span class="o">=</span><span class="s">&#34;1.0&#34;</span> <span class="n">encoding</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="o">?&gt;</span> 
<span class="ln"> 2</span><span class="o">&lt;</span><span class="n">project</span> <span class="n">xmlns</span><span class="o">=</span><span class="s">&#34; http://maven.apache.org/POM/4.0.0 &#34;</span> 
<span class="ln"> 3</span><span class="nl">xmlns:</span><span class="n">xsi</span><span class="o">=</span><span class="s">&#34; http://www.w3 .org/2001/XMLSchema-instance &#34;</span>   
<span class="ln"> 4</span><span class="nl">xsi:</span><span class="n">schemaLocation</span><span class="o">=</span><span class="s">&#34; http://maven.apache.org/POM/4.0.0  
</span><span class="ln"> 5</span><span class="s"> https://maven.apache.org/xsd/maven-4.0.0.xsd &#34;</span><span class="o">&gt;</span> 
<span class="ln"> 6</span>       <span class="o">&lt;</span><span class="n">modelVersion</span><span class="o">&gt;</span><span class="n">4</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">0</span><span class="o">&lt;/</span><span class="n">modelVersion</span><span class="o">&gt;</span> 
<span class="ln"> 7</span>       <span class="o">&lt;</span><span class="n">parent</span><span class="o">&gt;</span>    
<span class="ln"> 8</span>               <span class="o">&lt;</span><span class="n">groupId</span><span class="o">&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">&lt;/</span><span class="n">groupId</span><span class="o">&gt;</span> 
<span class="ln"> 9</span>               <span class="o">&lt;</span><span class="n">artifactId</span><span class="o">&gt;</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">parent</span><span class="o">&lt;/</span><span class="n">artifactId</span><span class="o">&gt;</span> 
<span class="ln">10</span>               <span class="o">&lt;</span><span class="n">version</span><span class="o">&gt;</span><span class="n">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">5</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">&lt;/</span><span class="n">version</span> <span class="o">&gt;</span>   
<span class="ln">11</span>               <span class="o">&lt;</span><span class="n">relativePath</span><span class="o">/&gt;</span> 
<span class="ln">12</span>       <span class="o">&lt;/</span><span class="n">parent</span><span class="o">&gt;</span>
<span class="ln">13</span>       <span class="o">&lt;</span><span class="n">groupId</span><span class="o">&gt;</span><span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">&lt;/</span><span class="n">groupId</span><span class="o">&gt;</span>  
<span class="ln">14</span>       <span class="o">&lt;</span><span class="n">artifactId</span><span class="o">&gt;</span><span class="n">demo</span><span class="o">&lt;/</span><span class="n">artifactId</span><span class="o">&gt;</span>   
<span class="ln">15</span>       <span class="o">&lt;</span><span class="n">version</span><span class="o">&gt;</span><span class="n">0</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">1</span><span class="o">-</span><span class="n">SNAPSHOT</span><span class="o">&lt;/</span><span class="n">version</span><span class="o">&gt;</span>   
<span class="ln">16</span>       <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span><span class="n">demo</span><span class="o">&lt;/</span><span class="n">name</span><span class="o">&gt;</span>   
<span class="ln">17</span>       <span class="o">&lt;</span><span class="n">description</span><span class="o">&gt;</span><span class="n">Spring</span> <span class="n">Boot</span> <span class="n">的演示项目</span><span class="o">&lt;/</span><span class="n">description</span><span class="o">&gt;</span>    
<span class="ln">18</span>       <span class="o">&lt;</span><span class="n">properties</span><span class="o">&gt;</span>   
<span class="ln">19</span>                  <span class="o">&lt;</span><span class="n">java</span><span class="o">.</span><span class="na">version</span><span class="o">&gt;</span><span class="n">1</span><span class="o">.</span><span class="na">8</span><span class="o">&lt;</span> <span class="o">/</span><span class="n">java</span><span class="o">.</span><span class="na">version</span><span class="o">&gt;</span> 
<span class="ln">20</span>       <span class="o">&lt;/</span><span class="n">properties</span><span class="o">&gt;</span>    
<span class="ln">21</span>       <span class="o">&lt;</span><span class="n">dependencies</span><span class="o">&gt;</span> 
<span class="ln">22</span>                    <span class="o">&lt;</span><span class="n">dependency</span><span class="o">&gt;</span>    
<span class="ln">23</span>                               <span class="o">&lt;</span><span class="n">groupId</span><span class="o">&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">projectlombok</span><span class="o">&lt;/</span><span class="n">groupId</span><span class="o">&gt;</span> 
<span class="ln">24</span>                               <span class="o">&lt;</span><span class="n">artifactId</span><span class="o">&gt;</span><span class="n">lombok</span><span class="o">&lt;/</span><span class="n">artifactId</span><span class="o">&gt;</span>    
<span class="ln">25</span>                               <span class="o">&lt;</span><span class="n">optional</span><span class="o">&gt;</span><span class="kc">true</span><span class="o">&lt;/</span><span class="n">optional</span><span class="o">&gt;</span> 
<span class="ln">26</span>                    <span class="o">&lt;/</span><span class="n">dependency</span><span class="o">&gt;</span> 
<span class="ln">27</span>       <span class="o">&lt;/</span><span class="n">dependencies</span><span class="o">&gt;</span>   
<span class="ln">28</span><span class="o">&lt;/</span><span class="n">项目</span><span class="o">&gt;</span>
</code></pre></div><p>pom.xml 文件中的一些重要标签：</p>
<ul>
<li>**groupId：**代表项目所属的组织。</li>
<li>**artifactId：**它是项目的名称。</li>
<li>**version：**它代表项目的版本。</li>
<li>**包装：**它代表了项目构建的最终形式。</li>
</ul>
<p><strong>在maven中添加依赖：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="o">&lt;</span><span class="n">dependency</span><span class="o">&gt;</span> 
<span class="ln">2</span>    <span class="o">&lt;</span><span class="n">groupId</span><span class="o">&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">projectlombok</span><span class="o">&lt;/</span><span class="n">groupId</span><span class="o">&gt;</span> 
<span class="ln">3</span>    <span class="o">&lt;</span><span class="n">artifactId</span><span class="o">&gt;</span><span class="n">lombok</span><span class="o">&lt;/</span><span class="n">artifactId</span><span class="o">&gt;</span> 
<span class="ln">4</span>    <span class="o">&lt;</span><span class="n">version</span><span class="o">&gt;</span><span class="n">1</span><span class="o">.</span><span class="na">18</span><span class="o">.</span><span class="na">10</span><span class="o">&lt;/</span><span class="n">version</span><span class="o">&gt;</span> 
<span class="ln">5</span><span class="o">&lt;/</span><span class="n">dependency</span><span class="o">&gt;</span>
</code></pre></div><p>Maven 规定了严格的项目结构，而 Ant 也提供了灵活性。严格的约定伴随着比 Ant 灵活得多的代价——目标定制非常困难。</p>
<p><strong>maven的缺点：</strong></p>
<ol>
<li>依赖管理不能很好地处理同一个库的不同版本之间的冲突。</li>
<li>目标的定制很难。</li>
</ol>
<h3 id="gradle"><strong>Gradle</strong></h3>
<p>Grade 是一个开源的依赖管理和构建自动化工具，于 2012 年发布。它结合了 Apache Ant 和 Apache Maven 的优点，并在它们之上构建，并使用域特定语言（基于 Groovy）而不是 XML。它采用了 Ant 的灵活性和 Maven 的生命周期。它还遵循“<em>约定优于配置</em>”的原则。它支持用于检索依赖项的 Maven 和 Ivy 存储库。它的配置文件通常称为“ <em>build.gradle</em> ”，位于项目的根文件夹中。Gradle 将其构建步骤命名为“任务”，而不是 Ant 的“目标”或 Maven 的“阶段”。Google 采用 Gradle 作为 Android 操作系统的默认构建工具。</p>
<p>Gradle 不使用 XML。相反，它有它自己<strong>d</strong> omain<strong>小号</strong>pecific<strong>大号</strong>基于Groovy的（JVM语言之一）anguage。因此，与为 Ant 或 Maven 编写的脚本相比，Gradle 构建脚本往往更短、更清晰。Gradle 的样板代码量要小得多。</p>
<p><strong>Gradle 配置</strong></p>
<ul>
<li>**实现：**它用于声明我们不想暴露给消费者编译时的依赖项。</li>
<li>**api：**它用于声明作为我们 API 一部分的<em>依赖项，即我们明确希望向消费者公开的依赖项。</em></li>
<li>**compileOnly：**它 允许我们声明只应在编译时可用但在运行时不需要的依赖项。此配置的一个示例用例是像<a href="https://projectlombok.org/">Lombok</a>这样的注释处理器，它在编译时修改字节码。编译后不再需要它，因此该依赖项在运行时不可用。</li>
<li>**runtimeOnly：**它允许我们声明在编译时不需要但在运行时可用的依赖项。一个例子是<a href="https://www.slf4j.org/">SLF4J</a>，我们<code>slf4j-api</code>将其包含到<code>implementation</code>配置中，并将该 API（如<code>slf4j-log4j12</code>或<code>logback-classic</code>）的实现包含在<code>runtimeOnly</code>配置中。</li>
<li>**testImplementation：**类似于<code>implementation</code>，但声明的依赖项<code>testImplementation</code>仅在测试的编译和运行时可用。我们可以使用它来声明对测试框架（如<a href="https://junit.org/junit5/">JUnit</a>或<a href="https://site.mockito.org/">Mockito）的</a>依赖<a href="https://site.mockito.org/">项</a>，我们只在测试中需要，而在生产代码中不应该提供这些依赖项。</li>
<li>**testCompileOnly：**类似于<code>compileOnly</code>，但声明的依赖项<code>testCompileOnly</code>仅在测试编译期间可用，在运行时不可用。</li>
<li>**testRuntimeOnly：**与 类似<code>runtimeOnly</code>，但声明为 的依赖项<code>testRuntimeOnly</code>仅在测试运行时可用，而在编译时不可用。</li>
</ul>
<p><strong>Gradle 中的项目和任务</strong></p>
<p>每个 Gradle 构建都包含一个或多个项目。每个项目由一组任务组成。每个任务代表构建执行的单个工作，例如生成 JavaDoc，将一些档案发布到存储库等。</p>
<p><strong>build.gradle 示例</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">plugins</span> <span class="o">{</span>
<span class="ln"> 2</span> <span class="n">id</span> <span class="err">&#39;</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="err">&#39;</span> <span class="n">version</span> <span class="err">&#39;</span><span class="n">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">5</span><span class="o">.</span><span class="na">RELEASE</span><span class="err">&#39;</span>
<span class="ln"> 3</span> <span class="n">id</span> <span class="err">&#39;</span><span class="n">io</span><span class="o">.</span><span class="na">spring</span><span class="o">.</span><span class="na">dependency</span><span class="o">-</span><span class="n">management</span><span class="err">&#39;</span> <span class="n">version</span> <span class="err">&#39;</span><span class="n">1</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">9</span><span class="o">.</span><span class="na">RELEASE</span><span class="err">&#39;</span>
<span class="ln"> 4</span> <span class="n">id</span> <span class="err">&#39;</span><span class="n">java</span><span class="err">&#39;</span>
<span class="ln"> 5</span><span class="o">}</span>
<span class="ln"> 6</span><span class="n">group</span> <span class="o">=</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="err">&#39;</span>
<span class="ln"> 7</span><span class="n">version</span> <span class="o">=</span> <span class="err">&#39;</span><span class="n">0</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">1</span><span class="o">-</span><span class="n">SNAPSHOT</span><span class="err">&#39;</span>
<span class="ln"> 8</span><span class="n">sourceCompatibility</span> <span class="o">=</span> <span class="err">&#39;</span><span class="n">1</span><span class="o">.</span><span class="na">8</span><span class="err">&#39;</span>
<span class="ln"> 9</span><span class="n">repositories</span> <span class="o">{</span>
<span class="ln">10</span> <span class="n">mavenCentral</span><span class="o">()</span>
<span class="ln">11</span><span class="o">}</span>
<span class="ln">12</span><span class="n">dependencies</span> <span class="o">{</span>
<span class="ln">13</span> <span class="n">implementation</span> <span class="err">&#39;</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="err">&#39;</span>
<span class="ln">14</span> <span class="o">}</span>
<span class="ln">15</span><span class="o">}</span>
</code></pre></div><p>示例：在我们的项目中添加中央 Maven 存储库，将以下代码片段添加到我们的**“build.gradle”**文件中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">repositories</span> <span class="o">{</span>
<span class="ln">2</span>    <span class="n">mavenCentral</span><span class="o">()</span>
<span class="ln">3</span><span class="o">}</span>
</code></pre></div><p><strong>在 Gradle 中添加依赖项：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">compile</span> <span class="n">group</span><span class="o">:</span> <span class="err">&#39;</span><span class="n">org</span><span class="o">.</span><span class="na">hibernate</span><span class="err">&#39;</span><span class="o">,</span> <span class="n">name</span><span class="o">:</span> <span class="err">&#39;</span><span class="n">hibernate</span><span class="o">-</span><span class="n">core</span><span class="err">&#39;</span><span class="o">,</span> <span class="n">version</span><span class="o">:</span> <span class="err">&#39;</span><span class="n">3</span><span class="o">.</span><span class="na">6</span><span class="o">.</span><span class="na">7</span><span class="o">.</span><span class="na">Final</span><span class="err">&#39;</span>
</code></pre></div><p><strong>好处：</strong></p>
<ol>
<li>它可以很好地处理传递依赖。如果项目中存在冲突的传递依赖项，那么为了解决它，它选择依赖项的最新版本。例如，依赖“A”在内部需要依赖“C”和版本 2.0，依赖“B”在内部需要依赖“C”和版本 3.0。然后 Gradle 将使用最新版本的依赖项“C”。</li>
<li>Gradle 的配置文件更小，更干净，因为它使用领域特定语言，基于 Groovy 而不是 XML。</li>
<li>摇篮采用增量构建理念和跟踪任务的输入和输出，并只在运行什么是必要的，只有处理避免了工作，改变在可能的情况，因此尔斯，执行比Maven的更快。</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>Java_Roadmap</title>
			<link>https://daiwei.dev/posts/java_roadmap/</link>
			<pubDate>Wed, 17 Nov 2021 16:19:45 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/java_roadmap/</guid>
			<description></description>
			<content type="html"><![CDATA[<p><img src="https://roadmap.sh/roadmaps/java.png" alt="img"></p>
<p><img src="https://roadmap.sh/roadmaps/backend.png" alt="Frontend Roadmap"></p>
]]></content>
		</item>
		
		<item>
			<title>git : Changes not staged for commit</title>
			<link>https://daiwei.dev/posts/git_bug1/</link>
			<pubDate>Tue, 16 Nov 2021 17:19:26 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/git_bug1/</guid>
			<description>1Changes not staged for commit: 2	modified: themes/hermit (modified content, untracked content) 3 4no changes added to commit 出现此问题是因为该路径内有文件已修改但是没被提交到本地仓库，可以尝试 cd 到子文件路径，add &amp;amp; commit, 然后返回原工作区路径，再add &amp;amp; commit一次。
1$ cd themes/hermit 2hermit $ git add . 3hermit $ git git commit -m &amp;#39;message&amp;#39; 4 5hermit $ cd ../.. 6$ git add . 7$ git git commit -m &amp;#39;message&amp;#39; </description>
			<content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="ln">1</span>Changes not staged for commit:
<span class="ln">2</span>	modified:   themes/hermit (modified content, untracked content)
<span class="ln">3</span>
<span class="ln">4</span>no changes added to commit
</code></pre></div><p>出现此问题是因为该路径内有文件已修改但是没被提交到本地仓库，可以尝试 cd 到子文件路径，add &amp; commit, 然后返回原工作区路径，再add &amp; commit一次。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">$</span> <span class="n">cd</span> <span class="n">themes</span><span class="o">/</span><span class="n">hermit</span>
<span class="ln">2</span><span class="n">hermit</span> <span class="n">$</span> <span class="n">git</span> <span class="n">add</span> <span class="o">.</span>
<span class="ln">3</span><span class="n">hermit</span> <span class="n">$</span> <span class="n">git</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">message</span><span class="err">&#39;</span>
<span class="ln">4</span>
<span class="ln">5</span><span class="n">hermit</span> <span class="n">$</span> <span class="n">cd</span> <span class="o">../..</span>
<span class="ln">6</span><span class="n">$</span> <span class="n">git</span> <span class="n">add</span> <span class="o">.</span>
<span class="ln">7</span><span class="n">$</span> <span class="n">git</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">message</span><span class="err">&#39;</span>  
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>fatal: Authentication failed for &#39;https://github.com/yourusername/githubtest.git/&#39; </title>
			<link>https://daiwei.dev/posts/git_authentication/</link>
			<pubDate>Mon, 15 Nov 2021 12:02:42 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/git_authentication/</guid>
			<description>fatal: Authentication failed for &amp;lsquo;https:/githubtest.git/&amp;rsquo; 这是因为github开启了Two Factor Authentication (2FA）验证，所以当你使用这些 git clone, git fetch, git pull or git push命令的时候就会需要输入你的 PAT (Personal Access Token).
在github settings 打开 Developer settings, 创建PAT, 创建完成后copy 你的PAT 再 使用之前的 git push 命令就可以输入用户名和你的PAT了（注意输入PAT,不是你的github密码）. 请参考 GitHub　Creating a personal access token.
1$ git clone https://github.com/username/repo.git 2Username: your_username 3Password: your_token </description>
			<content type="html"><![CDATA[<h3 id="fatal-authentication-failed-for-httpsgithubtestgit">fatal: Authentication failed for &lsquo;https:/githubtest.git/&rsquo;</h3>
<p>这是因为github开启了Two Factor Authentication (2FA）验证，所以当你使用这些 <code>git clone</code>, <code>git fetch</code>, <code>git pull</code> or <code>git push</code>命令的时候就会需要输入你的 PAT (Personal Access Token).</p>
<p>在github settings 打开 Developer settings, 创建PAT, 创建完成后copy 你的PAT 再 使用之前的 git push 命令就可以输入用户名和你的PAT了（注意输入PAT,不是你的github密码）. 请参考 GitHub　<a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token">Creating a personal access token</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">$</span> <span class="n">git</span> <span class="n">clone</span> <span class="n">https</span><span class="o">:</span><span class="c1">//github.com/username/repo.git
</span><span class="ln">2</span><span class="c1"></span><span class="nl">Username:</span> <span class="n">your_username</span>
<span class="ln">3</span><span class="nl">Password:</span> <span class="n">your_token</span>
</code></pre></div><p><img src="https://docs.github.com/assets/images/help/settings/developer-settings.png" alt="Developer settings"></p>
<p><img src="https://docs.github.com/assets/images/help/settings/personal_access_tokens_tab.png" alt="Personal access tokens"></p>
<p><img src="https://docs.github.com/assets/images/help/settings/generate_new_token.png" alt="Generate new token button"></p>
<p><img src="https://docs.github.com/assets/images/help/settings/generate_token.png" alt="Generate token button"></p>
<p><img src="https://docs.github.com/assets/images/help/settings/personal_access_tokens.png" alt="Newly created token"></p>
]]></content>
		</item>
		
		<item>
			<title>env: node: No such file or directory macOS 解决方法</title>
			<link>https://daiwei.dev/posts/node_error/</link>
			<pubDate>Wed, 10 Nov 2021 12:37:00 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/node_error/</guid>
			<description>使用nmp命令时报错
1env: noder: No such file or directory 网上冲浪得到的解决方案
 uninstall and reinstall Node.js execute this command to create a link for node : sudo ln -s /usr/bin/nodejs /usr/local/bin/node  我用的方案1 重装 node.js 有效， 方案2 会报错。
1$ brew uninstall node 2$ brew update 3$ brew upgrade 4$ brew cleanup 5$ brew install node 6$ brew link --overwrite node // 如果报错可跑此命名:$ brew unlink node &amp;amp;&amp;amp; brew link node 7$ brew postinstall node 8$ node -v //能看到版本号就可以正常使用了 9 v17.</description>
			<content type="html"><![CDATA[<p>使用nmp命令时报错</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="nl">env:</span> <span class="n">noder</span><span class="o">:</span> <span class="n">No</span> <span class="n">such</span> <span class="n">file</span> <span class="n">or</span> <span class="n">directory</span>
</code></pre></div><p>网上冲浪得到的解决方案</p>
<ol>
<li>uninstall and reinstall Node.js</li>
<li>execute this command to create a link for node : sudo ln -s /usr/bin/nodejs /usr/local/bin/node</li>
</ol>
<p>我用的方案1 重装 node.js 有效， 方案2 会报错。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">$</span> <span class="n">brew</span> <span class="n">uninstall</span> <span class="n">node</span>
<span class="ln">2</span><span class="n">$</span> <span class="n">brew</span> <span class="n">update</span>
<span class="ln">3</span><span class="n">$</span> <span class="n">brew</span> <span class="n">upgrade</span>
<span class="ln">4</span><span class="n">$</span> <span class="n">brew</span> <span class="n">cleanup</span>
<span class="ln">5</span><span class="n">$</span> <span class="n">brew</span> <span class="n">install</span> <span class="n">node</span>
<span class="ln">6</span><span class="n">$</span> <span class="n">brew</span> <span class="n">link</span> <span class="o">--</span><span class="n">overwrite</span> <span class="n">node</span> <span class="c1">// 如果报错可跑此命名:$ brew unlink node &amp;&amp; brew link node
</span><span class="ln">7</span><span class="c1"></span><span class="n">$</span> <span class="n">brew</span> <span class="n">postinstall</span> <span class="n">node</span>
<span class="ln">8</span><span class="n">$</span> <span class="n">node</span> <span class="o">-</span><span class="n">v</span> <span class="c1">//能看到版本号就可以正常使用了
</span><span class="ln">9</span><span class="c1"></span>  <span class="n">v17</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">1</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>git,github &amp; gitlab</title>
			<link>https://daiwei.dev/posts/git/</link>
			<pubDate>Tue, 09 Nov 2021 16:24:04 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/git/</guid>
			<description>Git 诞生于2005年，由大神 Linus Torvalds 开发的免费开源的分布式版本控制系统,可让你管理和跟踪源代码历史记录。Git 安装和维护在您的本地系统上，不需要internet联网。
github，和gitlab都是基于git开发的管理托管服务。其他 Git 存储库托管服务还有：BitBucket， SourceForge.
Github 发布于2008年，是一种基于云的git仓库托管服务。提供免费的公共仓库(代码会被所有人看到)和收费的私有仓库(代码仅自己可见)。通常用于托管开源项目。
GitLab 发布于2013年，是一个基于 Web 的DevOps生命周期工具，它提供Git 存储库管理器。和GitHub相比gitlab允许免费创建私有仓库。 另外 gitlab还可以部署到本地服务器上，让开发团队对他们的代码仓库拥有更多的控制。多用于企业或者个人的代码托管库。
 Git 常用command： git init 初始化，在本地仓库创建 .git 文档
1$ git init 2Initialized empty Git repository in /gittest/.git/ 3 4// 查看.git隐藏目录里的本地库管理文件 5$ ls -lA .git/ 6total 24 7-rw-r--r-- 1 user staff 23 9 Nov 17:38 HEAD 8-rw-r--r-- 1 user staff 137 9 Nov 17:38 config 9-rw-r--r-- 1 user staff 73 9 Nov 17:38 description 10drwxr-xr-x 13 user staff 416 9 Nov 17:38 hooks 11drwxr-xr-x 3 user staff 96 9 Nov 17:38 info 12drwxr-xr-x 4 user staff 128 9 Nov 17:38 objects 13drwxr-xr-x 4 user staff 128 9 Nov 17:38 refs git config 设置用户签名（通常只需要设置本地系统签名就足够了）</description>
			<content type="html"><![CDATA[<p><strong><a href="https://git-scm.com/">Git</a></strong> 诞生于2005年，由大神 <a href="https://en.wikipedia.org/wiki/Linus_Torvalds">Linus Torvalds</a> 开发的免费开源的分布式版本控制系统,可让你管理和跟踪源代码历史记录。Git 安装和维护在您的本地系统上，不需要internet联网。</p>
<p>github，和gitlab都是基于git开发的管理托管服务。其他 Git 存储库托管服务还有：BitBucket， SourceForge.</p>
<p><strong><a href="https://github.com/">Github</a></strong> 发布于2008年，是一种基于云的git仓库托管服务。提供免费的公共仓库(代码会被所有人看到)和收费的私有仓库(代码仅自己可见)。<strong>通常用于托管开源项目</strong>。</p>
<p><strong><a href="https://about.gitlab.com/">GitLab</a></strong> 发布于2013年，是一个基于 Web 的DevOps生命周期工具，它提供Git 存储库管理器。和GitHub相比gitlab允许免费创建私有仓库。 另外 gitlab还可以部署到本地服务器上，让开发团队对他们的代码仓库拥有更多的控制。<strong>多用于企业或者个人的代码托管库</strong>。</p>
<p><img src="https://support.nesi.org.nz/hc/article_attachments/360004194235/Git_Diagram.svg" alt="Git: Reference Sheet – NeSI Support"></p>
<hr>
<h3 id="git-常用command">Git 常用command：</h3>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9naW1nL2Fzc2V0LzIwMTUvYmcyMDE1MTIwOTAxLnBuZw?x-oss-process=image/format,png" alt="img"></p>
<p><strong><code>git init</code> 初始化，在本地仓库创建 .git 文档</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">git</span> <span class="n">init</span>
<span class="ln"> 2</span><span class="n">Initialized</span> <span class="n">empty</span> <span class="n">Git</span> <span class="n">repository</span> <span class="n">in</span> <span class="o">/</span><span class="n">gittest</span><span class="o">/.</span><span class="na">git</span><span class="o">/</span>
<span class="ln"> 3</span>
<span class="ln"> 4</span><span class="c1">// 查看.git隐藏目录里的本地库管理文件
</span><span class="ln"> 5</span><span class="c1"></span><span class="n">$</span> <span class="n">ls</span> <span class="o">-</span><span class="n">lA</span> <span class="o">.</span><span class="na">git</span><span class="o">/</span>
<span class="ln"> 6</span><span class="n">total</span> <span class="n">24</span>
<span class="ln"> 7</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span><span class="n">r</span><span class="o">--</span>   <span class="n">1</span> <span class="n">user</span>  <span class="n">staff</span>   <span class="n">23</span>  <span class="n">9</span> <span class="n">Nov</span> <span class="n">17</span><span class="o">:</span><span class="n">38</span> <span class="n">HEAD</span>
<span class="ln"> 8</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span><span class="n">r</span><span class="o">--</span>   <span class="n">1</span> <span class="n">user</span>  <span class="n">staff</span>  <span class="n">137</span>  <span class="n">9</span> <span class="n">Nov</span> <span class="n">17</span><span class="o">:</span><span class="n">38</span> <span class="n">config</span>
<span class="ln"> 9</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span><span class="n">r</span><span class="o">--</span>   <span class="n">1</span> <span class="n">user</span>  <span class="n">staff</span>   <span class="n">73</span>  <span class="n">9</span> <span class="n">Nov</span> <span class="n">17</span><span class="o">:</span><span class="n">38</span> <span class="n">description</span>
<span class="ln">10</span><span class="n">drwxr</span><span class="o">-</span><span class="n">xr</span><span class="o">-</span><span class="n">x</span>  <span class="n">13</span> <span class="n">user</span>  <span class="n">staff</span>  <span class="n">416</span>  <span class="n">9</span> <span class="n">Nov</span> <span class="n">17</span><span class="o">:</span><span class="n">38</span> <span class="n">hooks</span>
<span class="ln">11</span><span class="n">drwxr</span><span class="o">-</span><span class="n">xr</span><span class="o">-</span><span class="n">x</span>   <span class="n">3</span> <span class="n">user</span>  <span class="n">staff</span>   <span class="n">96</span>  <span class="n">9</span> <span class="n">Nov</span> <span class="n">17</span><span class="o">:</span><span class="n">38</span> <span class="n">info</span>
<span class="ln">12</span><span class="n">drwxr</span><span class="o">-</span><span class="n">xr</span><span class="o">-</span><span class="n">x</span>   <span class="n">4</span> <span class="n">user</span>  <span class="n">staff</span>  <span class="n">128</span>  <span class="n">9</span> <span class="n">Nov</span> <span class="n">17</span><span class="o">:</span><span class="n">38</span> <span class="n">objects</span>
<span class="ln">13</span><span class="n">drwxr</span><span class="o">-</span><span class="n">xr</span><span class="o">-</span><span class="n">x</span>   <span class="n">4</span> <span class="n">user</span>  <span class="n">staff</span>  <span class="n">128</span>  <span class="n">9</span> <span class="n">Nov</span> <span class="n">17</span><span class="o">:</span><span class="n">38</span> <span class="n">refs</span>
</code></pre></div><p><strong><code>git config</code> 设置用户签名（通常只需要设置本地系统签名就足够了）</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">git</span> <span class="n">config</span> <span class="n">user</span><span class="o">.</span><span class="na">name</span> <span class="n">dai</span> <span class="c1">//设置本地仓库签名
</span><span class="ln"> 2</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">config</span> <span class="n">user</span><span class="o">.</span><span class="na">email</span> <span class="n">wdai</span><span class="nd">@mail.com</span>
<span class="ln"> 3</span><span class="n">$</span> <span class="n">cat</span> <span class="o">.</span><span class="na">git</span><span class="o">/</span><span class="n">config</span> <span class="c1">//打开配置文件
</span><span class="ln"> 4</span><span class="c1"></span><span class="o">[</span><span class="n">user</span><span class="o">]</span>
<span class="ln"> 5</span>	<span class="n">name</span> <span class="o">=</span> <span class="n">dai</span>
<span class="ln"> 6</span>	<span class="n">email</span> <span class="o">=</span> <span class="n">wdai</span><span class="nd">@mail.com</span>
<span class="ln"> 7</span><span class="n">$</span> <span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="n">global</span> <span class="n">user</span><span class="o">.</span><span class="na">name</span> <span class="n">dai_glb</span> <span class="c1">//设置本地系统系统签名  
</span><span class="ln"> 8</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="n">global</span> <span class="n">user</span><span class="o">.</span><span class="na">email</span> <span class="n">wdai_glb</span><span class="nd">@mail.com</span>
<span class="ln"> 9</span><span class="n">$</span> <span class="n">cd</span> <span class="o">~</span> <span class="c1">//返回根目录
</span><span class="ln">10</span><span class="c1"></span><span class="n">$</span> <span class="n">pwd</span> <span class="c1">//显示路径
</span><span class="ln">11</span><span class="c1"></span><span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">daiwei</span>
<span class="ln">12</span><span class="n">$</span> <span class="n">cat</span> <span class="o">.</span><span class="na">gitconfig</span>
<span class="ln">13</span><span class="o">[</span><span class="n">user</span><span class="o">]</span>
<span class="ln">14</span>	<span class="n">name</span> <span class="o">=</span> <span class="n">dai_glb</span>
<span class="ln">15</span>	<span class="n">email</span> <span class="o">=</span> <span class="n">wdai_glb</span><span class="nd">@mail.com</span>
</code></pre></div><p><strong><code>git status</code> 查看当前本地仓库状态</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span> 
<span class="ln"> 2</span><span class="n">On</span> <span class="n">branch</span> <span class="n">master</span> <span class="c1">// 位于master branch
</span><span class="ln"> 3</span><span class="c1"></span>
<span class="ln"> 4</span><span class="n">No</span> <span class="n">commits</span> <span class="n">yet</span> <span class="c1">// 本地仓库无提交记录
</span><span class="ln"> 5</span><span class="c1"></span>
<span class="ln"> 6</span><span class="n">nothing</span> <span class="n">to</span> <span class="nf">commit</span> <span class="o">(</span><span class="n">create</span><span class="o">/</span><span class="n">copy</span> <span class="n">files</span> <span class="n">and</span> <span class="n">use</span> <span class="s">&#34;git add&#34;</span> <span class="n">to</span> <span class="n">track</span><span class="o">)</span> <span class="c1">// 暂存区也无可提交记录
</span><span class="ln"> 7</span><span class="c1"></span>
<span class="ln"> 8</span><span class="n">$</span> <span class="n">cat</span> <span class="o">&gt;</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// 创建新txt文件，也可以用 $ touch test.txt
</span><span class="ln"> 9</span><span class="c1"></span>  <span class="n">test</span> <span class="c1">//输入文本 ctrl + D 保存并退出文本输入
</span><span class="ln">10</span><span class="c1"></span>
<span class="ln">11</span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span>
<span class="ln">12</span><span class="n">On</span> <span class="n">branch</span> <span class="n">master</span>
<span class="ln">13</span>
<span class="ln">14</span><span class="n">No</span> <span class="n">commits</span> <span class="n">yet</span>
<span class="ln">15</span>
<span class="ln">16</span><span class="n">Untracked</span> <span class="n">files</span><span class="o">:</span> <span class="c1">// 未被git追踪文件
</span><span class="ln">17</span><span class="c1"></span>  <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git add &lt;file&gt;...&#34;</span> <span class="n">to</span> <span class="n">include</span> <span class="n">in</span> <span class="n">what</span> <span class="n">will</span> <span class="n">be</span> <span class="n">committed</span><span class="o">)</span>
<span class="ln">18</span>
<span class="ln">19</span>	<span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">20</span>
<span class="ln">21</span><span class="n">nothing</span> <span class="n">added</span> <span class="n">to</span> <span class="n">commit</span> <span class="n">but</span> <span class="n">untracked</span> <span class="n">files</span> <span class="nf">present</span> <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git add&#34;</span> <span class="n">to</span> <span class="n">track</span><span class="o">)</span>
</code></pre></div><p><strong><code>git add</code> 添加需要提交的文件</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">git</span> <span class="n">add</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// $ git add . 添加所有被修改过的文件
</span><span class="ln"> 2</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span>
<span class="ln"> 3</span><span class="n">On</span> <span class="n">branch</span> <span class="n">master</span>
<span class="ln"> 4</span>
<span class="ln"> 5</span><span class="n">No</span> <span class="n">commits</span> <span class="n">yet</span>
<span class="ln"> 6</span>
<span class="ln"> 7</span><span class="n">Changes</span> <span class="n">to</span> <span class="n">be</span> <span class="n">committed</span><span class="o">:</span> <span class="c1">// 追踪到已新committed文件
</span><span class="ln"> 8</span><span class="c1"></span>  <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git rm --cached &lt;file&gt;...&#34;</span> <span class="n">to</span> <span class="n">unstage</span><span class="o">)</span> <span class="c1">// git rm --cached &lt;file&gt; 可撤回当前操作
</span><span class="ln"> 9</span><span class="c1"></span>
<span class="ln">10</span>	<span class="k">new</span> <span class="n">file</span><span class="o">:</span>   <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// 新 added 文件
</span></code></pre></div><p><strong><code>git rm --cached &lt;file&gt;</code>  撤回之前添加的文件</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">git</span> <span class="n">rm</span> <span class="o">--</span><span class="n">cached</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> 
<span class="ln"> 2</span><span class="n">rm</span> <span class="err">&#39;</span><span class="n">test</span><span class="o">.</span><span class="na">txt</span><span class="err">&#39;</span>
<span class="ln"> 3</span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span> 
<span class="ln"> 4</span><span class="n">On</span> <span class="n">branch</span> <span class="n">master</span>
<span class="ln"> 5</span>
<span class="ln"> 6</span><span class="n">No</span> <span class="n">commits</span> <span class="n">yet</span>
<span class="ln"> 7</span>
<span class="ln"> 8</span><span class="n">Untracked</span> <span class="n">files</span><span class="o">:</span> <span class="c1">// test.txt 回复为未被git追踪文件
</span><span class="ln"> 9</span><span class="c1"></span>  <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git add &lt;file&gt;...&#34;</span> <span class="n">to</span> <span class="n">include</span> <span class="n">in</span> <span class="n">what</span> <span class="n">will</span> <span class="n">be</span> <span class="n">committed</span><span class="o">)</span>
<span class="ln">10</span>
<span class="ln">11</span>	<span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">12</span>
<span class="ln">13</span><span class="n">nothing</span> <span class="n">added</span> <span class="n">to</span> <span class="n">commit</span> <span class="n">but</span> <span class="n">untracked</span> <span class="n">files</span> <span class="nf">present</span> <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git add&#34;</span> <span class="n">to</span> <span class="n">track</span><span class="o">)</span>
</code></pre></div><p><strong><code>git commit -m [message]</code> 提交添加的文件和备注信息</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">$</span> <span class="n">git</span> <span class="n">add</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">2</span><span class="n">$</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">my</span> <span class="n">first</span> <span class="n">commit</span><span class="err">&#39;</span>
<span class="ln">3</span><span class="o">[</span><span class="n">master</span> <span class="o">(</span><span class="n">root</span><span class="o">-</span><span class="n">commit</span><span class="o">)</span> <span class="n">91151c2</span><span class="o">]</span> <span class="n">my</span> <span class="n">first</span> <span class="n">commit</span>
<span class="ln">4</span> <span class="n">1</span> <span class="n">file</span> <span class="n">changed</span><span class="o">,</span> <span class="n">1</span> <span class="nf">insertion</span><span class="o">(+)</span> <span class="c1">//一个文件被改变，新增一行代码
</span><span class="ln">5</span><span class="c1"></span> <span class="n">create</span> <span class="n">mode</span> <span class="n">100644</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">6</span>  
<span class="ln">7</span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span> <span class="c1">// 查看本地仓库状态
</span><span class="ln">8</span><span class="c1"></span><span class="n">On</span> <span class="n">branch</span> <span class="n">master</span>
<span class="ln">9</span><span class="n">nothing</span> <span class="n">to</span> <span class="n">commit</span><span class="o">,</span> <span class="n">working</span> <span class="n">tree</span> <span class="n">clean</span> <span class="c1">// 无文件需要提交，工作区是干净的
</span></code></pre></div><p><strong>nano 修改test.txt文件内容</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">nano</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// 用nano editor 修改文件内容， ctrl + X 保存并退出
</span><span class="ln"> 2</span><span class="c1"></span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// 查看文件内容
</span><span class="ln"> 3</span><span class="c1"></span><span class="n">test</span> <span class="n">hello</span> <span class="n">world</span>  
<span class="ln"> 4</span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span> <span class="c1">// 查看文件被修改后在本地仓库的状态
</span><span class="ln"> 5</span><span class="c1"></span><span class="n">On</span> <span class="n">branch</span> <span class="n">master</span> <span class="c1">//位于master branch
</span><span class="ln"> 6</span><span class="c1"></span><span class="n">Changes</span> <span class="n">not</span> <span class="n">staged</span> <span class="k">for</span> <span class="n">commit</span><span class="o">:</span> <span class="c1">// 有改变但为commit
</span><span class="ln"> 7</span><span class="c1"></span>  <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git add &lt;file&gt;...&#34;</span> <span class="n">to</span> <span class="n">update</span> <span class="n">what</span> <span class="n">will</span> <span class="n">be</span> <span class="n">committed</span><span class="o">)</span>
<span class="ln"> 8</span>  <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git checkout -- &lt;file&gt;...&#34;</span> <span class="n">to</span> <span class="n">discard</span> <span class="n">changes</span> <span class="n">in</span> <span class="n">working</span> <span class="n">directory</span><span class="o">)</span>
<span class="ln"> 9</span><span class="nl">
</span><span class="ln">10</span><span class="nl">	modified:</span>   <span class="n">test</span><span class="o">.</span><span class="na">txt</span>  <span class="c1">//修改过的的文件：file—name
</span><span class="ln">11</span><span class="c1">// 已added过，又被修改的文件可以直接 commit -a
</span><span class="ln">12</span><span class="c1"></span><span class="n">no</span> <span class="n">changes</span> <span class="n">added</span> <span class="n">to</span> <span class="nf">commit</span> <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git add&#34;</span> <span class="n">and</span><span class="o">/</span><span class="n">or</span> <span class="s">&#34;git commit -a&#34;</span><span class="o">)</span>  
<span class="ln">13</span>    
<span class="ln">14</span><span class="n">$</span> <span class="n">git</span> <span class="n">add</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// add 被修改过的文件
</span><span class="ln">15</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">first</span> <span class="n">time</span> <span class="n">edit</span><span class="err">&#39;</span> <span class="c1">// 提交 commit
</span><span class="ln">16</span><span class="c1"></span><span class="o">[</span><span class="n">master</span> <span class="n">014b9c9</span><span class="o">]</span> <span class="n">first</span> <span class="n">time</span> <span class="n">edit</span>
<span class="ln">17</span> <span class="n">1</span> <span class="n">file</span> <span class="n">changed</span><span class="o">,</span> <span class="n">1</span> <span class="nf">insertion</span><span class="o">(+),</span> <span class="n">1</span> <span class="nf">deletion</span><span class="o">(-)</span> <span class="c1">// 1个文件被修改过
</span><span class="ln">18</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span>
<span class="ln">19</span><span class="n">On</span> <span class="n">branch</span> <span class="n">master</span>
<span class="ln">20</span><span class="n">nothing</span> <span class="n">to</span> <span class="n">commit</span><span class="o">,</span> <span class="n">working</span> <span class="n">tree</span> <span class="n">clean</span> <span class="c1">// working tree OK
</span></code></pre></div><p><strong><code>git log</code> 版本提交日志</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">git</span> <span class="n">log</span>
<span class="ln"> 2</span><span class="n">commit</span> <span class="nf">d77465cc8824b3f312740676c93f75f4be4370a9</span> <span class="o">(</span><span class="n">HEAD</span> <span class="o">-&gt;</span> <span class="n">master</span><span class="o">)</span> 
<span class="ln"> 3</span>  <span class="c1">//HEAD相当于一个指针，指向当前版本。我们切换版本相当于移动 HEAD指针
</span><span class="ln"> 4</span><span class="c1"></span><span class="nl">Author:</span> <span class="n">dai</span> <span class="o">&lt;</span><span class="n">wdai</span><span class="nd">@mail.com</span><span class="o">&gt;</span>
<span class="ln"> 5</span><span class="nl">Date:</span>   <span class="n">Wed</span> <span class="n">Nov</span> <span class="n">10</span> <span class="n">12</span><span class="o">:</span><span class="n">21</span><span class="o">:</span><span class="n">17</span> <span class="n">2021</span> <span class="o">+</span><span class="n">0800</span>
<span class="ln"> 6</span>
<span class="ln"> 7</span>    <span class="n">add</span> <span class="n">more</span> <span class="n">text</span>
<span class="ln"> 8</span>
<span class="ln"> 9</span><span class="n">commit</span> <span class="n">014b9c9d8287da50bd521950c889c147205610a2</span>
<span class="ln">10</span><span class="nl">Author:</span> <span class="n">dai</span> <span class="o">&lt;</span><span class="n">wdai</span><span class="nd">@mail.com</span><span class="o">&gt;</span>
<span class="ln">11</span><span class="nl">Date:</span>   <span class="n">Tue</span> <span class="n">Nov</span> <span class="n">9</span> <span class="n">19</span><span class="o">:</span><span class="n">43</span><span class="o">:</span><span class="n">25</span> <span class="n">2021</span> <span class="o">+</span><span class="n">0800</span>
<span class="ln">12</span>
<span class="ln">13</span>    <span class="n">first</span> <span class="n">time</span> <span class="n">edit</span>
<span class="ln">14</span>  
<span class="ln">15</span><span class="n">$</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">pretty</span><span class="o">=</span><span class="n">oneline</span> <span class="c1">// 当日志太多可以使用参数每次commit只显示一行
</span><span class="ln">16</span><span class="c1"></span><span class="n">b963c9146d3fac75a6488c1885431dce0d60717d</span> <span class="o">(</span><span class="n">HEAD</span> <span class="o">-&gt;</span> <span class="n">master</span><span class="o">)</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">3</span>
<span class="ln">17</span><span class="n">219dc6b24eb17613bf6cd7621421e1e9e5975027</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">2</span>
<span class="ln">18</span><span class="n">46a3927da53bfdcc8a7730fb042605b650be52f2</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">1</span>
<span class="ln">19</span><span class="n">d77465cc8824b3f312740676c93f75f4be4370a9</span> <span class="n">add</span> <span class="n">more</span> <span class="n">text</span>
<span class="ln">20</span><span class="n">014b9c9d8287da50bd521950c889c147205610a2</span> <span class="n">first</span> <span class="n">time</span> <span class="n">edit</span>
<span class="ln">21</span><span class="n">91151c2bc99fb6184ed82bf7b8b5fc32d7118909</span> <span class="n">my</span> <span class="n">first</span> <span class="n">commit</span>
<span class="ln">22</span>
<span class="ln">23</span><span class="n">$</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">oneline</span> <span class="c1">// 只显示当前版本以及之后的版本，不显示前面的版本。哈希值只显示尾部，更加简短。     
</span><span class="ln">24</span><span class="c1"></span><span class="n">b963c91</span> <span class="o">(</span><span class="n">HEAD</span> <span class="o">-&gt;</span> <span class="n">master</span><span class="o">)</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">3</span>
<span class="ln">25</span><span class="n">219dc6b</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">2</span>
<span class="ln">26</span><span class="n">46a3927</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">1</span>
<span class="ln">27</span><span class="n">d77465c</span> <span class="n">add</span> <span class="n">more</span> <span class="n">text</span>
<span class="ln">28</span><span class="n">014b9c9</span> <span class="n">first</span> <span class="n">time</span> <span class="n">edit</span>
<span class="ln">29</span><span class="n">91151c2</span> <span class="n">my</span> <span class="n">first</span> <span class="n">commit</span>
<span class="ln">30</span>  
<span class="ln">31</span><span class="n">$</span> <span class="n">git</span> <span class="n">reflog</span>  <span class="c1">// 显示所有版本，推荐使用
</span><span class="ln">32</span><span class="c1"></span><span class="n">b963c91</span> <span class="o">(</span><span class="n">HEAD</span> <span class="o">-&gt;</span> <span class="n">master</span><span class="o">)</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">0</span><span class="o">}:</span> <span class="n">commit</span><span class="o">:</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">3</span> <span class="c1">// HEAD 0 当前版本
</span><span class="ln">33</span><span class="c1"></span><span class="n">219dc6b</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">1</span><span class="o">}:</span> <span class="n">commit</span><span class="o">:</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">2</span> <span class="c1">// HEAD 1，到此版本需要移动指针一次
</span><span class="ln">34</span><span class="c1"></span><span class="n">46a3927</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">2</span><span class="o">}:</span> <span class="n">commit</span><span class="o">:</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">1</span>
<span class="ln">35</span><span class="n">d77465c</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">3</span><span class="o">}:</span> <span class="n">commit</span><span class="o">:</span> <span class="n">add</span> <span class="n">more</span> <span class="n">text</span>
<span class="ln">36</span><span class="n">014b9c9</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">4</span><span class="o">}:</span> <span class="n">commit</span><span class="o">:</span> <span class="n">first</span> <span class="n">time</span> <span class="n">edit</span>
<span class="ln">37</span><span class="n">91151c2</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">5</span><span class="o">}:</span> <span class="n">commit</span> <span class="o">(</span><span class="n">initial</span><span class="o">):</span> <span class="n">my</span> <span class="n">first</span> <span class="n">commit</span>
</code></pre></div><p><strong><code>git-reset</code> : Reset current HEAD to the specified state  重置当前HEAD指针到指定版本</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">soft</span> <span class="o">:</span> <span class="n">not</span> <span class="n">touch</span> <span class="n">the</span> <span class="n">index</span> <span class="n">file</span> <span class="n">or</span> <span class="n">the</span> <span class="n">working</span> <span class="n">tree</span> <span class="n">at</span> <span class="n">all</span><span class="o">.</span><span class="c1">//仅重置本地库。
</span><span class="ln">2</span><span class="c1"></span><span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">mix</span> <span class="o">:</span> <span class="n">resets</span> <span class="n">the</span> <span class="n">index</span> <span class="n">but</span> <span class="n">not</span> <span class="n">the</span> <span class="n">working</span> <span class="n">tree</span><span class="o">.</span><span class="c1">//重置本地库和暂存库。
</span><span class="ln">3</span><span class="c1"></span><span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">hard</span> <span class="o">:</span> <span class="n">resets</span> <span class="n">the</span> <span class="n">index</span> <span class="n">and</span> <span class="n">working</span> <span class="n">tree</span><span class="o">.</span><span class="c1">//重置本地库，暂存区，工作库。
</span><span class="ln">4</span><span class="c1"></span><span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">merge</span> <span class="o">:</span>
<span class="ln">5</span><span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">keep</span> <span class="o">:</span> 
<span class="ln">6</span><span class="n">git</span><span class="o">-</span><span class="n">revert</span><span class="o">(</span><span class="n">1</span><span class="o">)</span> <span class="o">:</span> <span class="c1">//重置最新版本，返回上一个版本
</span></code></pre></div><p><strong><code>git reset --hard [hash_valve]</code> 基于索引值前进后退版本，推荐使用</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">git</span> <span class="n">reflog</span> <span class="c1">// 显示各版本信息
</span><span class="ln"> 2</span><span class="c1"></span><span class="n">a6070ce</span> <span class="o">(</span><span class="n">HEAD</span> <span class="o">-&gt;</span> <span class="n">master</span><span class="o">)</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">0</span><span class="o">}:</span> <span class="n">reset</span><span class="o">:</span> <span class="n">moving</span> <span class="n">to</span> <span class="n">a6070ce</span>
<span class="ln"> 3</span><span class="n">4a34a05</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">1</span><span class="o">}:</span> <span class="n">reset</span><span class="o">:</span> <span class="n">moving</span> <span class="n">to</span> <span class="n">4a34a05</span>
<span class="ln"> 4</span><span class="nf">a6070ce</span> <span class="o">(</span><span class="n">HEAD</span> <span class="o">-&gt;</span> <span class="n">master</span><span class="o">)</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">2</span><span class="o">}:</span> <span class="n">commit</span><span class="o">:</span> <span class="n">add</span> <span class="n">333</span>
<span class="ln"> 5</span><span class="n">9143841</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">3</span><span class="o">}:</span> <span class="n">commit</span><span class="o">:</span> <span class="n">add</span> <span class="n">222</span>
<span class="ln"> 6</span><span class="n">4a34a05</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">4</span><span class="o">}:</span> <span class="n">commit</span><span class="o">:</span> <span class="n">add</span> <span class="n">111</span>
<span class="ln"> 7</span><span class="n">b963c91</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">5</span><span class="o">}:</span> <span class="n">commit</span><span class="o">:</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">3</span>
<span class="ln"> 8</span><span class="n">219dc6b</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">6</span><span class="o">}:</span> <span class="n">commit</span><span class="o">:</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">2</span>
<span class="ln"> 9</span><span class="n">46a3927</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">7</span><span class="o">}:</span> <span class="n">commit</span><span class="o">:</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">1</span> <span class="c1">// 目标版本索引值 46a3927
</span><span class="ln">10</span><span class="c1"></span><span class="n">d77465c</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">8</span><span class="o">}:</span> <span class="n">commit</span><span class="o">:</span> <span class="n">add</span> <span class="n">more</span> <span class="n">text</span>
<span class="ln">11</span><span class="n">014b9c9</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">9</span><span class="o">}:</span> <span class="n">commit</span><span class="o">:</span> <span class="n">first</span> <span class="n">time</span> <span class="n">edit</span>
<span class="ln">12</span><span class="n">91151c2</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">10</span><span class="o">}:</span> <span class="n">commit</span> <span class="o">(</span><span class="n">initial</span><span class="o">):</span> <span class="n">my</span> <span class="n">first</span> <span class="n">commit</span>
<span class="ln">13</span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//显示当前版本内容
</span><span class="ln">14</span><span class="c1"></span><span class="n">111</span>
<span class="ln">15</span><span class="n">222</span>
<span class="ln">16</span><span class="n">333</span>
<span class="ln">17</span><span class="n">$</span> <span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">hard</span> <span class="n">46a3927</span> <span class="c1">// 基于索引值退回到目标版本
</span><span class="ln">18</span><span class="c1"></span><span class="n">HEAD</span> <span class="n">is</span> <span class="n">now</span> <span class="n">at</span> <span class="n">46a3927</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">1</span> <span class="c1">//版本回退成功
</span><span class="ln">19</span><span class="c1"></span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//显示目标版本内容
</span><span class="ln">20</span><span class="c1"></span><span class="n">test</span> <span class="n">hello</span> <span class="n">world</span>
<span class="ln">21</span><span class="n">1111dwd</span> <span class="n">dwdd</span>
<span class="ln">22</span><span class="n">adad</span>
<span class="ln">23</span><span class="n">add</span> <span class="n">more1</span>
</code></pre></div><p><strong><code>git reset --hard HEAD^</code> 基于 ^ 异或符号的 版本回退， 只可以回退，不可以前进，不推荐</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">oneline</span>  <span class="c1">// 单行显示log
</span><span class="ln"> 2</span><span class="c1"></span><span class="n">a6070ce</span> <span class="o">(</span><span class="n">HEAD</span> <span class="o">-&gt;</span> <span class="n">master</span><span class="o">)</span> <span class="n">add</span> <span class="n">333</span>
<span class="ln"> 3</span><span class="n">9143841</span> <span class="n">add</span> <span class="n">222</span>
<span class="ln"> 4</span><span class="n">4a34a05</span> <span class="n">add</span> <span class="n">111</span>
<span class="ln"> 5</span><span class="n">b963c91</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">3</span>
<span class="ln"> 6</span><span class="n">219dc6b</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">2</span>
<span class="ln"> 7</span><span class="n">46a3927</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">1</span>
<span class="ln"> 8</span><span class="n">d77465c</span> <span class="n">add</span> <span class="n">more</span> <span class="n">text</span>
<span class="ln"> 9</span><span class="n">014b9c9</span> <span class="n">first</span> <span class="n">time</span> <span class="n">edit</span>
<span class="ln">10</span><span class="n">91151c2</span> <span class="n">my</span> <span class="n">first</span> <span class="n">commit</span>
<span class="ln">11</span><span class="n">$</span> <span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">hard</span> <span class="n">HEAD</span><span class="o">^</span>  <span class="c1">//一个 ^ 回退一个版本
</span><span class="ln">12</span><span class="c1"></span><span class="n">HEAD</span> <span class="n">is</span> <span class="n">now</span> <span class="n">at</span> <span class="n">9143841</span> <span class="n">add</span> <span class="n">222</span>
<span class="ln">13</span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>          
<span class="ln">14</span><span class="n">111</span>
<span class="ln">15</span><span class="n">222</span>
<span class="ln">16</span><span class="c1">// $ git reset --hard HEAD^^^^ //四个^^^^ 回退四个版本
</span><span class="ln">17</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">hard</span> <span class="n">HEAD</span><span class="o">~</span><span class="n">4</span>  <span class="c1">// HEAD~4 == HEAD^^^^
</span><span class="ln">18</span><span class="c1"></span><span class="n">HEAD</span> <span class="n">is</span> <span class="n">now</span> <span class="n">at</span> <span class="n">46a3927</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">1</span>
<span class="ln">19</span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>             
<span class="ln">20</span><span class="n">test</span> <span class="n">hello</span> <span class="n">world</span>
<span class="ln">21</span><span class="n">1111dwd</span> <span class="n">dwdd</span>
<span class="ln">22</span><span class="n">adad</span>
<span class="ln">23</span><span class="n">add</span> <span class="n">more1</span>
</code></pre></div><p><strong>恢复已删除文件</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">nano</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// 工作区新建文件aaa.txt
</span><span class="ln"> 2</span><span class="c1"></span><span class="n">$</span> <span class="n">ls</span>
<span class="ln"> 3</span><span class="n">aaa</span><span class="o">.</span><span class="na">txt</span>		<span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 4</span>  
<span class="ln"> 5</span><span class="n">$</span> <span class="n">git</span> <span class="n">add</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// 添加并提交新建文件到本地仓库
</span><span class="ln"> 6</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">add</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span><span class="err">&#39;</span>
<span class="ln"> 7</span><span class="o">[</span><span class="n">master</span> <span class="n">e377c41</span><span class="o">]</span> <span class="n">add</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 8</span> <span class="n">1</span> <span class="n">file</span> <span class="n">changed</span><span class="o">,</span> <span class="n">1</span> <span class="nf">insertion</span><span class="o">(+)</span>
<span class="ln"> 9</span> <span class="n">create</span> <span class="n">mode</span> <span class="n">100644</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">10</span><span class="n">$</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">oneline</span> <span class="c1">// 查看log
</span><span class="ln">11</span><span class="c1"></span><span class="n">e377c41</span> <span class="o">(</span><span class="n">HEAD</span> <span class="o">-&gt;</span> <span class="n">master</span><span class="o">)</span> <span class="n">add</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// 当前版本已添加新文件
</span><span class="ln">12</span><span class="c1"></span><span class="n">a6070ce</span> <span class="n">add</span> <span class="n">333</span>
<span class="ln">13</span><span class="n">9143841</span> <span class="n">add</span> <span class="n">222</span>
<span class="ln">14</span><span class="n">4a34a05</span> <span class="n">add</span> <span class="n">111</span>
<span class="ln">15</span><span class="n">b963c91</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">3</span>
<span class="ln">16</span><span class="n">219dc6b</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">2</span>
<span class="ln">17</span><span class="n">46a3927</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">1</span>
<span class="ln">18</span><span class="n">d77465c</span> <span class="n">add</span> <span class="n">more</span> <span class="n">text</span>
<span class="ln">19</span><span class="n">014b9c9</span> <span class="n">first</span> <span class="n">time</span> <span class="n">edit</span>
<span class="ln">20</span><span class="n">91151c2</span> <span class="n">my</span> <span class="n">first</span> <span class="n">commit</span>
<span class="ln">21</span>  
<span class="ln">22</span><span class="n">$</span> <span class="n">rm</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// remove 工作区新建的文件
</span><span class="ln">23</span><span class="c1"></span><span class="n">$</span> <span class="n">ls</span> 
<span class="ln">24</span><span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">25</span>  
<span class="ln">26</span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span> <span class="c1">//查看 git 暂存区当前状态
</span><span class="ln">27</span><span class="c1"></span><span class="n">On</span> <span class="n">branch</span> <span class="n">master</span>
<span class="ln">28</span><span class="n">Changes</span> <span class="n">not</span> <span class="n">staged</span> <span class="k">for</span> <span class="n">commit</span><span class="o">:</span>
<span class="ln">29</span>  <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git add/rm &lt;file&gt;...&#34;</span> <span class="n">to</span> <span class="n">update</span> <span class="n">what</span> <span class="n">will</span> <span class="n">be</span> <span class="n">committed</span><span class="o">)</span>
<span class="ln">30</span>  <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git checkout -- &lt;file&gt;...&#34;</span> <span class="n">to</span> <span class="n">discard</span> <span class="n">changes</span> <span class="n">in</span> <span class="n">working</span> <span class="n">directory</span><span class="o">)</span>
<span class="ln">31</span><span class="nl">
</span><span class="ln">32</span><span class="nl">	deleted:</span>    <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// 显示已删除但还未提交本地仓库
</span><span class="ln">33</span><span class="c1"></span>
<span class="ln">34</span><span class="n">no</span> <span class="n">changes</span> <span class="n">added</span> <span class="n">to</span> <span class="nf">commit</span> <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git add&#34;</span> <span class="n">and</span><span class="o">/</span><span class="n">or</span> <span class="s">&#34;git commit -a&#34;</span><span class="o">)</span>
<span class="ln">35</span>   
<span class="ln">36</span><span class="n">$</span> <span class="n">git</span> <span class="n">add</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//添加删除请求
</span><span class="ln">37</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span>
<span class="ln">38</span><span class="n">On</span> <span class="n">branch</span> <span class="n">master</span>
<span class="ln">39</span><span class="n">Changes</span> <span class="n">to</span> <span class="n">be</span> <span class="n">committed</span><span class="o">:</span>
<span class="ln">40</span>  <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git reset HEAD &lt;file&gt;...&#34;</span> <span class="n">to</span> <span class="n">unstage</span><span class="o">)</span> <span class="c1">// reset 可返回删除前版本
</span><span class="ln">41</span><span class="c1"></span><span class="nl">
</span><span class="ln">42</span><span class="nl">	deleted:</span>    <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span> 
<span class="ln">43</span>
<span class="ln">44</span><span class="n">$</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">delete</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span><span class="err">&#39;</span> <span class="c1">// 提交删除请求
</span><span class="ln">45</span><span class="c1"></span><span class="o">[</span><span class="n">master</span> <span class="n">a3c257a</span><span class="o">]</span> <span class="n">delete</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">46</span> <span class="n">1</span> <span class="n">file</span> <span class="n">changed</span><span class="o">,</span> <span class="n">1</span> <span class="nf">deletion</span><span class="o">(-)</span>
<span class="ln">47</span> <span class="n">delete</span> <span class="n">mode</span> <span class="n">100644</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">48</span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span> <span class="c1">// 查看暂存区状态，clean
</span><span class="ln">49</span><span class="c1"></span><span class="n">On</span> <span class="n">branch</span> <span class="n">master</span>
<span class="ln">50</span><span class="n">nothing</span> <span class="n">to</span> <span class="n">commit</span><span class="o">,</span> <span class="n">working</span> <span class="n">tree</span> <span class="n">clean</span>
<span class="ln">51</span>    
<span class="ln">52</span><span class="n">$</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">oneline</span> <span class="c1">//查看日志
</span><span class="ln">53</span><span class="c1"></span><span class="n">a3c257a</span> <span class="o">(</span><span class="n">HEAD</span> <span class="o">-&gt;</span> <span class="n">master</span><span class="o">)</span> <span class="n">delete</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//当前版本
</span><span class="ln">54</span><span class="c1"></span><span class="n">e377c41</span> <span class="n">add</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//新建文件版本
</span><span class="ln">55</span><span class="c1"></span><span class="n">a6070ce</span> <span class="n">add</span> <span class="n">333</span>
<span class="ln">56</span><span class="n">9143841</span> <span class="n">add</span> <span class="n">222</span>
<span class="ln">57</span><span class="n">4a34a05</span> <span class="n">add</span> <span class="n">111</span>
<span class="ln">58</span><span class="n">b963c91</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">3</span>
<span class="ln">59</span><span class="n">219dc6b</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">2</span>
<span class="ln">60</span><span class="n">46a3927</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">1</span>
<span class="ln">61</span><span class="n">d77465c</span> <span class="n">add</span> <span class="n">more</span> <span class="n">text</span>
<span class="ln">62</span><span class="n">014b9c9</span> <span class="n">first</span> <span class="n">time</span> <span class="n">edit</span>
<span class="ln">63</span><span class="n">91151c2</span> <span class="n">my</span> <span class="n">first</span> <span class="n">commit</span>
<span class="ln">64</span><span class="n">$</span> <span class="n">ls</span> <span class="c1">// ls -l 可查看文件信息
</span><span class="ln">65</span><span class="c1"></span><span class="n">test</span><span class="o">.</span><span class="na">txt</span>   
<span class="ln">66</span>
<span class="ln">67</span><span class="n">$</span> <span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">hard</span> <span class="n">e377c41</span> <span class="c1">//恢复删除之前版本
</span><span class="ln">68</span><span class="c1"></span><span class="n">HEAD</span> <span class="n">is</span> <span class="n">now</span> <span class="n">at</span> <span class="n">e377c41</span> <span class="n">add</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">69</span><span class="err">¥</span> <span class="n">ls</span> <span class="c1">// 查看文件aaa.txt 已恢复
</span><span class="ln">70</span><span class="c1"></span><span class="n">aaa</span><span class="o">.</span><span class="na">txt</span>		<span class="n">test</span><span class="o">.</span><span class="na">txt</span>
</code></pre></div><p><strong><code>git diff [file]</code> 比较文件差异</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="c1">// diff 不仅可以和工作区文件进行比较，还可以和暂存区，本地库之前各文件进行比较
</span><span class="ln"> 2</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">diff</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span> 
<span class="ln"> 3</span><span class="n">diff</span> <span class="o">--</span><span class="n">git</span> <span class="n">a</span><span class="o">/</span><span class="n">aaa</span><span class="o">.</span><span class="na">txt</span> <span class="n">b</span><span class="o">/</span><span class="n">aaa</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 4</span><span class="n">index</span> <span class="n">41cfa54</span><span class="o">..</span><span class="na">e452369</span> <span class="n">100644</span>
<span class="ln"> 5</span><span class="o">---</span> <span class="n">a</span><span class="o">/</span><span class="n">aaa</span><span class="o">.</span><span class="na">txt</span> 
<span class="ln"> 6</span><span class="o">+++</span> <span class="n">b</span><span class="o">/</span><span class="n">aaa</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 7</span><span class="err">@@</span> <span class="o">-</span><span class="n">1</span> <span class="o">+</span><span class="n">1</span><span class="o">,</span><span class="n">3</span> <span class="err">@@</span>
<span class="ln"> 8</span> <span class="n">crated</span> <span class="k">for</span> <span class="n">delete</span> <span class="n">testing</span>
<span class="ln"> 9</span><span class="o">+</span><span class="n">addd</span> <span class="c1">// +表示新增行
</span><span class="ln">10</span><span class="c1"></span><span class="o">+</span><span class="n">addd</span> <span class="c1">// +表示新增行
</span></code></pre></div><h2 id="git-branch"><code>git branch</code></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">  1</span><span class="n">$</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">v</span> <span class="c1">// 产看全部分支
</span><span class="ln">  2</span><span class="c1"></span><span class="o">*</span> <span class="n">master</span> <span class="n">01c9112</span> <span class="n">edit</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">  3</span>  
<span class="ln">  4</span><span class="n">$</span> <span class="n">git</span> <span class="n">branch</span> <span class="n">hot_fix</span> <span class="c1">// 创建新的分支
</span><span class="ln">  5</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">v</span>
<span class="ln">  6</span>  <span class="c1">// 此时版本hash值是一样的 01c9112，说明分支和master处于同一个版本
</span><span class="ln">  7</span><span class="c1"></span>  <span class="n">hot_fix</span> <span class="n">01c9112</span> <span class="n">edit</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span> 
<span class="ln">  8</span><span class="o">*</span> <span class="n">master</span>  <span class="n">01c9112</span> <span class="n">edit</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// * 表示现在目前坐在分支
</span><span class="ln">  9</span><span class="c1"></span>  
<span class="ln"> 10</span><span class="n">$</span> <span class="n">git</span> <span class="n">checkout</span> <span class="n">hot_fix</span> <span class="c1">// 切换分支
</span><span class="ln"> 11</span><span class="c1"></span><span class="n">Switched</span> <span class="n">to</span> <span class="n">branch</span> <span class="err">&#39;</span><span class="n">hot_fix</span><span class="err">&#39;</span>
<span class="ln"> 12</span><span class="n">$</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">v</span>       
<span class="ln"> 13</span><span class="o">*</span> <span class="n">hot_fix</span> <span class="n">01c9112</span> <span class="n">edit</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span>  <span class="c1">// 分支切换到 * hot_fix
</span><span class="ln"> 14</span><span class="c1"></span>  <span class="n">master</span>  <span class="n">01c9112</span> <span class="n">edit</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 15</span>  
<span class="ln"> 16</span><span class="n">$</span> <span class="n">nano</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// 在 hot_fix分支上修改 test.txt文件
</span><span class="ln"> 17</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">add</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//提交修改
</span><span class="ln"> 18</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">edit</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="n">by</span> <span class="n">hot_fix</span><span class="err">&#39;</span>
<span class="ln"> 19</span><span class="o">[</span><span class="n">hot_fix</span> <span class="n">e2b708c</span><span class="o">]</span> <span class="n">edit</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="n">by</span> <span class="n">hot_fix</span>
<span class="ln"> 20</span> <span class="n">1</span> <span class="n">file</span> <span class="n">changed</span><span class="o">,</span> <span class="n">1</span> <span class="nf">insertion</span><span class="o">(+)</span>
<span class="ln"> 21</span><span class="n">$</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">v</span> 
<span class="ln"> 22</span>  <span class="c1">//查看分支发现新分支和master的 hash值 已经不一样了，说明分支版本已跟新
</span><span class="ln"> 23</span><span class="c1"></span><span class="o">*</span> <span class="n">hot_fix</span> <span class="n">e2b708c</span> <span class="n">edit</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="n">by</span> <span class="n">hot_fix</span>
<span class="ln"> 24</span>  <span class="n">master</span>  <span class="n">01c9112</span> <span class="n">edit</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 25</span>  
<span class="ln"> 26</span><span class="c1">// 合并分支前，要先切换到你想要跟新的分支上，比如你想把hot_fix分支合并到master分支，就需要先切换到master分支，再把hot_fix分支合并进来。 
</span><span class="ln"> 27</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">checkout</span> <span class="n">master</span>
<span class="ln"> 28</span><span class="n">Switched</span> <span class="n">to</span> <span class="n">branch</span> <span class="err">&#39;</span><span class="n">master</span><span class="err">&#39;</span>
<span class="ln"> 29</span><span class="n">$</span> <span class="n">git</span> <span class="n">branch</span>
<span class="ln"> 30</span>  <span class="n">hot_fix</span>
<span class="ln"> 31</span><span class="o">*</span> <span class="n">master</span>  <span class="c1">// 切换到meter分支
</span><span class="ln"> 32</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">merge</span> <span class="n">hot_fix</span> <span class="c1">// 把hot_fix分支 合并到 master分支
</span><span class="ln"> 33</span><span class="c1"></span><span class="n">Updating</span> <span class="n">01c9112</span><span class="o">..</span><span class="na">e2b708c</span>
<span class="ln"> 34</span><span class="n">Fast</span><span class="o">-</span><span class="n">forward</span>
<span class="ln"> 35</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="o">|</span> <span class="n">1</span> <span class="o">+</span>
<span class="ln"> 36</span> <span class="n">1</span> <span class="n">file</span> <span class="n">changed</span><span class="o">,</span> <span class="n">1</span> <span class="nf">insertion</span><span class="o">(+)</span>
<span class="ln"> 37</span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//查看文件，合并成功
</span><span class="ln"> 38</span><span class="c1"></span><span class="n">111</span>
<span class="ln"> 39</span><span class="n">222</span>
<span class="ln"> 40</span><span class="n">333</span>
<span class="ln"> 41</span><span class="n">444</span> <span class="n">add</span> <span class="n">by</span> <span class="n">hot_fix</span> <span class="c1">//这一行是hot_fix分支修改后合并到master的
</span><span class="ln"> 42</span><span class="c1"></span>
<span class="ln"> 43</span><span class="n">$</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">v</span> <span class="c1">//合并完成后分支和master hash值一样 e2b708c
</span><span class="ln"> 44</span><span class="c1"></span>  <span class="n">hot_fix</span> <span class="n">e2b708c</span> <span class="n">edit</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="n">by</span> <span class="n">hot_fix</span>
<span class="ln"> 45</span><span class="o">*</span> <span class="n">master</span>  <span class="n">e2b708c</span> <span class="n">edit</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="n">by</span> <span class="n">hot_fix</span>
<span class="ln"> 46</span>
<span class="ln"> 47</span><span class="c1">//处理合并冲突conflict
</span><span class="ln"> 48</span><span class="c1"></span><span class="n">$</span> <span class="n">nano</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//在master修改文件
</span><span class="ln"> 49</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">add</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 50</span><span class="n">$</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">add</span> <span class="n">555</span> <span class="n">by</span> <span class="n">master</span><span class="err">&#39;</span>
<span class="ln"> 51</span><span class="o">[</span><span class="n">master</span> <span class="n">154943a</span><span class="o">]</span> <span class="n">add</span> <span class="n">555</span> <span class="n">by</span> <span class="n">master</span>
<span class="ln"> 52</span> <span class="n">1</span> <span class="n">file</span> <span class="n">changed</span><span class="o">,</span> <span class="n">2</span> <span class="nf">insertions</span><span class="o">(+),</span> <span class="n">1</span> <span class="nf">deletion</span><span class="o">(-)</span>
<span class="ln"> 53</span><span class="n">$</span> <span class="n">git</span> <span class="n">checkout</span> <span class="n">hot_fix</span> <span class="c1">//切换到hot分支再修改文件
</span><span class="ln"> 54</span><span class="c1"></span><span class="n">Switched</span> <span class="n">to</span> <span class="n">branch</span> <span class="err">&#39;</span><span class="n">hot_fix</span><span class="err">&#39;</span>
<span class="ln"> 55</span><span class="n">$</span> <span class="n">nano</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 56</span><span class="n">$</span> <span class="n">git</span> <span class="n">add</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 57</span><span class="n">$</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">add</span> <span class="n">666</span> <span class="n">by</span> <span class="n">hot_fix</span><span class="err">&#39;</span>
<span class="ln"> 58</span><span class="o">[</span><span class="n">hot_fix</span> <span class="n">f22571f</span><span class="o">]</span> <span class="n">add</span> <span class="n">666</span> <span class="n">by</span> <span class="n">hot_fix</span>
<span class="ln"> 59</span> <span class="n">1</span> <span class="n">file</span> <span class="n">changed</span><span class="o">,</span> <span class="n">1</span> <span class="nf">insertion</span><span class="o">(+)</span>
<span class="ln"> 60</span><span class="n">$</span> <span class="n">git</span> <span class="n">merge</span> <span class="n">master</span> <span class="c1">// 合并冲突
</span><span class="ln"> 61</span><span class="c1"></span><span class="n">Auto</span><span class="o">-</span><span class="n">merging</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 62</span><span class="nf">CONFLICT</span> <span class="o">(</span><span class="n">content</span><span class="o">):</span> <span class="n">Merge</span> <span class="n">conflict</span> <span class="n">in</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 63</span><span class="n">Automatic</span> <span class="n">merge</span> <span class="n">failed</span><span class="o">;</span> <span class="n">fix</span> <span class="n">conflicts</span> <span class="n">and</span> <span class="n">then</span> <span class="n">commit</span> <span class="n">the</span> <span class="n">result</span><span class="o">.</span>  
<span class="ln"> 64</span>
<span class="ln"> 65</span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//查看文件会发现 git 在文件内有标记conflict的位置
</span><span class="ln"> 66</span><span class="c1"></span><span class="n">111</span>
<span class="ln"> 67</span><span class="n">222</span>
<span class="ln"> 68</span><span class="n">333</span>
<span class="ln"> 69</span><span class="o">&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class="n">HEAD</span>  
<span class="ln"> 70</span><span class="n">444</span> <span class="n">add</span> <span class="n">by</span> <span class="n">hot_fix</span> 
<span class="ln"> 71</span><span class="n">666</span> <span class="n">add</span> <span class="n">by</span> <span class="n">hot_fix</span>
<span class="ln"> 72</span><span class="o">=======</span>
<span class="ln"> 73</span><span class="n">444</span> <span class="n">add</span> <span class="n">by</span> <span class="n">hot_fix</span>
<span class="ln"> 74</span><span class="n">555</span> <span class="n">add</span> <span class="n">by</span> <span class="n">master</span> 
<span class="ln"> 75</span><span class="o">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class="n">master</span>
<span class="ln"> 76</span>
<span class="ln"> 77</span><span class="n">$</span> <span class="n">nano</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//修改冲突
</span><span class="ln"> 78</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span> <span class="c1">//查看状态
</span><span class="ln"> 79</span><span class="c1"></span><span class="n">On</span> <span class="n">branch</span> <span class="n">hot_fix</span>
<span class="ln"> 80</span><span class="n">You</span> <span class="n">have</span> <span class="n">unmerged</span> <span class="n">paths</span><span class="o">.</span>
<span class="ln"> 81</span>  <span class="o">(</span><span class="n">fix</span> <span class="n">conflicts</span> <span class="n">and</span> <span class="n">run</span> <span class="s">&#34;git commit&#34;</span><span class="o">)</span>
<span class="ln"> 82</span>  <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git merge --abort&#34;</span> <span class="n">to</span> <span class="n">abort</span> <span class="n">the</span> <span class="n">merge</span><span class="o">)</span>
<span class="ln"> 83</span>
<span class="ln"> 84</span><span class="n">Unmerged</span> <span class="n">paths</span><span class="o">:</span>
<span class="ln"> 85</span>  <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git add &lt;file&gt;...&#34;</span> <span class="n">to</span> <span class="n">mark</span> <span class="n">resolution</span><span class="o">)</span>
<span class="ln"> 86</span>
<span class="ln"> 87</span>	<span class="n">both</span> <span class="n">modified</span><span class="o">:</span>   <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//所有冲突都被修改
</span><span class="ln"> 88</span><span class="c1"></span>
<span class="ln"> 89</span><span class="n">no</span> <span class="n">changes</span> <span class="n">added</span> <span class="n">to</span> <span class="nf">commit</span> <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git add&#34;</span> <span class="n">and</span><span class="o">/</span><span class="n">or</span> <span class="s">&#34;git commit -a&#34;</span><span class="o">)</span>
<span class="ln"> 90</span><span class="n">$</span> <span class="n">git</span> <span class="n">add</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//添加修改
</span><span class="ln"> 91</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span>      
<span class="ln"> 92</span><span class="n">On</span> <span class="n">branch</span> <span class="n">hot_fix</span>
<span class="ln"> 93</span><span class="n">All</span> <span class="n">conflicts</span> <span class="n">fixed</span> <span class="n">but</span> <span class="n">you</span> <span class="n">are</span> <span class="n">still</span> <span class="n">merging</span><span class="o">.</span>
<span class="ln"> 94</span>  <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git commit&#34;</span> <span class="n">to</span> <span class="n">conclude</span> <span class="n">merge</span><span class="o">)</span>
<span class="ln"> 95</span>
<span class="ln"> 96</span><span class="n">Changes</span> <span class="n">to</span> <span class="n">be</span> <span class="n">committed</span><span class="o">:</span>
<span class="ln"> 97</span><span class="nl">
</span><span class="ln"> 98</span><span class="nl">	modified:</span>   <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//修改完成
</span><span class="ln"> 99</span><span class="c1"></span>
<span class="ln">100</span><span class="n">$</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">resolve</span> <span class="n">conflict</span><span class="err">&#39;</span> <span class="c1">//提交修改
</span><span class="ln">101</span><span class="c1"></span><span class="o">[</span><span class="n">hot_fix</span> <span class="n">7da1a5d</span><span class="o">]</span> <span class="n">resolve</span> <span class="n">conflict</span>
<span class="ln">102</span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span>  <span class="c1">//clean
</span><span class="ln">103</span><span class="c1"></span><span class="n">On</span> <span class="n">branch</span> <span class="n">hot_fix</span>
<span class="ln">104</span><span class="n">nothing</span> <span class="n">to</span> <span class="n">commit</span><span class="o">,</span> <span class="n">working</span> <span class="n">tree</span> <span class="n">clean</span>
<span class="ln">105</span><span class="n">$</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">v</span>
<span class="ln">106</span><span class="o">*</span> <span class="n">hot_fix</span> <span class="n">7da1a5d</span> <span class="n">resolve</span> <span class="n">conflict</span>
<span class="ln">107</span>  <span class="n">master</span>  <span class="n">154943a</span> <span class="n">add</span> <span class="n">555</span> <span class="n">by</span> <span class="n">master</span>
<span class="ln">108</span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">109</span><span class="n">111</span>
<span class="ln">110</span><span class="n">222</span>
<span class="ln">111</span><span class="n">333</span>
<span class="ln">112</span><span class="n">444</span> <span class="n">add</span> <span class="n">by</span> <span class="n">hot_fix</span>
<span class="ln">113</span><span class="n">555</span> <span class="n">add</span> <span class="n">by</span> <span class="n">master</span>
<span class="ln">114</span>
</code></pre></div><h2 id="github">Github</h2>
<h3 id="新建本地工作文件夹并提交到git本地仓库">新建本地工作文件夹并提交到git本地仓库</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">cd</span> <span class="n">githubtest</span>
<span class="ln"> 2</span><span class="n">$</span> <span class="n">git</span> <span class="n">init</span>
<span class="ln"> 3</span><span class="n">Initialized</span> <span class="n">empty</span> <span class="n">Git</span> <span class="n">repository</span> <span class="n">in</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">daiwei</span><span class="o">/</span><span class="n">Desktop</span><span class="o">/</span><span class="n">githubtest</span><span class="o">/.</span><span class="na">git</span><span class="o">/</span>
<span class="ln"> 4</span><span class="n">$</span> <span class="n">nano</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 5</span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 6</span><span class="n">test</span> <span class="n">1</span> <span class="n">3</span> <span class="n">3</span>
<span class="ln"> 7</span><span class="n">$</span> <span class="n">git</span> <span class="n">add</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 8</span><span class="n">$</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">test</span> <span class="n">github</span><span class="err">&#39;</span>
<span class="ln"> 9</span><span class="o">[</span><span class="n">master</span> <span class="o">(</span><span class="n">root</span><span class="o">-</span><span class="n">commit</span><span class="o">)</span> <span class="n">fca7556</span><span class="o">]</span> <span class="n">test</span> <span class="n">github</span>
<span class="ln">10</span> <span class="n">1</span> <span class="n">file</span> <span class="n">changed</span><span class="o">,</span> <span class="n">1</span> <span class="nf">insertion</span><span class="o">(+)</span>
<span class="ln">11</span> <span class="n">create</span> <span class="n">mode</span> <span class="n">100644</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
</code></pre></div><h3 id="git-remote-add">git remote add</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">$</span> <span class="n">git</span> <span class="n">remote</span> <span class="o">-</span><span class="n">v</span> <span class="c1">// 没有添加远程仓库之前， -v　是空的没有东西显示
</span><span class="ln">2</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">remote</span> <span class="n">add</span> <span class="n">origin</span> <span class="n">https</span><span class="o">:</span><span class="c1">//github.com/daiweinus/githubtest.git 
</span><span class="ln">3</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">remote</span> <span class="o">-</span><span class="n">v</span> <span class="c1">// 添加远程仓库之后， -v 可见远程仓库地址了
</span><span class="ln">4</span><span class="c1"></span><span class="n">origin</span>	<span class="n">https</span><span class="o">:</span><span class="c1">//github.com/daiweinus/githubtest.git (fetch)
</span><span class="ln">5</span><span class="c1"></span><span class="n">origin</span>	<span class="n">https</span><span class="o">:</span><span class="c1">//github.com/daiweinus/githubtest.git (push)
</span></code></pre></div><h3 id="git-push">git push</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">$</span> <span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="n">master</span> <span class="c1">// push到你的远程仓库 master 分支上
</span><span class="ln">2</span><span class="c1"></span><span class="n">Username</span> <span class="k">for</span> <span class="err">&#39;</span><span class="n">https</span><span class="o">:</span><span class="c1">//github.com&#39;: yourusername
</span><span class="ln">3</span><span class="c1"></span><span class="n">Password</span> <span class="k">for</span> <span class="err">&#39;</span><span class="n">https</span><span class="o">:</span><span class="c1">//yourusername@github.com&#39;: yourPAT [personal access token]
</span><span class="ln">4</span><span class="c1"></span><span class="n">Enumerating</span> <span class="n">objects</span><span class="o">:</span> <span class="n">3</span><span class="o">,</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">5</span><span class="n">Counting</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">3</span><span class="o">/</span><span class="n">3</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">6</span><span class="n">Writing</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">3</span><span class="o">/</span><span class="n">3</span><span class="o">),</span> <span class="n">217</span> <span class="n">bytes</span> <span class="o">|</span> <span class="n">217</span><span class="o">.</span><span class="na">00</span> <span class="n">KiB</span><span class="o">/</span><span class="n">s</span><span class="o">,</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">7</span><span class="n">Total</span> <span class="nf">3</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">),</span> <span class="n">reused</span> <span class="nf">0</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">)</span>
<span class="ln">8</span><span class="n">To</span> <span class="n">https</span><span class="o">:</span><span class="c1">//github.com/yourusername/githubtest.git
</span><span class="ln">9</span><span class="c1"></span> <span class="o">*</span> <span class="o">[</span><span class="k">new</span> <span class="n">branch</span><span class="o">]</span>      <span class="n">master</span> <span class="o">-&gt;</span> <span class="n">master</span>
</code></pre></div><h3 id="git-clone">git clone</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">git</span> <span class="n">clone</span> <span class="n">https</span><span class="o">:</span><span class="c1">//github.com/yourusername/githubtest.git
</span><span class="ln"> 2</span><span class="c1"></span><span class="n">Cloning</span> <span class="n">into</span> <span class="err">&#39;</span><span class="n">githubtest</span><span class="err">&#39;</span><span class="o">...</span>
<span class="ln"> 3</span><span class="nl">remote:</span> <span class="n">Enumerating</span> <span class="n">objects</span><span class="o">:</span> <span class="n">3</span><span class="o">,</span> <span class="n">done</span><span class="o">.</span>
<span class="ln"> 4</span><span class="nl">remote:</span> <span class="n">Counting</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">3</span><span class="o">/</span><span class="n">3</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln"> 5</span><span class="nl">remote:</span> <span class="n">Total</span> <span class="nf">3</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">),</span> <span class="n">reused</span> <span class="nf">3</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">),</span> <span class="n">pack</span><span class="o">-</span><span class="n">reused</span> <span class="n">0</span>
<span class="ln"> 6</span><span class="n">Unpacking</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">3</span><span class="o">/</span><span class="n">3</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln"> 7</span>  
<span class="ln"> 8</span><span class="n">yanqin</span><span class="nd">@35</span> <span class="n">github_clone</span> <span class="o">%</span> <span class="n">ls</span>  <span class="c1">// 1.clone完成后远程仓库文件已下载到本地仓库
</span><span class="ln"> 9</span><span class="c1"></span><span class="n">githubtest</span>
<span class="ln">10</span><span class="n">$</span> <span class="n">cd</span> <span class="n">githubtest</span>
<span class="ln">11</span><span class="n">$</span> <span class="n">ls</span>
<span class="ln">12</span><span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">13</span><span class="n">$</span> <span class="n">ls</span> <span class="o">-</span><span class="n">lA</span>
<span class="ln">14</span><span class="n">total</span> <span class="n">8</span>
<span class="ln">15</span><span class="n">drwxr</span><span class="o">-</span><span class="n">xr</span><span class="o">-</span><span class="n">x</span>  <span class="n">12</span> <span class="n">yanqin</span>  <span class="n">staff</span>  <span class="n">384</span> <span class="n">15</span> <span class="n">Nov</span> <span class="n">12</span><span class="o">:</span><span class="n">20</span> <span class="o">.</span><span class="na">git</span> <span class="c1">// 2.clone会自动初始化本地git仓库
</span><span class="ln">16</span><span class="c1"></span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span><span class="n">r</span><span class="o">--</span>   <span class="n">1</span> <span class="n">yanqin</span>  <span class="n">staff</span>   <span class="n">11</span> <span class="n">15</span> <span class="n">Nov</span> <span class="n">12</span><span class="o">:</span><span class="n">20</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">17</span><span class="n">$</span> <span class="n">git</span> <span class="n">remote</span> <span class="o">-</span><span class="n">v</span> <span class="c1">// 3.clone会自动帮本地仓库添加远程仓库
</span><span class="ln">18</span><span class="c1"></span><span class="n">origin</span>	<span class="n">https</span><span class="o">:</span><span class="c1">//github.com/yourusername/githubtest.git (fetch)
</span><span class="ln">19</span><span class="c1"></span><span class="n">origin</span>	<span class="n">https</span><span class="o">:</span><span class="c1">//github.com/yourusername/githubtest.git (push)
</span></code></pre></div><h3 id="git-fetch-拉取">git fetch 拉取</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">git</span> <span class="n">fetch</span> <span class="n">origin</span> <span class="n">master</span> <span class="c1">// 
</span><span class="ln"> 2</span><span class="c1"></span><span class="nl">remote:</span> <span class="n">Enumerating</span> <span class="n">objects</span><span class="o">:</span> <span class="n">5</span><span class="o">,</span> <span class="n">done</span><span class="o">.</span>
<span class="ln"> 3</span><span class="nl">remote:</span> <span class="n">Counting</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">5</span><span class="o">/</span><span class="n">5</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln"> 4</span><span class="nl">remote:</span> <span class="n">Total</span> <span class="nf">3</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">),</span> <span class="n">reused</span> <span class="nf">3</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">),</span> <span class="n">pack</span><span class="o">-</span><span class="n">reused</span> <span class="n">0</span>
<span class="ln"> 5</span><span class="n">Unpacking</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">3</span><span class="o">/</span><span class="n">3</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln"> 6</span><span class="n">From</span> <span class="n">https</span><span class="o">:</span><span class="c1">//github.com/yourusername/githubtest
</span><span class="ln"> 7</span><span class="c1"></span> <span class="o">*</span> <span class="n">branch</span>            <span class="n">master</span>     <span class="o">-&gt;</span> <span class="n">FETCH_HEAD</span>
<span class="ln"> 8</span>   <span class="n">fca7556</span><span class="o">..</span><span class="na">0495c81</span>  <span class="n">master</span>     <span class="o">-&gt;</span> <span class="n">origin</span><span class="o">/</span><span class="n">master</span>
<span class="ln"> 9</span>   
<span class="ln">10</span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// fetch后本地工作区文件并未改变
</span><span class="ln">11</span><span class="c1"></span><span class="n">test</span> <span class="n">1</span> <span class="n">3</span> <span class="n">3</span>
<span class="ln">12</span><span class="n">$</span> <span class="n">git</span> <span class="n">checkout</span> <span class="n">origin</span><span class="o">/</span><span class="n">master</span> <span class="c1">//查看本地git仓库
</span><span class="ln">13</span><span class="c1"></span><span class="nl">Note:</span> <span class="n">checking</span> <span class="n">out</span> <span class="err">&#39;</span><span class="n">origin</span><span class="o">/</span><span class="n">master</span><span class="err">&#39;</span><span class="o">.</span>
<span class="ln">14</span>
<span class="ln">15</span><span class="n">You</span> <span class="n">are</span> <span class="n">in</span> <span class="err">&#39;</span><span class="n">detached</span> <span class="n">HEAD</span><span class="err">&#39;</span> <span class="n">state</span><span class="o">.</span> <span class="n">You</span> <span class="n">can</span> <span class="n">look</span> <span class="n">around</span><span class="o">,</span> <span class="n">make</span> <span class="n">experimental</span>
<span class="ln">16</span><span class="n">changes</span> <span class="n">and</span> <span class="n">commit</span> <span class="n">them</span><span class="o">,</span> <span class="n">and</span> <span class="n">you</span> <span class="n">can</span> <span class="n">discard</span> <span class="n">any</span> <span class="n">commits</span> <span class="n">you</span> <span class="n">make</span> <span class="n">in</span> <span class="k">this</span>
<span class="ln">17</span><span class="n">state</span> <span class="n">without</span> <span class="n">impacting</span> <span class="n">any</span> <span class="n">branches</span> <span class="n">by</span> <span class="n">performing</span> <span class="n">another</span> <span class="n">checkout</span><span class="o">.</span>
<span class="ln">18</span>
<span class="ln">19</span><span class="n">If</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">create</span> <span class="n">a</span> <span class="k">new</span> <span class="n">branch</span> <span class="n">to</span> <span class="n">retain</span> <span class="n">commits</span> <span class="n">you</span> <span class="n">create</span><span class="o">,</span> <span class="n">you</span> <span class="n">may</span>
<span class="ln">20</span><span class="k">do</span> <span class="nf">so</span> <span class="o">(</span><span class="n">now</span> <span class="n">or</span> <span class="n">later</span><span class="o">)</span> <span class="n">by</span> <span class="n">using</span> <span class="o">-</span><span class="n">b</span> <span class="n">with</span> <span class="n">the</span> <span class="n">checkout</span> <span class="n">command</span> <span class="n">again</span><span class="o">.</span> <span class="n">Example</span><span class="o">:</span>
<span class="ln">21</span>
<span class="ln">22</span>  <span class="n">git</span> <span class="n">checkout</span> <span class="o">-</span><span class="n">b</span> <span class="o">&lt;</span><span class="k">new</span><span class="o">-</span><span class="n">branch</span><span class="o">-</span><span class="n">name</span><span class="o">&gt;</span>
<span class="ln">23</span>
<span class="ln">24</span><span class="n">HEAD</span> <span class="n">is</span> <span class="n">now</span> <span class="n">at</span> <span class="n">0495c81</span> <span class="n">clone</span> <span class="n">push</span> <span class="n">test</span>
<span class="ln">25</span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// fetch只是把远程仓库文件下载到了本地git仓库
</span><span class="ln">26</span><span class="c1"></span><span class="n">test</span> <span class="n">1</span> <span class="n">3</span> <span class="n">3</span>
<span class="ln">27</span><span class="n">github_clone</span> <span class="n">1</span> <span class="n">2</span> <span class="n">3</span>
</code></pre></div><h3 id="git-merge-合并">git merge 合并</h3>
<p>git merge vs git merge &ndash;no-ff 后者创建一个新的合并提交，让代码维护更加容易。</p>
<p><img src="https://i.stack.imgur.com/GGkZc.png" alt="git merge &ndash;no-ff 和 git merge 的区别"></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span> 
<span class="ln"> 2</span><span class="n">On</span> <span class="n">branch</span> <span class="n">master</span>
<span class="ln"> 3</span><span class="n">nothing</span> <span class="n">to</span> <span class="n">commit</span><span class="o">,</span> <span class="n">working</span> <span class="n">tree</span> <span class="n">clean</span>
<span class="ln"> 4</span><span class="n">$</span> <span class="n">git</span> <span class="n">merge</span> <span class="n">origin</span><span class="o">/</span><span class="n">master</span> <span class="c1">// 
</span><span class="ln"> 5</span><span class="c1"></span><span class="n">Updating</span> <span class="n">fca7556</span><span class="o">..</span><span class="na">0495c81</span>
<span class="ln"> 6</span><span class="n">Fast</span><span class="o">-</span><span class="n">forward</span>
<span class="ln"> 7</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="o">|</span> <span class="n">1</span> <span class="o">+</span>
<span class="ln"> 8</span> <span class="n">1</span> <span class="n">file</span> <span class="n">changed</span><span class="o">,</span> <span class="n">1</span> <span class="nf">insertion</span><span class="o">(+)</span>
<span class="ln"> 9</span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// merge完成后，工作区test文件已修改同步完成
</span><span class="ln">10</span><span class="c1"></span><span class="n">test</span> <span class="n">1</span> <span class="n">3</span> <span class="n">3</span>
<span class="ln">11</span><span class="n">github_clone</span> <span class="n">1</span> <span class="n">2</span> <span class="n">3</span>
</code></pre></div><h3 id="git-pull--fetch--merge">git pull = fetch + merge</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 2</span><span class="n">test</span> <span class="n">1</span> <span class="n">3</span> <span class="n">3</span>
<span class="ln"> 3</span><span class="n">github_clone</span> <span class="n">1</span> <span class="n">2</span> <span class="n">3</span>
<span class="ln"> 4</span>  
<span class="ln"> 5</span><span class="n">$</span> <span class="n">git</span> <span class="n">pull</span> <span class="n">origin</span> <span class="n">master</span> <span class="c1">//
</span><span class="ln"> 6</span><span class="c1"></span><span class="nl">remote:</span> <span class="n">Enumerating</span> <span class="n">objects</span><span class="o">:</span> <span class="n">5</span><span class="o">,</span> <span class="n">done</span><span class="o">.</span>
<span class="ln"> 7</span><span class="nl">remote:</span> <span class="n">Counting</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">5</span><span class="o">/</span><span class="n">5</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln"> 8</span><span class="nl">remote:</span> <span class="n">Total</span> <span class="nf">3</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">),</span> <span class="n">reused</span> <span class="nf">3</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">),</span> <span class="n">pack</span><span class="o">-</span><span class="n">reused</span> <span class="n">0</span>
<span class="ln"> 9</span><span class="n">Unpacking</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">3</span><span class="o">/</span><span class="n">3</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">10</span><span class="n">From</span> <span class="n">https</span><span class="o">:</span><span class="c1">//github.com/daiweinus/githubtest
</span><span class="ln">11</span><span class="c1"></span> <span class="o">*</span> <span class="n">branch</span>            <span class="n">master</span>     <span class="o">-&gt;</span> <span class="n">FETCH_HEAD</span>
<span class="ln">12</span>   <span class="n">0495c81</span><span class="o">..</span><span class="na">ad5056c</span>  <span class="n">master</span>     <span class="o">-&gt;</span> <span class="n">origin</span><span class="o">/</span><span class="n">master</span>
<span class="ln">13</span><span class="n">Updating</span> <span class="n">0495c81</span><span class="o">..</span><span class="na">ad5056c</span>
<span class="ln">14</span><span class="n">Fast</span><span class="o">-</span><span class="n">forward</span>
<span class="ln">15</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="o">|</span> <span class="n">1</span> <span class="o">+</span>
<span class="ln">16</span> <span class="n">1</span> <span class="n">file</span> <span class="n">changed</span><span class="o">,</span> <span class="n">1</span> <span class="nf">insertion</span><span class="o">(+)</span>
<span class="ln">17</span>   
<span class="ln">18</span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// pull = fetch + merge
</span><span class="ln">19</span><span class="c1"></span><span class="n">test</span> <span class="n">1</span> <span class="n">3</span> <span class="n">3</span>
<span class="ln">20</span><span class="n">github_clone</span> <span class="n">1</span> <span class="n">2</span> <span class="n">3</span>
<span class="ln">21</span><span class="n">github_clone</span> <span class="n">4</span> <span class="n">5</span> <span class="n">6</span>
</code></pre></div><h3 id="conflict">conflict</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// 原文件
</span><span class="ln"> 2</span><span class="c1"></span><span class="n">test</span> <span class="n">1</span> <span class="n">3</span> <span class="n">3</span>
<span class="ln"> 3</span><span class="n">github_clone</span> <span class="n">1</span> <span class="n">2</span> <span class="n">3</span>
<span class="ln"> 4</span><span class="n">github_clone</span> <span class="n">4</span> <span class="n">5</span> <span class="n">6</span>
<span class="ln"> 5</span><span class="n">$</span> <span class="n">nano</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// 在 master 仓库修改原文件
</span><span class="ln"> 6</span><span class="c1"></span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 7</span><span class="n">test</span> <span class="n">1</span> <span class="n">3</span> <span class="n">3</span> <span class="n">by</span> <span class="n">gihub_master</span> <span class="c1">//
</span><span class="ln"> 8</span><span class="c1"></span><span class="n">github_clone</span> <span class="n">1</span> <span class="n">2</span> <span class="n">3</span>
<span class="ln"> 9</span><span class="n">github_clone</span> <span class="n">4</span> <span class="n">5</span> <span class="n">6</span>
<span class="ln">10</span><span class="n">$</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">edit</span> <span class="n">by</span> <span class="n">github_master</span><span class="err">&#39;</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//提交到本地仓库
</span><span class="ln">11</span><span class="c1"></span><span class="o">[</span><span class="n">master</span> <span class="n">8d3e36c</span><span class="o">]</span> <span class="n">edit</span> <span class="n">by</span> <span class="n">github_master</span>
<span class="ln">12</span> <span class="n">1</span> <span class="n">file</span> <span class="n">changed</span><span class="o">,</span> <span class="n">1</span> <span class="nf">insertion</span><span class="o">(+),</span> <span class="n">1</span> <span class="nf">deletion</span><span class="o">(-)</span>
<span class="ln">13</span><span class="n">$</span> <span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="n">master</span> <span class="c1">//push到远程仓库
</span><span class="ln">14</span><span class="c1"></span><span class="n">Enumerating</span> <span class="n">objects</span><span class="o">:</span> <span class="n">5</span><span class="o">,</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">15</span><span class="n">Counting</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">5</span><span class="o">/</span><span class="n">5</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">16</span><span class="n">Delta</span> <span class="n">compression</span> <span class="n">using</span> <span class="n">up</span> <span class="n">to</span> <span class="n">8</span> <span class="n">threads</span>
<span class="ln">17</span><span class="n">Compressing</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">2</span><span class="o">/</span><span class="n">2</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">18</span><span class="n">Writing</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">3</span><span class="o">/</span><span class="n">3</span><span class="o">),</span> <span class="n">293</span> <span class="n">bytes</span> <span class="o">|</span> <span class="n">293</span><span class="o">.</span><span class="na">00</span> <span class="n">KiB</span><span class="o">/</span><span class="n">s</span><span class="o">,</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">19</span><span class="n">Total</span> <span class="nf">3</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">),</span> <span class="n">reused</span> <span class="nf">0</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">)</span>
<span class="ln">20</span><span class="n">To</span> <span class="n">https</span><span class="o">:</span><span class="c1">//github.com/daiweinus/githubtest.git
</span><span class="ln">21</span><span class="c1"></span>   <span class="n">ad5056c</span><span class="o">..</span><span class="na">8d3e36c</span>  <span class="n">master</span> <span class="o">-&gt;</span> <span class="n">master</span>
<span class="ln">22</span>     
<span class="ln">23</span><span class="n">$</span> <span class="n">githubtest</span> <span class="o">%</span> <span class="n">cd</span> <span class="o">..</span> 
<span class="ln">24</span><span class="n">$</span> <span class="n">Desktop</span> <span class="o">%</span> <span class="n">cd</span> <span class="n">github_clone</span>
<span class="ln">25</span><span class="n">$</span> <span class="n">github_clone</span> <span class="o">%</span> <span class="n">cd</span> <span class="n">githubtest</span>
<span class="ln">26</span><span class="n">$</span> <span class="n">githubtest</span> <span class="o">%</span> <span class="n">ls</span> <span class="c1">// 切换到clone 仓库， 
</span><span class="ln">27</span><span class="c1"></span><span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">28</span><span class="n">$</span> <span class="n">nano</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">29</span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// 修改clone 仓库工作区文件
</span><span class="ln">30</span><span class="c1"></span><span class="n">test</span> <span class="n">1</span> <span class="n">3</span> <span class="n">3</span> <span class="n">by</span> <span class="n">github_clone</span>
<span class="ln">31</span><span class="n">github_clone</span> <span class="n">1</span> <span class="n">2</span> <span class="n">3</span>
<span class="ln">32</span><span class="n">github_clone</span> <span class="n">4</span> <span class="n">5</span> <span class="n">6</span>
<span class="ln">33</span><span class="n">$</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">test</span> <span class="n">conflict</span><span class="err">&#39;</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//提交到本地仓库
</span><span class="ln">34</span><span class="c1"></span><span class="o">[</span><span class="n">master</span> <span class="n">f8c19a2</span><span class="o">]</span> <span class="n">test</span> <span class="n">conflict</span>
<span class="ln">35</span> <span class="n">1</span> <span class="n">file</span> <span class="n">changed</span><span class="o">,</span> <span class="n">1</span> <span class="nf">insertion</span><span class="o">(+),</span> <span class="n">1</span> <span class="nf">deletion</span><span class="o">(-)</span>
<span class="ln">36</span><span class="n">$</span> <span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="n">master</span>  <span class="c1">// 也push到远程仓库
</span><span class="ln">37</span><span class="c1"></span><span class="n">To</span> <span class="n">https</span><span class="o">:</span><span class="c1">//github.com/daiweinus/githubtest.git 
</span><span class="ln">38</span><span class="c1"></span> <span class="o">!</span> <span class="o">[</span><span class="n">rejected</span><span class="o">]</span>        <span class="n">master</span> <span class="o">-&gt;</span> <span class="n">master</span> <span class="o">(</span><span class="n">fetch</span> <span class="n">first</span><span class="o">)</span> <span class="c1">//push悲剧
</span><span class="ln">39</span><span class="c1"></span><span class="nl">error:</span> <span class="n">failed</span> <span class="n">to</span> <span class="n">push</span> <span class="n">some</span> <span class="n">refs</span> <span class="n">to</span> <span class="err">&#39;</span><span class="n">https</span><span class="o">:</span><span class="c1">//github.com/daiweinus/githubtest.git&#39;
</span><span class="ln">40</span><span class="c1"></span><span class="nl">hint:</span> <span class="n">Updates</span> <span class="n">were</span> <span class="n">rejected</span> <span class="n">because</span> <span class="n">the</span> <span class="n">remote</span> <span class="n">contains</span> <span class="n">work</span> <span class="n">that</span> <span class="n">you</span> <span class="k">do</span>
<span class="ln">41</span><span class="nl">hint:</span> <span class="n">not</span> <span class="n">have</span> <span class="n">locally</span><span class="o">.</span> <span class="n">This</span> <span class="n">is</span> <span class="n">usually</span> <span class="n">caused</span> <span class="n">by</span> <span class="n">another</span> <span class="n">repository</span> <span class="n">pushing</span>
<span class="ln">42</span><span class="nl">hint:</span> <span class="n">to</span> <span class="n">the</span> <span class="n">same</span> <span class="n">ref</span><span class="o">.</span> <span class="n">You</span> <span class="n">may</span> <span class="n">want</span> <span class="n">to</span> <span class="n">first</span> <span class="n">integrate</span> <span class="n">the</span> <span class="n">remote</span> <span class="n">changes</span>
<span class="ln">43</span><span class="nl">hint:</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">g</span><span class="o">.,</span> <span class="err">&#39;</span><span class="n">git</span> <span class="n">pull</span> <span class="o">...</span><span class="err">&#39;</span><span class="o">)</span> <span class="n">before</span> <span class="n">pushing</span> <span class="n">again</span><span class="o">.</span> <span class="c1">//提示先pull before push
</span><span class="ln">44</span><span class="c1"></span><span class="nl">hint:</span> <span class="n">See</span> <span class="n">the</span> <span class="err">&#39;</span><span class="n">Note</span> <span class="n">about</span> <span class="n">fast</span><span class="o">-</span><span class="n">forwards</span><span class="err">&#39;</span> <span class="n">in</span> <span class="err">&#39;</span><span class="n">git</span> <span class="n">push</span> <span class="o">--</span><span class="n">help</span><span class="err">&#39;</span> <span class="k">for</span> <span class="n">details</span><span class="o">.</span>
<span class="ln">45</span>  
<span class="ln">46</span><span class="n">$</span> <span class="n">git</span> <span class="n">pull</span> <span class="n">origin</span> <span class="n">master</span> <span class="c1">// pull远处仓库
</span><span class="ln">47</span><span class="c1"></span><span class="nl">remote:</span> <span class="n">Enumerating</span> <span class="n">objects</span><span class="o">:</span> <span class="n">5</span><span class="o">,</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">48</span><span class="nl">remote:</span> <span class="n">Counting</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">5</span><span class="o">/</span><span class="n">5</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">49</span><span class="nl">remote:</span> <span class="n">Compressing</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">2</span><span class="o">/</span><span class="n">2</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">50</span><span class="nl">remote:</span> <span class="n">Total</span> <span class="nf">3</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">),</span> <span class="n">reused</span> <span class="nf">3</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">),</span> <span class="n">pack</span><span class="o">-</span><span class="n">reused</span> <span class="n">0</span>
<span class="ln">51</span><span class="n">Unpacking</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">3</span><span class="o">/</span><span class="n">3</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">52</span><span class="n">From</span> <span class="n">https</span><span class="o">:</span><span class="c1">//github.com/daiweinus/githubtest
</span><span class="ln">53</span><span class="c1"></span> <span class="o">*</span> <span class="n">branch</span>            <span class="n">master</span>     <span class="o">-&gt;</span> <span class="n">FETCH_HEAD</span>
<span class="ln">54</span>   <span class="n">ad5056c</span><span class="o">..</span><span class="na">8d3e36c</span>  <span class="n">master</span>     <span class="o">-&gt;</span> <span class="n">origin</span><span class="o">/</span><span class="n">master</span>
<span class="ln">55</span><span class="n">Auto</span><span class="o">-</span><span class="n">merging</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">56</span><span class="nf">CONFLICT</span> <span class="o">(</span><span class="n">content</span><span class="o">):</span> <span class="n">Merge</span> <span class="n">conflict</span> <span class="n">in</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// 提示有conflict 
</span><span class="ln">57</span><span class="c1"></span><span class="n">Automatic</span> <span class="n">merge</span> <span class="n">failed</span><span class="o">;</span> <span class="n">fix</span> <span class="n">conflicts</span> <span class="n">and</span> <span class="n">then</span> <span class="n">commit</span> <span class="n">the</span> <span class="n">result</span><span class="o">.</span>
<span class="ln">58</span><span class="n">$</span> <span class="n">nano</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//修改本地仓库冲突文件，去掉特殊符号，保留想要修改的内容
</span><span class="ln">59</span><span class="c1"></span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> 
<span class="ln">60</span><span class="n">test</span> <span class="n">1</span> <span class="n">3</span> <span class="n">3</span> <span class="n">by</span> <span class="n">github_clone</span>
<span class="ln">61</span><span class="n">test</span> <span class="n">1</span> <span class="n">3</span> <span class="n">3</span> <span class="n">by</span> <span class="n">gihub_master</span>
<span class="ln">62</span><span class="n">github_clone</span> <span class="n">1</span> <span class="n">2</span> <span class="n">3</span>
<span class="ln">63</span><span class="n">github_clone</span> <span class="n">4</span> <span class="n">5</span> <span class="n">6</span>
<span class="ln">64</span><span class="n">$</span> <span class="n">git</span> <span class="n">add</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//从新提交修改后的文件到本地仓库
</span><span class="ln">65</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">resolve</span> <span class="n">conflict</span><span class="err">&#39;</span>
<span class="ln">66</span><span class="o">[</span><span class="n">master</span> <span class="n">9209bdb</span><span class="o">]</span> <span class="n">resolve</span> <span class="n">conflict</span>
<span class="ln">67</span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span> 
<span class="ln">68</span><span class="n">On</span> <span class="n">branch</span> <span class="n">master</span>
<span class="ln">69</span><span class="n">Your</span> <span class="n">branch</span> <span class="n">is</span> <span class="n">ahead</span> <span class="n">of</span> <span class="err">&#39;</span><span class="n">origin</span><span class="o">/</span><span class="n">master</span><span class="err">&#39;</span> <span class="n">by</span> <span class="n">2</span> <span class="n">commits</span><span class="o">.</span>
<span class="ln">70</span>  <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git push&#34;</span> <span class="n">to</span> <span class="n">publish</span> <span class="n">your</span> <span class="n">local</span> <span class="n">commits</span><span class="o">)</span>
<span class="ln">71</span>
<span class="ln">72</span><span class="n">nothing</span> <span class="n">to</span> <span class="n">commit</span><span class="o">,</span> <span class="n">working</span> <span class="n">tree</span> <span class="n">clean</span>
<span class="ln">73</span><span class="n">$</span> <span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="n">master</span> <span class="c1">// 再次从本地仓库push到远程仓库，无冲突
</span><span class="ln">74</span><span class="c1"></span><span class="n">Enumerating</span> <span class="n">objects</span><span class="o">:</span> <span class="n">10</span><span class="o">,</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">75</span><span class="n">Counting</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">10</span><span class="o">/</span><span class="n">10</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">76</span><span class="n">Delta</span> <span class="n">compression</span> <span class="n">using</span> <span class="n">up</span> <span class="n">to</span> <span class="n">8</span> <span class="n">threads</span>
<span class="ln">77</span><span class="n">Compressing</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">4</span><span class="o">/</span><span class="n">4</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">78</span><span class="n">Writing</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">6</span><span class="o">/</span><span class="n">6</span><span class="o">),</span> <span class="n">561</span> <span class="n">bytes</span> <span class="o">|</span> <span class="n">561</span><span class="o">.</span><span class="na">00</span> <span class="n">KiB</span><span class="o">/</span><span class="n">s</span><span class="o">,</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">79</span><span class="n">Total</span> <span class="nf">6</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">),</span> <span class="n">reused</span> <span class="nf">0</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">)</span>
<span class="ln">80</span><span class="n">To</span> <span class="n">https</span><span class="o">:</span><span class="c1">//github.com/daiweinus/githubtest.git
</span><span class="ln">81</span><span class="c1"></span>   <span class="n">8d3e36c</span><span class="o">..</span><span class="na">9209bdb</span>  <span class="n">master</span> <span class="o">-&gt;</span> <span class="n">master</span>
</code></pre></div><h3 id="ssh-免密码登陆设置httpsdocsgithubcomenauthenticationconnecting-to-github-with-sshgenerating-a-new-ssh-key-and-adding-it-to-the-ssh-agent"><a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">SSH 免密码登陆设置</a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">$</span> <span class="n">ssh</span><span class="o">-</span><span class="n">keygen</span> <span class="o">-</span><span class="n">t</span> <span class="n">ed25519</span> <span class="o">-</span><span class="n">C</span> <span class="s">&#34;your_email@example.com&#34;</span>
<span class="ln">2</span>  
<span class="ln">3</span><span class="c1">//Note: If you are using a legacy system that doesnt support the Ed25519 algorithm, use:
</span><span class="ln">4</span><span class="c1"></span><span class="n">$</span> <span class="n">ssh</span><span class="o">-</span><span class="n">keygen</span> <span class="o">-</span><span class="n">t</span> <span class="n">rsa</span> <span class="o">-</span><span class="n">b</span> <span class="n">4096</span> <span class="o">-</span><span class="n">C</span> <span class="s">&#34;your_email@example.com&#34;</span>
</code></pre></div><h5 id="ssh-keygen--secure-shell---key-generate">ssh-keygen : Secure Shell - key generate</h5>
<h5 id="-t-rsa---type-rsa">-t rsa : -type rsa</h5>
<p>rsa (<strong>Rivest–Shamir–Adleman</strong>) 最古老的非对称加密算法之一;  ed25519 <strong>爱德华兹曲线数字签名算法</strong>( <strong>EdDSA</strong> ) 是一种使用基于扭曲爱德华兹曲线的Schnorr 签名变体的数字签名方案，它旨在在不牺牲安全性的情况下比现有的数字签名方案更快。</p>
<p>ed25519加密解密很快,生成时间短而且安全性更高,rsa则加密解密稍慢,生成时间长,安全性没有ed25519高,只是rsa基本都是默认,所以用的人更多。</p>
<h5 id="-b-4096">-b 4096</h5>
<p>b 指定密钥长度。对于RSA密钥，最小要求768位，默认是2048位。命令中的4096指的是RSA密钥长度为4096位。</p>
<h5 id="-c--comment-添加注释">-C : comment 添加注释</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">githubtest</span> <span class="n">$</span> <span class="n">cd</span> <span class="o">~</span> <span class="c1">//返回更根目录
</span><span class="ln"> 2</span><span class="c1"></span><span class="n">$</span> <span class="n">rm</span> <span class="o">-</span><span class="n">r</span> <span class="o">.</span><span class="na">ssh</span><span class="o">/</span>  <span class="c1">//删除旧的ssh加密文件
</span><span class="ln"> 3</span><span class="c1"></span><span class="n">$</span> <span class="n">ssh</span><span class="o">-</span><span class="n">keygen</span> <span class="o">-</span><span class="n">t</span> <span class="n">ed25519</span> <span class="o">-</span><span class="n">C</span> <span class="n">6608118</span><span class="nd">@gmail.com</span>  <span class="c1">// 生成新ssh加密文件        
</span><span class="ln"> 4</span><span class="c1"></span><span class="n">Generating</span> <span class="kd">public</span><span class="o">/</span><span class="kd">private</span> <span class="n">ed25519</span> <span class="n">key</span> <span class="n">pair</span><span class="o">.</span>
<span class="ln"> 5</span><span class="n">Enter</span> <span class="n">file</span> <span class="n">in</span> <span class="n">which</span> <span class="n">to</span> <span class="n">save</span> <span class="n">the</span> <span class="nf">key</span> <span class="o">(/</span><span class="n">Users</span><span class="o">/</span><span class="n">username</span><span class="o">/.</span><span class="na">ssh</span><span class="o">/</span><span class="n">id_ed25519</span><span class="o">):</span> <span class="c1">//回车键，使用默认值
</span><span class="ln"> 6</span><span class="c1"></span><span class="n">Created</span> <span class="n">directory</span> <span class="err">&#39;</span><span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">daiwei</span><span class="o">/.</span><span class="na">ssh</span><span class="err">&#39;</span><span class="o">.</span>
<span class="ln"> 7</span><span class="n">Enter</span> <span class="nf">passphrase</span> <span class="o">(</span><span class="n">empty</span> <span class="k">for</span> <span class="n">no</span> <span class="n">passphrase</span><span class="o">):</span> <span class="c1">//回车键，使用默认值
</span><span class="ln"> 8</span><span class="c1"></span><span class="n">Enter</span> <span class="n">same</span> <span class="n">passphrase</span> <span class="n">again</span><span class="o">:</span> <span class="c1">//回车键，使用默认值
</span><span class="ln"> 9</span><span class="c1"></span><span class="n">Your</span> <span class="n">identification</span> <span class="n">has</span> <span class="n">been</span> <span class="n">saved</span> <span class="n">in</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">username</span><span class="o">/.</span><span class="na">ssh</span><span class="o">/</span><span class="n">id_ed25519</span><span class="o">.</span>
<span class="ln">10</span><span class="n">Your</span> <span class="kd">public</span> <span class="n">key</span> <span class="n">has</span> <span class="n">been</span> <span class="n">saved</span> <span class="n">in</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">username</span><span class="o">/.</span><span class="na">ssh</span><span class="o">/</span><span class="n">id_ed25519</span><span class="o">.</span><span class="na">pub</span><span class="o">.</span>
<span class="ln">11</span><span class="n">The</span> <span class="n">key</span> <span class="n">fingerprint</span> <span class="n">is</span><span class="o">:</span>
<span class="ln">12</span><span class="nl">SHA256:</span><span class="n">ktMDqgSKDbWqUAdUd61n63</span><span class="o">+</span><span class="n">DZAgaoUEjtSLvg1e3FpU</span> <span class="n">username</span><span class="nd">@gmail.com</span>
<span class="ln">13</span><span class="n">The</span> <span class="n">key</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">randomart</span> <span class="n">image</span> <span class="n">is</span><span class="o">:</span>
<span class="ln">14</span><span class="o">+--[</span><span class="n">ED25519</span> <span class="n">256</span><span class="o">]--+</span>
<span class="ln">15</span><span class="o">|</span> <span class="o">.=+=</span> <span class="o">.</span> <span class="o">..</span>       <span class="o">|</span>
<span class="ln">16</span><span class="o">|</span> <span class="o">.</span> <span class="o">+.+..</span> <span class="o">..</span>      <span class="o">|</span>
<span class="ln">17</span><span class="o">|+</span> <span class="o">+</span> <span class="n">oo</span><span class="o">..</span><span class="na">E</span><span class="o">.</span>       <span class="o">|</span>
<span class="ln">18</span><span class="o">|</span><span class="n">oO</span> <span class="n">o</span><span class="o">...=</span><span class="n">o</span> <span class="n">o</span>      <span class="o">|</span>
<span class="ln">19</span><span class="o">|=</span> <span class="o">+</span> <span class="n">o</span> <span class="o">*</span><span class="n">oS</span><span class="o">+</span> <span class="n">o</span>     <span class="o">|</span>
<span class="ln">20</span><span class="o">|</span><span class="n">o</span><span class="o">+</span> <span class="n">o</span> <span class="o">..=</span> <span class="o">.</span><span class="na">o</span> <span class="n">o</span>    <span class="o">|</span>
<span class="ln">21</span><span class="o">|</span><span class="n">o</span> <span class="o">=</span>   <span class="n">o</span>  <span class="o">.</span> <span class="n">o</span> <span class="o">.</span>   <span class="o">|</span>
<span class="ln">22</span><span class="o">|</span> <span class="o">.</span> <span class="o">.</span> <span class="o">.</span>    <span class="o">.</span> <span class="o">.</span> <span class="n">o</span>  <span class="o">|</span>
<span class="ln">23</span><span class="o">|</span>           <span class="o">...</span> <span class="o">.</span> <span class="o">|</span>
<span class="ln">24</span><span class="o">+----[</span><span class="n">SHA256</span><span class="o">]-----+</span>
<span class="ln">25</span><span class="n">$</span> <span class="n">cd</span> <span class="o">.</span><span class="na">ssh</span>
<span class="ln">26</span><span class="o">.</span><span class="na">ssh</span> <span class="n">$</span> <span class="n">ls</span> <span class="o">-</span><span class="n">lA</span>
<span class="ln">27</span><span class="n">total</span> <span class="n">16</span>
<span class="ln">28</span><span class="o">-</span><span class="n">rw</span><span class="o">-------</span>  <span class="n">1</span> <span class="n">yanqin</span>  <span class="n">staff</span>  <span class="n">411</span> <span class="n">16</span> <span class="n">Nov</span> <span class="n">11</span><span class="o">:</span><span class="n">33</span> <span class="n">id_ed25519</span>
<span class="ln">29</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span><span class="n">r</span><span class="o">--</span>  <span class="n">1</span> <span class="n">yanqin</span>  <span class="n">staff</span>   <span class="n">99</span> <span class="n">16</span> <span class="n">Nov</span> <span class="n">11</span><span class="o">:</span><span class="n">33</span> <span class="n">id_ed25519</span><span class="o">.</span><span class="na">pub</span>
<span class="ln">30</span><span class="o">.</span><span class="na">ssh</span> <span class="n">$</span> <span class="n">cat</span> <span class="n">id_ed25519</span><span class="o">.</span><span class="na">pub</span> <span class="c1">//copy .pub 加密文件
</span><span class="ln">31</span><span class="c1"></span><span class="n">ssh</span><span class="o">-</span><span class="n">ed25519</span> <span class="n">AAAAC3NzaC1lZDI1NTE5AAAAIPyWgD16fGjNd</span><span class="o">/</span><span class="n">lPUwQ5AFTBNZ0SjKVi9hBw92YWemNi</span> <span class="n">username</span><span class="nd">@gmail.com</span>
</code></pre></div><p>登陆github -&gt;setting -&gt; SSH and GPS keys -&gt; New SSH key -&gt; 将复制的.pub 文件粘贴保存。</p>
<p><img src="https://docs.github.com/assets/images/help/settings/ssh-key-paste.png" alt="The key field"></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">ssh</span> <span class="o">-</span><span class="n">T</span> <span class="n">git</span><span class="nd">@github.com</span> <span class="c1">//测试 ssh 是否设置成功
</span><span class="ln"> 2</span><span class="c1"></span><span class="n">The</span> <span class="n">authenticity</span> <span class="n">of</span> <span class="n">host</span> <span class="err">&#39;</span><span class="n">github</span><span class="o">.</span><span class="na">com</span> <span class="o">(</span><span class="n">20</span><span class="o">.</span><span class="na">205</span><span class="o">.</span><span class="na">243</span><span class="o">.</span><span class="na">166</span><span class="o">)</span><span class="err">&#39;</span> <span class="n">cant</span> <span class="n">be</span> <span class="n">established</span><span class="o">.</span>
<span class="ln"> 3</span><span class="n">RSA</span> <span class="n">key</span> <span class="n">fingerprint</span> <span class="n">is</span> <span class="n">SHA256</span><span class="o">:</span><span class="n">nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8</span><span class="o">.</span>
<span class="ln"> 4</span><span class="n">Are</span> <span class="n">you</span> <span class="n">sure</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="k">continue</span> <span class="nf">connecting</span> <span class="o">(</span><span class="n">yes</span><span class="o">/</span><span class="n">no</span><span class="o">/[</span><span class="n">fingerprint</span><span class="o">])?</span> <span class="n">yes</span>  
<span class="ln"> 5</span><span class="nl">Warning:</span> <span class="n">Permanently</span> <span class="n">added</span> <span class="err">&#39;</span><span class="n">github</span><span class="o">.</span><span class="na">com</span><span class="o">,</span><span class="n">20</span><span class="o">.</span><span class="na">205</span><span class="o">.</span><span class="na">243</span><span class="o">.</span><span class="na">166</span><span class="err">&#39;</span> <span class="o">(</span><span class="n">RSA</span><span class="o">)</span> <span class="n">to</span> <span class="n">the</span> <span class="n">list</span> <span class="n">of</span> <span class="n">known</span> <span class="n">hosts</span><span class="o">.</span>
<span class="ln"> 6</span><span class="n">Hi</span> <span class="n">username</span><span class="o">!</span> <span class="n">Youve</span> <span class="err">&#39;</span><span class="n">successfully</span><span class="err">&#39;</span> <span class="n">authenticated</span><span class="o">,</span> <span class="n">but</span> <span class="n">GitHub</span> <span class="n">does</span> <span class="n">not</span> <span class="n">provide</span> <span class="n">shell</span> <span class="n">access</span><span class="o">.</span>
<span class="ln"> 7</span>  
<span class="ln"> 8</span><span class="n">githubtest</span> <span class="n">$</span> <span class="n">git</span> <span class="n">remote</span> <span class="o">-</span><span class="n">v</span> <span class="c1">// 此时只有两个 https 远程仓库地址
</span><span class="ln"> 9</span><span class="c1"></span><span class="n">origin</span>	<span class="n">https</span><span class="o">:</span><span class="c1">//github.com/usernamegithubtest.git (fetch)
</span><span class="ln">10</span><span class="c1"></span><span class="n">origin</span>	<span class="n">https</span><span class="o">:</span><span class="c1">//github.com/username/githubtest.git (push)
</span><span class="ln">11</span><span class="c1"></span><span class="n">githubtest</span> <span class="n">$</span> <span class="n">git</span> <span class="n">remote</span> <span class="n">add</span> <span class="n">origin_ssh</span> <span class="n">git</span><span class="nd">@github.com</span><span class="o">:</span><span class="n">daiweinus</span><span class="o">/</span><span class="n">githubtest</span><span class="o">.</span><span class="na">git</span>
<span class="ln">12</span><span class="n">githubtest</span> <span class="n">$</span> <span class="n">git</span> <span class="n">remote</span> <span class="o">-</span><span class="n">v</span> <span class="c1">// 复制添加ssh 远程仓库地址
</span><span class="ln">13</span><span class="c1"></span><span class="n">origin</span>	<span class="n">https</span><span class="o">:</span><span class="c1">//github.com/username/githubtest.git (fetch)
</span><span class="ln">14</span><span class="c1"></span><span class="n">origin</span>	<span class="n">https</span><span class="o">:</span><span class="c1">//github.com/username/githubtest.git (push)
</span><span class="ln">15</span><span class="c1"></span><span class="n">origin_ssh</span>	<span class="n">git</span><span class="nd">@github.com</span><span class="o">:</span><span class="n">username</span><span class="o">/</span><span class="n">githubtest</span><span class="o">.</span><span class="na">git</span> <span class="o">(</span><span class="n">fetch</span><span class="o">)</span>
<span class="ln">16</span><span class="n">origin_ssh</span>	<span class="n">git</span><span class="nd">@github.com</span><span class="o">:</span><span class="n">username</span><span class="o">/</span><span class="n">githubtest</span><span class="o">.</span><span class="na">git</span> <span class="o">(</span><span class="n">push</span><span class="o">)</span>
<span class="ln">17</span>  
<span class="ln">18</span><span class="n">githubtest</span> <span class="n">$</span> <span class="n">git</span> <span class="n">push</span> <span class="n">origin_ssh</span> <span class="n">master</span> <span class="c1">//使用ssh提交到远程仓库
</span><span class="ln">19</span><span class="c1"></span><span class="n">Enumerating</span> <span class="n">objects</span><span class="o">:</span> <span class="n">10</span><span class="o">,</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">20</span><span class="n">Counting</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">10</span><span class="o">/</span><span class="n">10</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">21</span><span class="n">Delta</span> <span class="n">compression</span> <span class="n">using</span> <span class="n">up</span> <span class="n">to</span> <span class="n">8</span> <span class="n">threads</span>
<span class="ln">22</span><span class="n">Compressing</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">4</span><span class="o">/</span><span class="n">4</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">23</span><span class="n">Writing</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">6</span><span class="o">/</span><span class="n">6</span><span class="o">),</span> <span class="n">619</span> <span class="n">bytes</span> <span class="o">|</span> <span class="n">619</span><span class="o">.</span><span class="na">00</span> <span class="n">KiB</span><span class="o">/</span><span class="n">s</span><span class="o">,</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">24</span><span class="n">Total</span> <span class="nf">6</span> <span class="o">(</span><span class="n">delta</span> <span class="n">1</span><span class="o">),</span> <span class="n">reused</span> <span class="nf">0</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">)</span>
<span class="ln">25</span><span class="nl">remote:</span> <span class="n">Resolving</span> <span class="n">deltas</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">1</span><span class="o">/</span><span class="n">1</span><span class="o">),</span> <span class="n">completed</span> <span class="n">with</span> <span class="n">1</span> <span class="n">local</span> <span class="n">object</span><span class="o">.</span>
<span class="ln">26</span><span class="n">To</span> <span class="n">github</span><span class="o">.</span><span class="na">com</span><span class="o">:</span><span class="n">daiweinus</span><span class="o">/</span><span class="n">githubtest</span><span class="o">.</span><span class="na">git</span>
<span class="ln">27</span>   <span class="n">9209bdb</span><span class="o">..</span><span class="na">9878883</span>  <span class="n">master</span> <span class="o">-&gt;</span> <span class="n">master</span>
</code></pre></div><p>Ref: <a href="https://blog.csdn.net/qq_42255991/article/details/102783991">https://blog.csdn.net/qq_42255991/article/details/102783991</a></p>
]]></content>
		</item>
		
		<item>
			<title>Java_design</title>
			<link>https://daiwei.dev/posts/java_design/</link>
			<pubDate>Tue, 09 Nov 2021 12:11:11 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/java_design/</guid>
			<description>Design Principles   SOILD
  Single Responsibility Principle (SRP) 单一职责原则
Each class should have a single purpose.
  Open/Closed Principle (OCP) 开闭原则
software entities (classes, modules, functions, etc.) should be open for extension but closed for modification.
  Liscov Substitution Principle (LSP) 替换原则
functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.
  Interface Segregation Principle (ISP) 接口隔离原则</description>
			<content type="html"><![CDATA[<h3 id="design-principles">Design Principles</h3>
<ol>
<li>
<p><strong>SOILD</strong></p>
<ol>
<li>
<p>Single Responsibility Principle (SRP) 单一职责原则</p>
<p>Each class should have a single purpose.</p>
</li>
<li>
<p>Open/Closed Principle (OCP) 开闭原则</p>
<p>software entities (classes, modules, functions, etc.) should be open for extension but closed for modification.</p>
</li>
<li>
<p>Liscov Substitution Principle (LSP) 替换原则</p>
<p>functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.</p>
</li>
<li>
<p>Interface Segregation Principle (ISP) 接口隔离原则</p>
<p>Clients should not be forced to depend upon interfaces that they don’t use. the number of members in the interface that is visible to the dependent class should be minimized.接口中对依赖类可见的成员数量应该最小化。</p>
</li>
<li>
<p>Dependency Inversion Principle (DIP) 依赖倒置原则</p>
<p>High level modules should not depend upon low level modules. Both should depend upon abstractions.Abstractions should not depend upon details. Details should depend upon abstractions.</p>
</li>
</ol>
</li>
<li>
<p><strong>DRY</strong> (Don’t Repeat Yourself)</p>
</li>
<li>
<p><strong>KISS</strong> (Keep it simple, Stupid!)</p>
</li>
<li>
<p>**YAGNI (You ain&rsquo;t gonna need it)**This principle states that always implement things when you actually need them never implement things before you need them.</p>
</li>
</ol>
<h3 id="design-pattern">Design Pattern</h3>
<p>In software engineering, a software design pattern is a general, reusable solution to a commonly occurring problem within a given context in software design. It is a description or template for how to solve a problem that can be used in many different situations.</p>
<ul>
<li>
<p><strong>Abstract Factory</strong>Provide an interface for creating families of related or dependent objects without specifying their concrete classes.</p>
</li>
<li>
<p><strong>Adapter</strong>Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn’t otherwise because of incompatibility interfaces.</p>
</li>
<li>
<p><strong>Command</strong>Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.<strong>Factory Method</strong>Define an interface for creating an object, but let the subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.</p>
</li>
<li>
<p><strong>Observer</strong>Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.</p>
</li>
<li>
<p><strong>Visitor</strong>Represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates.</p>
</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Java_oop</title>
			<link>https://daiwei.dev/posts/java_oop/</link>
			<pubDate>Tue, 09 Nov 2021 11:30:25 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/java_oop/</guid>
			<description>Object-oriented programming (OOP) is a programming based on the concept of “objects” that contain data and methods. The primary purpose of object-oriented programming is to increase the flexibility and maintainability of programs. Object oriented programming brings together data and its behaviour(methods) in a single location(object) makes it easier to understand how a program works.
面向对象程序设计（Object Oriented Programming，OOP）是一种计算机编程架构。OOP的一条基本原则是计算机程序由单个能够起到子程序作用的单元或对象组合而成。OOP达到了软件工程的三个主要目标：重用性、灵活性和扩展性。OOP=对象+类+继承+多态+消息，其中核心概念是类和对象。
除了OOP, 还有面向过程(Procedure Oriented Programming)，是一种以过程为中心的编程思想。这些都是以什么正在发生为主要目标进行编程。函数式编程（Functional Programming），data更多的围绕operation， 所以添加新的方法很容易。
What is an Object 什么是对象？对象就是一组数据 data 和行为 behaviour (aka method).</description>
			<content type="html"><![CDATA[<p>Object-oriented programming (OOP) is a programming based on the concept of “objects” that contain data and methods. The primary purpose of object-oriented programming is to increase the flexibility and maintainability of programs. Object oriented programming brings together data and its behaviour(methods) in a single location(object) makes it easier to understand how a program works.</p>
<p>面向对象程序设计（Object Oriented Programming，OOP）是一种计算机编程架构。OOP的一条基本原则是计算机程序由单个能够起到子程序作用的单元或对象组合而成。OOP达到了软件工程的三个主要目标：重用性、灵活性和扩展性。OOP=对象+类+继承+多态+消息，其中核心概念是类和对象。</p>
<p>除了OOP, 还有面向过程(Procedure Oriented Programming)，是一种以过程为中心的编程思想。这些都是以什么正在发生为主要目标进行编程。函数式编程（Functional Programming），data更多的围绕operation， 所以添加新的方法很容易。</p>
<h3 id="what-is-an-object">What is an Object</h3>
<p>什么是对象？对象就是一组数据 data 和行为 behaviour (aka method).</p>
<p><strong>Example :</strong>
<strong>Object</strong>: House
<strong>State</strong>: Address, Color, Area
<strong>Behavior</strong>: Open door, close door</p>
<h3 id="characteristics-of-objects">Characteristics of Objects:</h3>
<p><strong>Abstraction</strong>: Abstraction is a process where you show only “relevant” data and “hide” unnecessary details of an object from the user.</p>
<p><strong>Encapsulation</strong>: Encapsulation simply means binding object state(fields) and behaviour(methods) together. If you are creating class, you are doing encapsulation.</p>
<p><strong>Message passing</strong>
A single object by itself may not be very useful. An application contains many objects. One object interacts with another object by invoking methods on that object. It is also referred to as <strong>Method Invocation</strong>. See the diagram below.</p>
<h3 id="object-oriented-programming-features">Object Oriented Programming features</h3>
<p><img src="https://beginnersbook.com/wp-content/uploads/2013/04/Object-oriented-programming-features.jpg" alt="OOPs features, Object-oriented-programming-features"></p>
<h4 id="abstraction-抽象">Abstraction 抽象</h4>
<p>Abstraction is a process of hiding the implementation details from the user, only the functionality will be provided to the user. In other words, the user will have the information on what the object does instead of how it does it.
In Java, abstraction is achieved using <strong>Abstract classes</strong> and <strong>interfaces</strong>.</p>
<p>抽象就是对用户隐藏程序的执行细节，只提供功能给用户。</p>
<h4 id="inhertance-继承">Inhertance 继承</h4>
<p>Inheritance can be defined as the process where one class acquires the properties (methods方法 and fields属性) of another. With the use of inheritance the information is made manageable in a hierarchical order.</p>
<p>The class which inherits the properties of other is known as subclass (derived class, child class) and the class whose properties are inherited is known as superclass (base class, parent class). <strong>extends</strong> is the keyword used to inherit the properties of a class.</p>
<p>继承的关键词是extends，当一个子类需要获取他的父类的方法和属性时就需要使用继承来定义。</p>
<h4 id="encapsolution-封装">Encapsolution 封装</h4>
<p>This is the practice of keeping fields within a class private, then providing access to them via public methods. It’s a protective barrier that keeps the data and code safe within the class itself.</p>
<p>Declare the variables of a class as <strong>private</strong>.Provide <strong>public setter and getter methods</strong> to modify and view the variables values.</p>
<p>封装就是通过使用private，public， protect关键词来保护内部数据的安全。</p>
<h4 id="polymorphism-多态">Polymorphism 多态</h4>
<p>Polymorphism is the ability of an object to take on many forms. The most common use of polymorphism in OOP occurs when a parent class reference is used to refer to a child class object.</p>
<p>多态是一个对象具有多种形式的能力。OOP中最常见的多态性用法是使用父类引用来引用子类对象。</p>
]]></content>
		</item>
		
		<item>
			<title>线程创建方式4: threadpool</title>
			<link>https://daiwei.dev/posts/java_threadpool/</link>
			<pubDate>Wed, 03 Nov 2021 15:57:02 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/java_threadpool/</guid>
			<description>提前建好多个线程放入线程池中，使用时直接获取。避免频繁创建销毁线程，实现线程重复利用。
线程池类似公交车🚌，每个人都可以按自己的需选择乘坐任何一辆公交车。
好处：
 建好线程创建时间，提高程序相应速度。 线程可重复利用，降低系统资源消耗。 便于线程管理，提高编程效率。  线程池API:
 ExecutorService 线程池接口，常见子类 ThreadPoolExecutor Executor 工具类，线程池工厂类，用于创建并返回不同类型的线程。  1package threadpool; 2 3import java.util.concurrent.ExecutorService; 4import java.util.concurrent.Executors; 5import java.util.concurrent.ThreadPoolExecutor; 6import java.util.concurrent.TimeUnit; 7 8/** 9* 线程创建方式4： ThreadPool 10*/ 11public class ThreadPool { 12 public static void main(String[] args) { 13 ExecutorService service = Executors.newScheduledThreadPool(10); 14 15 //设置线程池属性，先把ExecutorService 转换成 ThreadPoolExecutor 16 //ThreadPoolExecutor service1 = (ThreadPoolExecutor) service; 17 //service1.setCorePoolSize(5); 18 //service1.setKeepAliveTime(100, TimeUnit.MILLISECONDS); 19 20 //service.submit(Callable callable);//适合适用于Callable 21 service.</description>
			<content type="html"><![CDATA[<p>提前建好多个线程放入线程池中，使用时直接获取。避免频繁创建销毁线程，实现线程重复利用。</p>
<p>线程池类似公交车🚌，每个人都可以按自己的需选择乘坐任何一辆公交车。</p>
<p>好处：</p>
<ol>
<li>建好线程创建时间，提高程序相应速度。</li>
<li>线程可重复利用，降低系统资源消耗。</li>
<li>便于线程管理，提高编程效率。</li>
</ol>
<p>线程池API:</p>
<ol>
<li>ExecutorService 线程池接口，常见子类 ThreadPoolExecutor</li>
<li>Executor 工具类，线程池工厂类，用于创建并返回不同类型的线程。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kn">package</span> <span class="nn">threadpool</span><span class="o">;</span>
<span class="ln"> 2</span>
<span class="ln"> 3</span><span class="kn">import</span> <span class="nn">java.util.concurrent.ExecutorService</span><span class="o">;</span>
<span class="ln"> 4</span><span class="kn">import</span> <span class="nn">java.util.concurrent.Executors</span><span class="o">;</span>
<span class="ln"> 5</span><span class="kn">import</span> <span class="nn">java.util.concurrent.ThreadPoolExecutor</span><span class="o">;</span>
<span class="ln"> 6</span><span class="kn">import</span> <span class="nn">java.util.concurrent.TimeUnit</span><span class="o">;</span>
<span class="ln"> 7</span>
<span class="ln"> 8</span><span class="cm">/**
</span><span class="ln"> 9</span><span class="cm"> * 线程创建方式4： ThreadPool
</span><span class="ln">10</span><span class="cm"> */</span>
<span class="ln">11</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadPool</span> <span class="o">{</span>
<span class="ln">12</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">13</span>        <span class="n">ExecutorService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newScheduledThreadPool</span><span class="o">(</span><span class="n">10</span><span class="o">);</span>
<span class="ln">14</span>
<span class="ln">15</span>        <span class="c1">//设置线程池属性，先把ExecutorService 转换成 ThreadPoolExecutor
</span><span class="ln">16</span><span class="c1"></span>        <span class="c1">//ThreadPoolExecutor service1 = (ThreadPoolExecutor) service;
</span><span class="ln">17</span><span class="c1"></span>        <span class="c1">//service1.setCorePoolSize(5);
</span><span class="ln">18</span><span class="c1"></span>        <span class="c1">//service1.setKeepAliveTime(100, TimeUnit.MILLISECONDS);
</span><span class="ln">19</span><span class="c1"></span>
<span class="ln">20</span>        <span class="c1">//service.submit(Callable callable);//适合适用于Callable
</span><span class="ln">21</span><span class="c1"></span>        <span class="n">service</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">NumberThread1</span><span class="o">());</span><span class="c1">//适合使用于Runnable
</span><span class="ln">22</span><span class="c1"></span>        <span class="n">service</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">NumberThread2</span><span class="o">());</span>
<span class="ln">23</span>
<span class="ln">24</span>        <span class="n">service</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span><span class="c1">//关闭线程池
</span><span class="ln">25</span><span class="c1"></span>    <span class="o">}</span>
<span class="ln">26</span><span class="o">}</span>
<span class="ln">27</span>
<span class="ln">28</span><span class="kd">class</span> <span class="nc">NumberThread1</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
<span class="ln">29</span>
<span class="ln">30</span>    <span class="nd">@Override</span>
<span class="ln">31</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">32</span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
<span class="ln">33</span>            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">2</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">34</span>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;: &#34;</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
<span class="ln">35</span>            <span class="o">}</span>
<span class="ln">36</span>        <span class="o">}</span>
<span class="ln">37</span>    <span class="o">}</span>
<span class="ln">38</span><span class="o">}</span>
<span class="ln">39</span>
<span class="ln">40</span><span class="kd">class</span> <span class="nc">NumberThread2</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
<span class="ln">41</span>
<span class="ln">42</span>    <span class="nd">@Override</span>
<span class="ln">43</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">44</span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
<span class="ln">45</span>            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">2</span> <span class="o">!=</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">46</span>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;: &#34;</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
<span class="ln">47</span>            <span class="o">}</span>
<span class="ln">48</span>        <span class="o">}</span>
<span class="ln">49</span>    <span class="o">}</span>
<span class="ln">50</span><span class="o">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>创建线程的方式3: Callable</title>
			<link>https://daiwei.dev/posts/java_callable/</link>
			<pubDate>Wed, 03 Nov 2021 15:39:23 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/java_callable/</guid>
			<description>1package callableTest; 2 3import java.util.concurrent.Callable; 4import java.util.concurrent.ExecutionException; 5import java.util.concurrent.FutureTask; 6 7/** 8* 创建线程方式3：实现 callable 接口。-----JDK5.0新增 9*/ 10public class ThreadNew { 11 public static void main (String[] arg) { 12 NumThread num = new NumThread(); 13 14 // Future接口可以对Runnable, callable的执行结果进行取消，查询和获取。 15 // FutureTask 同时实现了Runnable &amp;amp; Future接口， 16 // 既可作为线程被Runnable执行，又可以作为Future得到Callable的返回值。 17 FutureTask&amp;lt;Integer&amp;gt; futureTask = new FutureTask&amp;lt;&amp;gt;(num); 18 19 new Thread(futureTask).start(); 20 21 try { 22 //get()返回值即callable实现类override call() 返回值 23 Integer sum = futureTask.</description>
			<content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kn">package</span> <span class="nn">callableTest</span><span class="o">;</span>
<span class="ln"> 2</span>
<span class="ln"> 3</span><span class="kn">import</span> <span class="nn">java.util.concurrent.Callable</span><span class="o">;</span>
<span class="ln"> 4</span><span class="kn">import</span> <span class="nn">java.util.concurrent.ExecutionException</span><span class="o">;</span>
<span class="ln"> 5</span><span class="kn">import</span> <span class="nn">java.util.concurrent.FutureTask</span><span class="o">;</span>
<span class="ln"> 6</span>
<span class="ln"> 7</span><span class="cm">/**
</span><span class="ln"> 8</span><span class="cm"> * 创建线程方式3：实现 callable 接口。-----JDK5.0新增
</span><span class="ln"> 9</span><span class="cm"> */</span>
<span class="ln">10</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadNew</span> <span class="o">{</span>
<span class="ln">11</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">arg</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">12</span>        <span class="n">NumThread</span> <span class="n">num</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NumThread</span><span class="o">();</span>
<span class="ln">13</span>
<span class="ln">14</span>        <span class="c1">// Future接口可以对Runnable, callable的执行结果进行取消，查询和获取。
</span><span class="ln">15</span><span class="c1"></span>        <span class="c1">// FutureTask 同时实现了Runnable &amp; Future接口，
</span><span class="ln">16</span><span class="c1"></span>        <span class="c1">// 既可作为线程被Runnable执行，又可以作为Future得到Callable的返回值。
</span><span class="ln">17</span><span class="c1"></span>        <span class="n">FutureTask</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">futureTask</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FutureTask</span><span class="o">&lt;&gt;(</span><span class="n">num</span><span class="o">);</span>
<span class="ln">18</span>
<span class="ln">19</span>        <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">futureTask</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
<span class="ln">20</span>
<span class="ln">21</span>        <span class="k">try</span> <span class="o">{</span>
<span class="ln">22</span>            <span class="c1">//get()返回值即callable实现类override call() 返回值
</span><span class="ln">23</span><span class="c1"></span>            <span class="n">Integer</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">futureTask</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
<span class="ln">24</span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;sum: &#34;</span> <span class="o">+</span> <span class="n">sum</span><span class="o">);</span>
<span class="ln">25</span>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="o">|</span> <span class="n">ExecutionException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">26</span>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">27</span>        <span class="o">}</span>
<span class="ln">28</span>    <span class="o">}</span>
<span class="ln">29</span><span class="o">}</span>
<span class="ln">30</span>
<span class="ln">31</span><span class="kd">class</span> <span class="nc">NumThread</span> <span class="kd">implements</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="o">{</span>
<span class="ln">32</span>
<span class="ln">33</span>    <span class="nd">@Override</span>
<span class="ln">34</span>    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
<span class="ln">35</span>        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
<span class="ln">36</span>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
<span class="ln">37</span>            <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">2</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">38</span>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
<span class="ln">39</span>                <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span><span class="o">;</span>
<span class="ln">40</span>            <span class="o">}</span>
<span class="ln">41</span>        <span class="o">}</span>
<span class="ln">42</span>        <span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
<span class="ln">43</span>    <span class="o">}</span>
<span class="ln">44</span><span class="o">}</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="nl">result:</span>
<span class="ln">2</span><span class="n">2</span>
<span class="ln">3</span><span class="n">4</span>
<span class="ln">4</span><span class="n">6</span>
<span class="ln">5</span><span class="n">8</span>
<span class="ln">6</span><span class="n">10</span>
<span class="ln">7</span><span class="nl">sum:</span> <span class="n">30</span>
</code></pre></div><h2 id="runnable-vs-callable"><code>Runnable()</code> vs <code>Callable()</code></h2>
<ol>
<li><code>call()</code> 可以 return 有返回值。</li>
<li><code>call()</code> 可以抛出异常。</li>
<li><code>Callable()</code>支持泛型。</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>Thread Communication</title>
			<link>https://daiwei.dev/posts/thread_communication/</link>
			<pubDate>Wed, 03 Nov 2021 13:16:20 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/thread_communication/</guid>
			<description>1/** 2* 线程通信例子：两个线程交替打印 integer 1-10 3* 涉及3个方法： 4* wait(): 当前线程进入wait状态，并释放线程监视器。 5* notify(): 唤醒一个处于wait状态中优先级最高的线程。 6* notifyAll(): 唤醒所有处于wait状态的线程。 7* 8* 1. 3个方法都必须是用在同步代码块或者同步方法中。 9* 2. 3个方法的调用者必须是同步代码块或者同步方法中的同步监视器。 10* 3. 3个方法是定义在java.Lang.Object类中， 并不是 thread 类中。 11*/ 12public class CommunicationTest { 13 public static void main (String[] args) { 14 NumberPrinter n = new NumberPrinter(); 15 Thread t1 = new Thread(n); 16 Thread t2 = new Thread(n); 17 18 t1.start(); 19 t2.start(); 20 } 21} 22 23class NumberPrinter implements Runnable { 24 int i = 1; 25 26 @Override 27 public void run() { 28 while (true) { 29 synchronized (this) { 30 notify(); // 必须使用同步监视器this来调用，this.</description>
			<content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="cm">/**
</span><span class="ln"> 2</span><span class="cm"> * 线程通信例子：两个线程交替打印 integer 1-10
</span><span class="ln"> 3</span><span class="cm"> * 涉及3个方法：
</span><span class="ln"> 4</span><span class="cm"> * wait(): 当前线程进入wait状态，并释放线程监视器。
</span><span class="ln"> 5</span><span class="cm"> * notify(): 唤醒一个处于wait状态中优先级最高的线程。
</span><span class="ln"> 6</span><span class="cm"> * notifyAll(): 唤醒所有处于wait状态的线程。
</span><span class="ln"> 7</span><span class="cm"> *
</span><span class="ln"> 8</span><span class="cm"> * 1. 3个方法都必须是用在同步代码块或者同步方法中。
</span><span class="ln"> 9</span><span class="cm"> * 2. 3个方法的调用者必须是同步代码块或者同步方法中的同步监视器。
</span><span class="ln">10</span><span class="cm"> * 3. 3个方法是定义在java.Lang.Object类中， 并不是 thread 类中。
</span><span class="ln">11</span><span class="cm"> */</span>
<span class="ln">12</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CommunicationTest</span> <span class="o">{</span>
<span class="ln">13</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">14</span>        <span class="n">NumberPrinter</span> <span class="n">n</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NumberPrinter</span><span class="o">();</span>
<span class="ln">15</span>        <span class="n">Thread</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
<span class="ln">16</span>        <span class="n">Thread</span> <span class="n">t2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
<span class="ln">17</span>
<span class="ln">18</span>        <span class="n">t1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">19</span>        <span class="n">t2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">20</span>    <span class="o">}</span>
<span class="ln">21</span><span class="o">}</span>
<span class="ln">22</span>
<span class="ln">23</span><span class="kd">class</span> <span class="nc">NumberPrinter</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
<span class="ln">24</span>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
<span class="ln">25</span>  
<span class="ln">26</span>    <span class="nd">@Override</span>
<span class="ln">27</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">28</span>        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">29</span>            <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">30</span>                <span class="n">notify</span><span class="o">();</span> <span class="c1">// 必须使用同步监视器this来调用，this.notify = notify
</span><span class="ln">31</span><span class="c1"></span>                <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">10</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">32</span>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;: &#34;</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
<span class="ln">33</span>                    <span class="n">i</span><span class="o">++;</span>
<span class="ln">34</span>
<span class="ln">35</span>                    <span class="k">try</span> <span class="o">{</span>
<span class="ln">36</span>                        <span class="n">wait</span><span class="o">();</span> <span class="c1">//this.wait
</span><span class="ln">37</span><span class="c1"></span>                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">38</span>                        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">39</span>                    <span class="o">}</span>
<span class="ln">40</span>                <span class="o">}</span><span class="k">else</span> <span class="k">break</span><span class="o">;</span>
<span class="ln">41</span>            <span class="o">}</span>
<span class="ln">42</span>        <span class="o">}</span>
<span class="ln">43</span>    <span class="o">}</span>
<span class="ln">44</span><span class="o">}</span>
</code></pre></div><h2 id="sleep-vs-wait"><code>sleep()</code> vs <code>wait()</code></h2>
<p>**相同点：**都可以让线程进入block状态。</p>
<p><strong>不同点：</strong></p>
<ol>
<li>声明位置不同：thread类中声明<code>sleep()</code>, object类中声明<code>wait()</code>;</li>
<li>调用要求不同：<code>sleep()</code>可在任何地方调用，<code>wait()</code>只能在同步代码块或方法中调用；</li>
<li><code>sleep()</code>不会释放同步监视器，<code>wait()</code>会释放同步监视器。</li>
</ol>
<h2 id="生产者-消费者问题">生产者-消费者问题</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kn">package</span> <span class="nn">communicationTest</span><span class="o">;</span>
<span class="ln"> 2</span>
<span class="ln"> 3</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductTest</span> <span class="o">{</span>
<span class="ln"> 4</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 5</span>        <span class="n">Clerk</span> <span class="n">clerk</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Clerk</span><span class="o">();</span>
<span class="ln"> 6</span>        <span class="n">Producer</span> <span class="n">p1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Producer</span><span class="o">(</span><span class="n">clerk</span><span class="o">);</span>
<span class="ln"> 7</span>        <span class="n">Consumer</span> <span class="n">c1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Consumer</span><span class="o">(</span><span class="n">clerk</span><span class="o">);</span>
<span class="ln"> 8</span>        <span class="n">Consumer</span> <span class="n">c2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Consumer</span><span class="o">(</span><span class="n">clerk</span><span class="o">);</span>
<span class="ln"> 9</span>
<span class="ln">10</span>        <span class="n">p1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;p1&#34;</span><span class="o">);</span>
<span class="ln">11</span>        <span class="n">c1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;c1&#34;</span><span class="o">);</span>
<span class="ln">12</span>        <span class="n">c2</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;c2&#34;</span><span class="o">);</span>
<span class="ln">13</span>
<span class="ln">14</span>        <span class="n">p1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">15</span>        <span class="n">c1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">16</span>        <span class="n">c2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">17</span>    <span class="o">}</span>
<span class="ln">18</span><span class="o">}</span>
<span class="ln">19</span>
<span class="ln">20</span><span class="kd">class</span> <span class="nc">Clerk</span> <span class="o">{</span>
<span class="ln">21</span>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">production</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
<span class="ln">22</span>
<span class="ln">23</span>    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">produceProduct</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">24</span>        <span class="k">if</span><span class="o">(</span><span class="n">production</span> <span class="o">&lt;</span> <span class="n">20</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">25</span>            <span class="n">production</span><span class="o">++;</span>
<span class="ln">26</span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;: START PRODUCE&#34;</span> <span class="o">+</span> <span class="n">production</span><span class="o">);</span>
<span class="ln">27</span>            <span class="n">notify</span><span class="o">();</span>
<span class="ln">28</span>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="ln">29</span>            <span class="k">try</span> <span class="o">{</span>
<span class="ln">30</span>                <span class="n">wait</span><span class="o">();</span>
<span class="ln">31</span>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">32</span>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">33</span>            <span class="o">}</span>
<span class="ln">34</span>        <span class="o">}</span>
<span class="ln">35</span>    <span class="o">}</span>
<span class="ln">36</span>
<span class="ln">37</span>    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">consumeProduct</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">38</span>        <span class="k">if</span><span class="o">(</span><span class="n">production</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">39</span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;: START consume&#34;</span> <span class="o">+</span> <span class="n">production</span><span class="o">);</span>
<span class="ln">40</span>            <span class="n">production</span><span class="o">--;</span>
<span class="ln">41</span>            <span class="n">notify</span><span class="o">();</span>
<span class="ln">42</span>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="ln">43</span>            <span class="k">try</span> <span class="o">{</span>
<span class="ln">44</span>                <span class="n">wait</span><span class="o">();</span>
<span class="ln">45</span>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">46</span>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">47</span>            <span class="o">}</span>
<span class="ln">48</span>        <span class="o">}</span>
<span class="ln">49</span>    <span class="o">}</span>
<span class="ln">50</span><span class="o">}</span>
<span class="ln">51</span>
<span class="ln">52</span><span class="kd">class</span> <span class="nc">Producer</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
<span class="ln">53</span>    <span class="kd">private</span> <span class="n">Clerk</span> <span class="n">clerk</span><span class="o">;</span>
<span class="ln">54</span>
<span class="ln">55</span>    <span class="kd">public</span> <span class="nf">Producer</span> <span class="o">(</span><span class="n">Clerk</span> <span class="n">clerk</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">56</span>        <span class="k">this</span><span class="o">.</span><span class="na">clerk</span> <span class="o">=</span> <span class="n">clerk</span><span class="o">;</span>
<span class="ln">57</span>    <span class="o">}</span>
<span class="ln">58</span>
<span class="ln">59</span>    <span class="nd">@Override</span>
<span class="ln">60</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">61</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;Start produce...&#34;</span><span class="o">);</span>
<span class="ln">62</span>
<span class="ln">63</span>        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">64</span>            <span class="n">clerk</span><span class="o">.</span><span class="na">produceProduct</span><span class="o">();</span>
<span class="ln">65</span>        <span class="o">}</span>
<span class="ln">66</span>    <span class="o">}</span>
<span class="ln">67</span>
<span class="ln">68</span><span class="o">}</span>
<span class="ln">69</span>
<span class="ln">70</span><span class="kd">class</span> <span class="nc">Consumer</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
<span class="ln">71</span>    <span class="kd">private</span> <span class="n">Clerk</span> <span class="n">clerk</span><span class="o">;</span>
<span class="ln">72</span>
<span class="ln">73</span>    <span class="kd">public</span> <span class="nf">Consumer</span> <span class="o">(</span><span class="n">Clerk</span> <span class="n">clerk</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">74</span>        <span class="k">this</span><span class="o">.</span><span class="na">clerk</span> <span class="o">=</span> <span class="n">clerk</span><span class="o">;</span>
<span class="ln">75</span>    <span class="o">}</span>
<span class="ln">76</span>
<span class="ln">77</span>    <span class="nd">@Override</span>
<span class="ln">78</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">79</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;Start consume...&#34;</span><span class="o">);</span>
<span class="ln">80</span>
<span class="ln">81</span>        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">82</span>            <span class="n">clerk</span><span class="o">.</span><span class="na">consumeProduct</span><span class="o">();</span>
<span class="ln">83</span>        <span class="o">}</span>
<span class="ln">84</span>    <span class="o">}</span>
<span class="ln">85</span><span class="o">}</span>
</code></pre></div><h3 id="notify-vs-notifyall"><code>notify()</code> vs <code>notifyAll()</code></h3>
<ul>
<li>notify(): 唤醒 <strong>一个</strong> 处于wait状态中<strong>优先级最高</strong>的线程。</li>
<li>notifyAll(): 唤醒 <strong>所有</strong> 处于wait状态的线程。</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Java Lock</title>
			<link>https://daiwei.dev/posts/java_lock/</link>
			<pubDate>Wed, 03 Nov 2021 10:10:07 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/java_lock/</guid>
			<description>1Module: java.base 2Package: java.util.concurrent.locks 3Interface Lock 4 5All Known Implementing Classes: 6ReentrantLock, ReentrantReadWriteLock.ReadLock, ReentrantReadWriteLock.WriteLock Lock实现提供了比使用synchronized方法和语句获得的更广泛的锁定操作。它们允许更灵活的结构，可能具有完全不同的属性，并且可能支持多个关联 Condition对象。
锁是用于控制多个线程对共享资源的访问的工具。通常，锁提供对共享资源的独占访问：一次只有一个线程可以获取锁，所有对共享资源的访问都需要先获取锁。但是，某些锁可能允许并发访问共享资源，例如ReadWriteLock.
synchronized方法或语句的使用提供对与每个对象关联的隐式监视器锁的访问，但强制所有锁的获取和释放以块结构的方式发生：当获取多个锁时，它们必须以相反的顺序释放，并且所有锁必须在获得它们的同一个词法范围内释放。
虽然synchronized方法和语句的作用域机制使使用监视器锁编程变得更加容易，并有助于避免许多涉及锁的常见编程错误，但在某些情况下，您需要以更灵活的方式使用锁。例如，一些遍历并发访问数据结构的算法需要使用“hand-over-hand”或“chainlocking”：你先获取节点A的锁，然后节点B，然后释放A，获取C，然后释放B并获得 D 等等。所述的实施方式中 Lock接口通过允许获得并在不同的范围释放的锁，并允许获得并以任何顺序释放多个锁使得能够使用这样的技术。
这种增加的灵活性带来了额外的责任。块结构锁的缺失消除了synchronized 方法和语句中发生的锁的自动释放。在大多数情况下，应使用以下习语：
1 Lock l = new Lock; 2 l.lock(); 3 try { 4 // access the resource protected by this lock 5 } finally { 6 l.unlock(); 7 } 当锁定和解锁发生在不同的作用域时，必须注意确保持有锁时执行的所有代码都受到 try-finally 或 try-catch 的保护，以确保在必要时释放锁。
1package lockTest; 2 3 4import java.util.concurrent.locks.ReentrantLock; 5 6/** 7* ConcurrentThread Safety 8* The solution 1: synchronized 9* The solution 2: lock 10*/ 11public class LockTest { 12 public static void main(String[] args) { 13 Window w = new Window(); 14 15 Thread t1 = new Thread(w); 16 Thread t2 = new Thread(w); 17 Thread t3 = new Thread(w); 18 19 t1.</description>
			<content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-apl" data-lang="apl"><span class="ln">1</span><span class="nv">Module</span><span class="bp">:</span> <span class="nv">java</span><span class="na">.</span><span class="nv">base</span>
<span class="ln">2</span><span class="nv">Package</span><span class="bp">:</span> <span class="nv">java</span><span class="na">.</span><span class="nv">util</span><span class="na">.</span><span class="nv">concurrent</span><span class="na">.</span><span class="nv">locks</span>
<span class="ln">3</span><span class="nv">Interface</span> <span class="nv">Lock</span>
<span class="ln">4</span>  
<span class="ln">5</span><span class="nv">All</span> <span class="nv">Known</span> <span class="nv">Implementing</span> <span class="nv">Classes</span><span class="bp">:</span>
<span class="ln">6</span><span class="nv">ReentrantLock</span><span class="o">,</span> <span class="nv">ReentrantReadWriteLock</span><span class="na">.</span><span class="nv">ReadLock</span><span class="o">,</span> <span class="nv">ReentrantReadWriteLock</span><span class="na">.</span><span class="nv">WriteLock</span>
</code></pre></div><p><code>Lock</code>实现提供了比使用<code>synchronized</code>方法和语句获得的更广泛的锁定操作。它们允许更灵活的结构，可能具有完全不同的属性，并且可能支持多个关联 <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/locks/Condition.html"><code>Condition</code></a>对象。</p>
<p>锁是用于控制多个线程对共享资源的访问的工具。通常，锁提供对共享资源的独占访问：一次只有一个线程可以获取锁，所有对共享资源的访问都需要先获取锁。但是，某些锁可能允许并发访问共享资源，例如<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/locks/ReadWriteLock.html"><code>ReadWriteLock</code></a>.</p>
<p><code>synchronized</code>方法或语句的使用提供对与每个对象关联的隐式监视器锁的访问，但强制所有锁的获取和释放以块结构的方式发生：当获取多个锁时，它们必须以相反的顺序释放，并且所有锁必须在获得它们的同一个词法范围内释放。</p>
<p>虽然<code>synchronized</code>方法和语句的作用域机制使使用监视器锁编程变得更加容易，并有助于避免许多涉及锁的常见编程错误，但在某些情况下，您需要以更灵活的方式使用锁。例如，一些遍历并发访问数据结构的算法需要使用“hand-over-hand”或“chainlocking”：你先获取节点A的锁，然后节点B，然后释放A，获取C，然后释放B并获得 D 等等。所述的实施方式中 <code>Lock</code>接口通过允许获得并在不同的范围释放的锁，并允许获得并以任何顺序释放多个锁使得能够使用这样的技术。</p>
<p>这种增加的灵活性带来了额外的责任。块结构锁的缺失消除了<code>synchronized</code> 方法和语句中发生的锁的自动释放。在大多数情况下，应使用以下习语：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span> <span class="n">Lock</span> <span class="n">l</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Lock</span><span class="o">;</span>
<span class="ln">2</span> <span class="n">l</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
<span class="ln">3</span> <span class="k">try</span> <span class="o">{</span>
<span class="ln">4</span>   <span class="c1">// access the resource protected by this lock
</span><span class="ln">5</span><span class="c1"></span> <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
<span class="ln">6</span>   <span class="n">l</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
<span class="ln">7</span> <span class="o">}</span>
</code></pre></div><p>当锁定和解锁发生在不同的作用域时，必须注意确保持有锁时执行的所有代码都受到 try-finally 或 try-catch 的保护，以确保在必要时释放锁。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kn">package</span> <span class="nn">lockTest</span><span class="o">;</span>
<span class="ln"> 2</span>
<span class="ln"> 3</span>
<span class="ln"> 4</span><span class="kn">import</span> <span class="nn">java.util.concurrent.locks.ReentrantLock</span><span class="o">;</span>
<span class="ln"> 5</span>
<span class="ln"> 6</span><span class="cm">/**
</span><span class="ln"> 7</span><span class="cm"> * ConcurrentThread Safety
</span><span class="ln"> 8</span><span class="cm"> * The solution 1: synchronized
</span><span class="ln"> 9</span><span class="cm"> * The solution 2: lock
</span><span class="ln">10</span><span class="cm"> */</span>
<span class="ln">11</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LockTest</span> <span class="o">{</span>
<span class="ln">12</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">13</span>        <span class="n">Window</span> <span class="n">w</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Window</span><span class="o">();</span>
<span class="ln">14</span>
<span class="ln">15</span>        <span class="n">Thread</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">w</span><span class="o">);</span>
<span class="ln">16</span>        <span class="n">Thread</span> <span class="n">t2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">w</span><span class="o">);</span>
<span class="ln">17</span>        <span class="n">Thread</span> <span class="n">t3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">w</span><span class="o">);</span>
<span class="ln">18</span>
<span class="ln">19</span>        <span class="n">t1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Window 1&#34;</span><span class="o">);</span>
<span class="ln">20</span>        <span class="n">t2</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Window 2&#34;</span><span class="o">);</span>
<span class="ln">21</span>        <span class="n">t3</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Window 3&#34;</span><span class="o">);</span>
<span class="ln">22</span>
<span class="ln">23</span>        <span class="n">t1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">24</span>        <span class="n">t2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">25</span>        <span class="n">t3</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">26</span>    <span class="o">}</span>
<span class="ln">27</span><span class="o">}</span>
<span class="ln">28</span>
<span class="ln">29</span>
<span class="ln">30</span><span class="kd">class</span> <span class="nc">Window</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
<span class="ln">31</span>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">tickets</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span>
<span class="ln">32</span>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ReentrantLock</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ReentrantLock</span><span class="o">();</span>
<span class="ln">33</span>
<span class="ln">34</span>    <span class="nd">@Override</span>
<span class="ln">35</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">36</span>        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">37</span>            <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
<span class="ln">38</span>            <span class="k">try</span> <span class="o">{</span>
<span class="ln">39</span>                <span class="k">if</span> <span class="o">(</span><span class="n">tickets</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">40</span>                    <span class="k">try</span> <span class="o">{</span>
<span class="ln">41</span>                        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">100</span><span class="o">);</span>
<span class="ln">42</span>                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">43</span>                        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">44</span>                    <span class="o">}</span>
<span class="ln">45</span>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34; sold ticket: &#34;</span> <span class="o">+</span> <span class="n">tickets</span><span class="o">);</span>
<span class="ln">46</span>                    <span class="n">tickets</span><span class="o">--;</span>
<span class="ln">47</span>                <span class="o">}</span> <span class="k">else</span> <span class="k">break</span><span class="o">;</span>
<span class="ln">48</span>            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
<span class="ln">49</span>                <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
<span class="ln">50</span>            <span class="o">}</span>
<span class="ln">51</span>        <span class="o">}</span>
<span class="ln">52</span>    <span class="o">}</span>
<span class="ln">53</span><span class="o">}</span>
</code></pre></div><h3 id="解决线程安全的方式有几种">解决线程安全的方式有几种？</h3>
<ol>
<li>synchronized
<ul>
<li>同步代码块 / 同步方法</li>
</ul>
</li>
<li>lock</li>
</ol>
<h3 id="sychronized-vs-lock">sychronized vs lock</h3>
<ul>
<li>
<p>sychonized 在执行完相应的同步代码块后，会自动释放同步监视器。</p>
<p>lock需要手动启动和停止同步锁<code>lock()/unlock()</code>。</p>
</li>
</ul>
<p>建议优先用lock，其实同步代码块，最后考虑同步方法。</p>
<h3 id="exercise">Exercise</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kn">package</span> <span class="nn">exercise</span><span class="o">;</span>
<span class="ln"> 2</span>
<span class="ln"> 3</span><span class="kn">import</span> <span class="nn">java.util.concurrent.locks.ReentrantLock</span><span class="o">;</span>
<span class="ln"> 4</span>
<span class="ln"> 5</span><span class="cm">/**
</span><span class="ln"> 6</span><span class="cm"> * 两位储户分别向同一银行账户存入3000，存3次，每次存1000并打印余额
</span><span class="ln"> 7</span><span class="cm"> * 1.是否是多线程问题？是，两位储户同时操作
</span><span class="ln"> 8</span><span class="cm"> * 2.是否共享数据？是，同一个银行账户
</span><span class="ln"> 9</span><span class="cm"> */</span>
<span class="ln">10</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AccountTest</span> <span class="o">{</span>
<span class="ln">11</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">12</span>        <span class="n">Account</span> <span class="n">acct</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Account</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>
<span class="ln">13</span>        <span class="n">Customer</span> <span class="n">c1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Customer</span><span class="o">(</span><span class="n">acct</span><span class="o">);</span>
<span class="ln">14</span>        <span class="n">Customer</span> <span class="n">c2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Customer</span><span class="o">(</span><span class="n">acct</span><span class="o">);</span>
<span class="ln">15</span>
<span class="ln">16</span>        <span class="n">c1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Jack&#34;</span><span class="o">);</span>
<span class="ln">17</span>        <span class="n">c2</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Rose&#34;</span><span class="o">);</span>
<span class="ln">18</span>
<span class="ln">19</span>        <span class="n">c1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">20</span>        <span class="n">c2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">21</span>    <span class="o">}</span>
<span class="ln">22</span><span class="o">}</span>
<span class="ln">23</span>
<span class="ln">24</span><span class="kd">class</span> <span class="nc">Account</span> <span class="o">{</span>
<span class="ln">25</span>    <span class="kd">private</span> <span class="kt">double</span> <span class="n">balance</span><span class="o">;</span>
<span class="ln">26</span>   
<span class="ln">27</span>    <span class="c1">//extend Thread 要用static 修饰 lock
</span><span class="ln">28</span><span class="c1"></span>    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">ReentrantLock</span> <span class="n">l</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ReentrantLock</span><span class="o">();</span>
<span class="ln">29</span>
<span class="ln">30</span>    <span class="kd">public</span> <span class="nf">Account</span> <span class="o">(</span><span class="kt">double</span> <span class="n">balance</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">31</span>        <span class="k">this</span><span class="o">.</span><span class="na">balance</span> <span class="o">=</span> <span class="n">balance</span><span class="o">;</span>
<span class="ln">32</span>    <span class="o">}</span>
<span class="ln">33</span>
<span class="ln">34</span>    <span class="c1">//同步方法 和 lock
</span><span class="ln">35</span><span class="c1"></span>    <span class="c1">//public synchronized void deposed (double amt) {
</span><span class="ln">36</span><span class="c1"></span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">deposed</span> <span class="o">(</span><span class="kt">double</span> <span class="n">amt</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">37</span>        <span class="k">if</span><span class="o">(</span><span class="n">amt</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">38</span>            <span class="n">l</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
<span class="ln">39</span>            <span class="k">try</span><span class="o">{</span>
<span class="ln">40</span>                <span class="n">balance</span><span class="o">+=</span><span class="n">amt</span><span class="o">;</span>
<span class="ln">41</span>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34; Deposed success, your balance: &#34;</span> <span class="o">+</span> <span class="n">balance</span><span class="o">);</span>
<span class="ln">42</span>
<span class="ln">43</span>                <span class="k">try</span> <span class="o">{</span>
<span class="ln">44</span>                    <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">1000</span><span class="o">);</span>
<span class="ln">45</span>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">46</span>                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">47</span>                <span class="o">}</span>
<span class="ln">48</span>            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
<span class="ln">49</span>                <span class="n">l</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
<span class="ln">50</span>            <span class="o">}</span>
<span class="ln">51</span>        <span class="o">}</span>
<span class="ln">52</span>    <span class="o">}</span>
<span class="ln">53</span><span class="o">}</span>
<span class="ln">54</span>
<span class="ln">55</span><span class="kd">class</span> <span class="nc">Customer</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
<span class="ln">56</span>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Account</span> <span class="n">acct</span><span class="o">;</span>
<span class="ln">57</span>
<span class="ln">58</span>    <span class="kd">public</span> <span class="nf">Customer</span><span class="o">(</span><span class="n">Account</span> <span class="n">acct</span><span class="o">){</span>
<span class="ln">59</span>        <span class="k">this</span><span class="o">.</span><span class="na">acct</span> <span class="o">=</span> <span class="n">acct</span><span class="o">;</span>
<span class="ln">60</span>    <span class="o">}</span>
<span class="ln">61</span>
<span class="ln">62</span>    <span class="nd">@Override</span>
<span class="ln">63</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(){</span>
<span class="ln">64</span>       <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">3</span><span class="o">;</span> <span class="n">i</span> <span class="o">++)</span>
<span class="ln">65</span>           <span class="n">acct</span><span class="o">.</span><span class="na">deposed</span><span class="o">(</span><span class="n">1000</span><span class="o">);</span>
<span class="ln">66</span>    <span class="o">}</span>
<span class="ln">67</span><span class="o">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Threads Safety</title>
			<link>https://daiwei.dev/posts/threadssafety/</link>
			<pubDate>Tue, 26 Oct 2021 12:08:57 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/threadssafety/</guid>
			<description>Unsafe threads in tickets system 不安全线程:
1public class WindowTest2 { 2 public static void main (String[] args) { 3 Window2 w = new Window2(); 4 5 Thread t1 = new Thread (w); 6 Thread t2 = new Thread (w); 7 Thread t3 = new Thread (w); 8 9 t1.setName(&amp;#34;Window_1&amp;#34;); 10 t2.setName(&amp;#34;Window_2&amp;#34;); 11 t3.setName(&amp;#34;Window_3&amp;#34;); 12 13 t1.start(); 14 t2.start(); 15 t3.start(); 16 } 17} 18 19class Window2 implements Runnable { 20 private int tickets = 100; 21 22 @Override 23 public void run() { 24 while(true) { 25 if(tickets &amp;gt; 0) { 26 try { 27 Thread.</description>
			<content type="html"><![CDATA[<p>Unsafe threads in tickets system 不安全线程:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WindowTest2</span> <span class="o">{</span>
<span class="ln"> 2</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 3</span>        <span class="n">Window2</span> <span class="n">w</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Window2</span><span class="o">();</span>
<span class="ln"> 4</span>
<span class="ln"> 5</span>        <span class="n">Thread</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span> <span class="o">(</span><span class="n">w</span><span class="o">);</span>
<span class="ln"> 6</span>        <span class="n">Thread</span> <span class="n">t2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span> <span class="o">(</span><span class="n">w</span><span class="o">);</span>
<span class="ln"> 7</span>        <span class="n">Thread</span> <span class="n">t3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span> <span class="o">(</span><span class="n">w</span><span class="o">);</span>
<span class="ln"> 8</span>
<span class="ln"> 9</span>        <span class="n">t1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Window_1&#34;</span><span class="o">);</span>
<span class="ln">10</span>        <span class="n">t2</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Window_2&#34;</span><span class="o">);</span>
<span class="ln">11</span>        <span class="n">t3</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Window_3&#34;</span><span class="o">);</span>
<span class="ln">12</span>
<span class="ln">13</span>        <span class="n">t1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">14</span>        <span class="n">t2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">15</span>        <span class="n">t3</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">16</span>    <span class="o">}</span>
<span class="ln">17</span><span class="o">}</span>
<span class="ln">18</span>
<span class="ln">19</span><span class="kd">class</span> <span class="nc">Window2</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
<span class="ln">20</span>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">tickets</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span>
<span class="ln">21</span>
<span class="ln">22</span>    <span class="nd">@Override</span>
<span class="ln">23</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">24</span>        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">25</span>            <span class="k">if</span><span class="o">(</span><span class="n">tickets</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">26</span>                <span class="k">try</span> <span class="o">{</span>
<span class="ln">27</span>                    <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">100</span><span class="o">);</span> <span class="c1">// sleep for amplified the threads bug
</span><span class="ln">28</span><span class="c1"></span>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">29</span>                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">30</span>                <span class="o">}</span>
<span class="ln">31</span>              
<span class="ln">32</span>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34; has sold ticket No : &#34;</span> <span class="o">+</span> <span class="n">tickets</span><span class="o">);</span>
<span class="ln">33</span>                <span class="n">tickets</span><span class="o">--;</span>
<span class="ln">34</span>            <span class="o">}</span> <span class="k">else</span> <span class="k">break</span><span class="o">;</span>
<span class="ln">35</span>        <span class="o">}</span>
<span class="ln">36</span>    <span class="o">}</span>
<span class="ln">37</span><span class="o">}</span>
</code></pre></div><p>运行结果：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="o">&gt;</span> <span class="n">Task</span> <span class="o">:</span><span class="n">WindowTest2</span><span class="o">.</span><span class="na">main</span><span class="o">()</span>
<span class="ln"> 2</span><span class="n">Window_3</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">100</span> <span class="c1">// duplicate ticket
</span><span class="ln"> 3</span><span class="c1"></span><span class="n">Window_2</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">100</span> <span class="c1">// duplicate ticket
</span><span class="ln"> 4</span><span class="c1"></span><span class="n">Window_1</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">100</span> <span class="c1">// duplicate ticket
</span><span class="ln"> 5</span><span class="c1"></span><span class="n">Window_2</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">98</span>
<span class="ln"> 6</span><span class="n">Window_3</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">99</span>
<span class="ln"> 7</span><span class="n">Window_2</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">96</span>
<span class="ln"> 8</span>  <span class="o">...</span>
<span class="ln"> 9</span><span class="n">Window_2</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">3</span>
<span class="ln">10</span><span class="n">Window_3</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">2</span>
<span class="ln">11</span><span class="n">Window_1</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">1</span> <span class="c1">// duplicate ticket
</span><span class="ln">12</span><span class="c1"></span><span class="n">Window_2</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">1</span> <span class="c1">// duplicate ticket
</span><span class="ln">13</span><span class="c1"></span><span class="n">Window_3</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="o">-</span><span class="n">1</span> <span class="c1">// illegal ticket
</span></code></pre></div><ul>
<li>Problem: in ticket sysytem appear duplicate &amp; illegal ticket.</li>
<li>Reason: During 1 thread havn&rsquo;t finish job other threads access and working also.</li>
<li>Solution: When 1 thread havn&rsquo;t finish  job other threads will be block.</li>
</ul>
<p>Java有两种方法解决线程安全问题：</p>
<h4 id="同步代码块-synchronize同步监视器俗称锁">同步代码块 <strong>synchronize</strong>(同步监视器：俗称锁🔒)</h4>
<ul>
<li>
<p>需要被同步的代码，操作共享数据的代码即为需要被同步的代码。</p>
</li>
<li>
<p>任何object都可以充当锁，所有线程必须使用同样的锁。</p>
</li>
</ul>
<p>缺点： 只可以单线程执行，其他线程等待，效率低。</p>
<p><strong>extends Threads 同步代码块</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">class</span> <span class="nc">Window1</span> <span class="kd">extends</span> <span class="n">Threads</span> <span class="o">{</span>
<span class="ln"> 2</span>  <span class="o">...</span>
<span class="ln"> 3</span>    <span class="c1">// private static Object = new Object;
</span><span class="ln"> 4</span><span class="c1"></span>    <span class="n">pulic</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln"> 5</span>        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 6</span>          <span class="c1">//synchronized (obj) 新建一个静态对象来充当锁
</span><span class="ln"> 7</span><span class="c1"></span>            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">Window1</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span> <span class="c1">//同步代码块监视器：Window1.class
</span><span class="ln"> 8</span><span class="c1"></span>              <span class="c1">//类也是一种对象，直接用类来充当锁，只会加载一次。
</span><span class="ln"> 9</span><span class="c1"></span>              <span class="o">....</span>
<span class="ln">10</span>            <span class="o">}</span>
<span class="ln">11</span>        <span class="o">}</span>
<span class="ln">12</span>  <span class="o">}</span>
</code></pre></div><p><strong>implements Runnable 同步代码块</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">class</span> <span class="nc">Window2</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
<span class="ln"> 2</span>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">tickets</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span>
<span class="ln"> 3</span>
<span class="ln"> 4</span>    <span class="nd">@Override</span>
<span class="ln"> 5</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln"> 6</span>        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 7</span>            <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span> <span class="c1">//同步代码块监视器：this 表示使用当前对象Window2 充当线程锁
</span><span class="ln"> 8</span><span class="c1"></span>                <span class="k">if</span> <span class="o">(</span><span class="n">tickets</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 9</span>                    <span class="k">try</span> <span class="o">{</span>
<span class="ln">10</span>                        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">100</span><span class="o">);</span>
<span class="ln">11</span>                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">12</span>                        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">13</span>                    <span class="o">}</span>
<span class="ln">14</span>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34; has sold ticket No : &#34;</span> <span class="o">+</span> <span class="n">tickets</span><span class="o">);</span>
<span class="ln">15</span>                    <span class="n">tickets</span><span class="o">--;</span>
<span class="ln">16</span>                <span class="o">}</span> <span class="k">else</span> <span class="k">break</span><span class="o">;</span>
<span class="ln">17</span>            <span class="o">}</span>
<span class="ln">18</span>        <span class="o">}</span>
<span class="ln">19</span>    <span class="o">}</span>
<span class="ln">20</span><span class="o">}</span>
</code></pre></div><p>Result:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">Window_1</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">100</span>
<span class="ln">2</span><span class="n">Window_1</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">99</span>
<span class="ln">3</span><span class="n">Window_1</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">98</span>
<span class="ln">4</span>  <span class="o">...</span>
<span class="ln">5</span><span class="n">Window_1</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">2</span>
<span class="ln">6</span><span class="n">Window_1</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">1</span>
</code></pre></div><h4 id="同步方法">同步方法</h4>
<p><strong>extends Thread 同步方法</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">class</span> <span class="nc">Window3</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
<span class="ln"> 2</span>    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">tickets</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span>
<span class="ln"> 3</span>
<span class="ln"> 4</span>    <span class="nd">@Override</span>
<span class="ln"> 5</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln"> 6</span>        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 7</span>            <span class="n">show</span><span class="o">();</span> <span class="c1">// 调用静态方法
</span><span class="ln"> 8</span><span class="c1"></span>            <span class="o">}</span>
<span class="ln"> 9</span>        <span class="o">}</span>
<span class="ln">10</span>
<span class="ln">11</span>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">show</span><span class="o">()</span> <span class="o">{</span> <span class="c1">// 同步方法监视器：this
</span><span class="ln">12</span><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">tickets</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">13</span>            <span class="k">try</span> <span class="o">{</span>
<span class="ln">14</span>                <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">100</span><span class="o">);</span>
<span class="ln">15</span>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">16</span>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">17</span>            <span class="o">}</span>
<span class="ln">18</span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34; has sold ticket No : &#34;</span> <span class="o">+</span> <span class="n">tickets</span><span class="o">);</span>
<span class="ln">19</span>            <span class="n">tickets</span><span class="o">--;</span>
<span class="ln">20</span>        <span class="o">}</span>
<span class="ln">21</span>    <span class="o">}</span>
<span class="ln">22</span><span class="o">}</span>
</code></pre></div><p><strong>implements Runnable 同步方法</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">class</span> <span class="nc">Window4</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
<span class="ln"> 2</span>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">tickets</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span>
<span class="ln"> 3</span>
<span class="ln"> 4</span>    <span class="nd">@Override</span>
<span class="ln"> 5</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln"> 6</span>        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 7</span>            <span class="n">show</span><span class="o">();</span> <span class="c1">// 调用方法
</span><span class="ln"> 8</span><span class="c1"></span>        <span class="o">}</span>
<span class="ln"> 9</span>    <span class="o">}</span>
<span class="ln">10</span>
<span class="ln">11</span>    <span class="kd">private</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">show</span><span class="o">()</span> <span class="o">{</span> <span class="c1">//同步方法监视器：Window4.class
</span><span class="ln">12</span><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">tickets</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">13</span>            <span class="k">try</span> <span class="o">{</span>
<span class="ln">14</span>                <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">100</span><span class="o">);</span>
<span class="ln">15</span>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">16</span>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">17</span>            <span class="o">}</span>
<span class="ln">18</span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34; has sold ticket No : &#34;</span> <span class="o">+</span> <span class="n">tickets</span><span class="o">);</span>
<span class="ln">19</span>            <span class="n">tickets</span><span class="o">--;</span>
<span class="ln">20</span>        <span class="o">}</span>
<span class="ln">21</span>    <span class="o">}</span>
<span class="ln">22</span><span class="o">}</span>
</code></pre></div><p>懒汉式线程安全</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kn">package</span> <span class="nn">BankTest</span><span class="o">;</span>
<span class="ln"> 2</span>
<span class="ln"> 3</span><span class="c1">//懒汉式线程安全
</span><span class="ln"> 4</span><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BankTest1</span> <span class="o">{</span>
<span class="ln"> 5</span><span class="o">}</span>
<span class="ln"> 6</span>
<span class="ln"> 7</span><span class="kd">class</span> <span class="nc">Bank</span> <span class="o">{</span>
<span class="ln"> 8</span>    <span class="kd">private</span> <span class="nf">Bank</span><span class="o">(){}</span>
<span class="ln"> 9</span>
<span class="ln">10</span>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Bank</span> <span class="n">instance</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="ln">11</span>
<span class="ln">12</span>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">Bank</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">13</span>      <span class="c1">//先判断instance 是否等于 null，可以减少多线程重复判断问题，提升效率
</span><span class="ln">14</span><span class="c1"></span>        <span class="k">if</span><span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> 
<span class="ln">15</span>            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">Bank</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">16</span>                <span class="k">if</span><span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bank</span><span class="o">();</span>
<span class="ln">17</span>            <span class="o">}</span>
<span class="ln">18</span>        <span class="o">}</span>
<span class="ln">19</span>        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
<span class="ln">20</span>    <span class="o">}</span>
<span class="ln">21</span><span class="o">}</span>
</code></pre></div><h3 id="deadlock-死锁">Deadlock 死锁</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kn">package</span> <span class="nn">BankTest</span><span class="o">;</span>
<span class="ln"> 2</span>
<span class="ln"> 3</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadTest</span> <span class="o">{</span>
<span class="ln"> 4</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 5</span>        <span class="n">StringBuffer</span> <span class="n">s1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>
<span class="ln"> 6</span>        <span class="n">StringBuffer</span> <span class="n">s2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>
<span class="ln"> 7</span>
<span class="ln"> 8</span>      <span class="c1">// thread1先拿锁s1然后sleep 0.1s，然后换锁s2 
</span><span class="ln"> 9</span><span class="c1"></span>        <span class="k">new</span> <span class="n">Thread</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">10</span>            <span class="nd">@Override</span>
<span class="ln">11</span>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">12</span>                <span class="kd">synchronized</span> <span class="o">(</span><span class="n">s1</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">13</span>                    <span class="n">s1</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">);</span>
<span class="ln">14</span>                    <span class="n">s2</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;1&#34;</span><span class="o">);</span>
<span class="ln">15</span>
<span class="ln">16</span>                    <span class="k">try</span> <span class="o">{</span>
<span class="ln">17</span>                        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">100</span><span class="o">);</span>
<span class="ln">18</span>                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">19</span>                        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">20</span>                    <span class="o">}</span>
<span class="ln">21</span>
<span class="ln">22</span>                    <span class="kd">synchronized</span> <span class="o">(</span><span class="n">s2</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">23</span>                        <span class="n">s1</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;b&#34;</span><span class="o">);</span>
<span class="ln">24</span>                        <span class="n">s2</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;2&#34;</span><span class="o">);</span>
<span class="ln">25</span>
<span class="ln">26</span>                        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span><span class="o">);</span>
<span class="ln">27</span>                        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s2</span><span class="o">);</span>
<span class="ln">28</span>                    <span class="o">}</span>
<span class="ln">29</span>                <span class="o">}</span>
<span class="ln">30</span>            <span class="o">}</span>
<span class="ln">31</span>        <span class="o">}.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">32</span>      <span class="c1">// thread2 先拿锁s2 然后sleep 0.1s 然后换锁s1
</span><span class="ln">33</span><span class="c1"></span>      <span class="c1">// 等两个线程苏醒后，都拿不到彼此想要的锁，就变成了死锁
</span><span class="ln">34</span><span class="c1"></span>        <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">35</span>            <span class="nd">@Override</span>
<span class="ln">36</span>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">37</span>                <span class="kd">synchronized</span> <span class="o">(</span><span class="n">s2</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">38</span>                    <span class="n">s1</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;c&#34;</span><span class="o">);</span>
<span class="ln">39</span>                    <span class="n">s2</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;3&#34;</span><span class="o">);</span>
<span class="ln">40</span>
<span class="ln">41</span>                    <span class="k">try</span> <span class="o">{</span>
<span class="ln">42</span>                        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">100</span><span class="o">);</span>
<span class="ln">43</span>                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">44</span>                        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">45</span>                    <span class="o">}</span>
<span class="ln">46</span>
<span class="ln">47</span>                    <span class="kd">synchronized</span> <span class="o">(</span><span class="n">s1</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">48</span>                        <span class="n">s1</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;d&#34;</span><span class="o">);</span>
<span class="ln">49</span>                        <span class="n">s2</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;4&#34;</span><span class="o">);</span>
<span class="ln">50</span>
<span class="ln">51</span>                        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span><span class="o">);</span>
<span class="ln">52</span>                        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s2</span><span class="o">);</span>
<span class="ln">53</span>                    <span class="o">}</span>
<span class="ln">54</span>                <span class="o">}</span>
<span class="ln">55</span>            <span class="o">}</span>
<span class="ln">56</span>        <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
<span class="ln">57</span>    <span class="o">}</span>
<span class="ln">58</span><span class="o">}</span>
<span class="ln">59</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Java Annotation</title>
			<link>https://daiwei.dev/posts/javaannotation/</link>
			<pubDate>Wed, 20 Oct 2021 17:26:19 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/javaannotation/</guid>
			<description>The predefined annotation types defined in java.lang are @Deprecated, @Override, and @SuppressWarnings.
@Deprecated注释表示被标记的元素已被弃用，不应再使用。每当程序使用带有@Deprecated注释的方法、类或字段时，编译器都会生成警告
@Override注释通知编译器该元素旨在覆盖超类中声明的元素。覆盖方法将在接口和继承中讨论 。虽然在覆盖方法时不需要使用此注释，但它有助于防止错误。如果标记为 的方法@Override未能正确覆盖其超类之一中的方法，则编译器会生成错误
@SuppressWarnings注释告诉编译器抑制它会生成的特定警告。
使用 annotation 注释并不是必须的，没有使用 annotation 并不会影响程序的任何功能。
但是如果你使用@Override注释一个方法但你没有覆盖任何东西，编译器会提示bug, 这是一个低成本高效率增加代码可维护性的方法，非常推荐使用。
从 Java SE 8 版本开始，注释也可以应用于任何类型的 use。这意味着可以在使用类型的任何地方使用注释。使用类型的一些示例是类实例创建表达式 ( new)、强制转换、implements子句和throws子句。创建类型注释是为了支持改进的 Java 程序分析方法，以确保更强大的类型检查。
1@Entity 2 3@Override 4void mySuperMethod() { ... } 5 6@Author( 7 name = &amp;#34;Benjamin Franklin&amp;#34;, 8 date = &amp;#34;3/27/2003&amp;#34; 9) 10class MyClass { ... } 11 12//If only one element named value, then the name can be omitted 13@SuppressWarnings(value = &amp;#34;unchecked&amp;#34;) 14void myMethod() { .</description>
			<content type="html"><![CDATA[<p>The predefined <a href="https://docs.oracle.com/javase/tutorial/java/annotations/index.html">annotation</a> types defined in <code>java.lang</code> are <strong><code>@Deprecated</code>, <code>@Override</code>, and <code>@SuppressWarnings</code></strong>.</p>
<p><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Deprecated.html"><code>@Deprecated</code></a>注释表示被标记的元素已被<em>弃用</em>，不应再使用。每当程序使用带有<code>@Deprecated</code>注释的方法、类或字段时，编译器都会生成警告</p>
<p><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Override.html"><code>@Override</code></a>注释通知编译器该元素旨在覆盖超类中声明的元素。覆盖方法将在<a href="https://docs.oracle.com/javase/tutorial/java/IandI/index.html">接口和继承中</a>讨论 。虽然在覆盖方法时不需要使用此注释，但它有助于防止错误。如果标记为 的方法<code>@Override</code>未能正确覆盖其超类之一中的方法，则编译器会生成错误</p>
<p><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/SuppressWarnings.html"><code>@SuppressWarnings</code></a>注释告诉编译器抑制它会生成的特定警告。</p>
<p>使用 annotation 注释并不是必须的，没有使用 annotation 并不会影响程序的任何功能。</p>
<p>但是如果你使用<code>@Override</code>注释一个方法但你没有覆盖任何东西，编译器会提示bug, 这是一个低成本高效率增加代码可维护性的方法，非常推荐使用。</p>
<p>从 Java SE 8 版本开始，注释也可以应用于任何<em>类型的 use</em>。这意味着可以在使用类型的任何地方使用注释。使用类型的一些示例是类实例创建表达式 ( <code>new</code>)、强制转换、<code>implements</code>子句和<code>throws</code>子句。创建类型注释是为了支持改进的 Java 程序分析方法，以确保更强大的类型检查。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="nd">@Entity</span>
<span class="ln"> 2</span>
<span class="ln"> 3</span><span class="nd">@Override</span>
<span class="ln"> 4</span><span class="kt">void</span> <span class="nf">mySuperMethod</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
<span class="ln"> 5</span>
<span class="ln"> 6</span><span class="nd">@Author</span><span class="o">(</span>
<span class="ln"> 7</span>   <span class="n">name</span> <span class="o">=</span> <span class="s">&#34;Benjamin Franklin&#34;</span><span class="o">,</span>
<span class="ln"> 8</span>   <span class="n">date</span> <span class="o">=</span> <span class="s">&#34;3/27/2003&#34;</span>
<span class="ln"> 9</span><span class="o">)</span>
<span class="ln">10</span><span class="kd">class</span> <span class="nc">MyClass</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
<span class="ln">11</span>
<span class="ln">12</span><span class="c1">//If only one element named value, then the name can be omitted
</span><span class="ln">13</span><span class="c1"></span><span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;unchecked&#34;</span><span class="o">)</span>
<span class="ln">14</span><span class="kt">void</span> <span class="nf">myMethod</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
<span class="ln">15</span>
<span class="ln">16</span><span class="c1">//multiple annotations on the same declarati
</span><span class="ln">17</span><span class="c1"></span><span class="nd">@Author</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;Jane Doe&#34;</span><span class="o">)</span>
<span class="ln">18</span><span class="nd">@EBook</span>
<span class="ln">19</span><span class="kd">class</span> <span class="nc">MyClass</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
<span class="ln">20</span>
<span class="ln">21</span><span class="c1">//Type cast
</span><span class="ln">22</span><span class="c1"></span><span class="n">myString</span> <span class="o">=</span> <span class="o">(</span><span class="nd">@NonNull</span> <span class="n">String</span><span class="o">)</span> <span class="n">str</span><span class="o">;</span>
<span class="ln">23</span>
<span class="ln">24</span><span class="c1">//implements clause:
</span><span class="ln">25</span><span class="c1"></span><span class="kd">class</span> <span class="nc">UnmodifiableList</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">implements</span>
<span class="ln">26</span>    <span class="nd">@Readonly</span> <span class="n">List</span><span class="o">&lt;</span><span class="nd">@Readonly</span> <span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
<span class="ln">27</span>
<span class="ln">28</span><span class="c1">//Thrown exception declaration:
</span><span class="ln">29</span><span class="c1"></span><span class="kt">void</span> <span class="nf">monitorTemperature</span><span class="o">()</span> <span class="kd">throws</span>
<span class="ln">30</span>    <span class="nd">@Critical</span> <span class="n">TemperatureException</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
<span class="ln">31</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Java Threads</title>
			<link>https://daiwei.dev/posts/javathread/</link>
			<pubDate>Wed, 20 Oct 2021 11:37:08 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/javathread/</guid>
			<description>1Module java.base 2Package java.lang 3 4java.lang.Object 5java.lang.Thread 6 7public class Thread 8extends Object 9implements Runnable What are Threads in Java? A thread, in the context of Java, is the path followed when executing a program. All Java programs have at least one thread, known as the main thread, which is created by the Java Virtual Machine (JVM) at the program’s start, when the main() method is invoked with the main thread.</description>
			<content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">Module</span> <span class="n">java</span><span class="o">.</span><span class="na">base</span>
<span class="ln">2</span><span class="n">Package</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span>
<span class="ln">3</span>
<span class="ln">4</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Object</span>
<span class="ln">5</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span>
<span class="ln">6</span>  
<span class="ln">7</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Thread</span>
<span class="ln">8</span><span class="kd">extends</span> <span class="n">Object</span>
<span class="ln">9</span><span class="kd">implements</span> <span class="n">Runnable</span>
</code></pre></div><h2 id="what-are-threads-in-java"><strong>What are Threads in Java?</strong></h2>
<p>A thread, in the context of Java, is the path followed when executing a program. All Java programs have at least one thread, known as the <strong>main thread</strong>, which is created by the Java Virtual Machine (JVM) at the program’s start, when the <strong><code>main()</code></strong> method is invoked with the main thread.</p>
<ul>
<li>
<p><strong>Program</strong> 程序是指为了完成特定任务，用某一种言语编写的静态代码指令集合。例: 360安全卫士。</p>
</li>
<li>
<p><strong>Process</strong> 进程是指程序的一次执行的动态过程，它有自己的开始，运行，停止生命周期。系统会为每个进程分配不一样的内存区域。 例: 打开运行360安全卫士，系统就会360卫士的运行进程分配内存空间。</p>
</li>
<li>
<p><strong>Thread</strong> 线程是程序的最小执行单位，是程序内部的一条执行路径。在 Java 里所有program 都至少有一个 thread，比如 <code>main()</code> thread 它是 JVM 在所有程序开始时创建的。</p>
<ul>
<li>实际上一个Java.exe程序至少有三个线程：<strong><code>main()</code>主线程</strong>，<strong><code>gc</code>垃圾回收线程</strong> 和 <strong>异常处理线程</strong>。</li>
<li>线程作为调度和执行单位，每个线程都有独立的运行stack 和 pc (程序计数器)。一个进程可以同时执行多个线. 程，就是多线程，多线程之间可以共享相同的内存单元和地址。</li>
<li>例: 同时运行360卫士的电脑体检，木马查杀，垃圾清理三个任务，相当于3线程同时进行。</li>
</ul>
<p><strong>简单的说：程序是静态代码指令集合，进程是动态正在运行的程序，线程是进程的最小执行单位。</strong></p>
</li>
</ul>
<p>In Java, creating a thread is accomplished by **implementing an interface **and <strong>extending a class</strong>. Every Java thread is created and controlled by the <strong><code>java.lang.Thread</code></strong> class.</p>
<ul>
<li>
<p><strong>并行</strong> 多个CPU同时执行多个任务。</p>
</li>
<li>
<p><strong>并发</strong> 一个CPU同时（时间片）执行多个任务。</p>
</li>
</ul>
<p><img src="https://lh4.googleusercontent.com/oR0_liUxjMnfgFS-fSuc0x2vCCPLQ0Vdw6w2rBVGloaE_84tRNprqNJEJiyI1unMY8Vpj2CDK9GiQGy03_RmteRz-aM31iIQcZsVZhIH2cLrne_5nY9miXKDmQqEHdY60_WopC0" alt="JavaMadeSoEasy.com (JMSE): Thread states/ Thread life cycle in java"></p>
<h3 id="there-are-two-ways-to-create-a-thread-in-java">There are two ways to create a thread in Java:</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="c1">// Method 1: Thread creation by extending Thread class
</span><span class="ln"> 2</span><span class="c1"></span><span class="kd">class</span> <span class="nc">MultithreadingDemo</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
<span class="ln"> 3</span>    <span class="nd">@Override</span>
<span class="ln"> 4</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(){</span>
<span class="ln"> 5</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span><span class="c1">//显示当前线程name
</span><span class="ln"> 6</span><span class="c1"></span>    <span class="o">}</span>
<span class="ln"> 7</span>  
<span class="ln"> 8</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 9</span>        <span class="n">MultithreadingDemo</span> <span class="n">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MultithreadingDemo</span><span class="o">();</span>
<span class="ln">10</span>        <span class="n">obj</span><span class="o">.</span><span class="na">start</span><span class="o">();</span> <span class="c1">// 如果调用obj.run()不行启用新的线程，只会在main线程执行run()方法.
</span><span class="ln">11</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
<span class="ln">12</span>    <span class="o">}</span>
<span class="ln">13</span><span class="o">}</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="c1">// Method 2: Thread creation by implementing Runnable Interface
</span><span class="ln"> 2</span><span class="c1"></span><span class="kd">class</span> <span class="nc">MultithreadingDemo</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span> 
<span class="ln"> 3</span>    <span class="nd">@Override</span>
<span class="ln"> 4</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(){</span>  
<span class="ln"> 5</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span> <span class="c1">//显示当前线程name
</span><span class="ln"> 6</span><span class="c1"></span>    <span class="o">}</span>   
<span class="ln"> 7</span>  
<span class="ln"> 8</span>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>  
<span class="ln"> 9</span>     <span class="n">MultithreadingDemo</span> <span class="n">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MultithreadingDemo</span><span class="o">();</span>  
<span class="ln">10</span>     <span class="n">Thread</span> <span class="n">tobj</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>  
<span class="ln">11</span>     <span class="n">tobj</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>  
<span class="ln">12</span>     <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
<span class="ln">13</span>    <span class="o">}</span>  
<span class="ln">14</span><span class="o">}</span>
</code></pre></div><h3 id="extends-threads-vs-implements-runnable">extends Threads vs implements Runnable</h3>
<p><img src="https://i.stack.imgur.com/vLRdp.gif" alt="enter image description here"></p>
<ul>
<li>Something that can run inside a Thread (Runnable).</li>
<li>Something That can start a new Thread (Thread).</li>
</ul>
<p><strong><code>implements Runnable</code></strong> is the preferred way, it means you can <code>implement Runnable</code> and extend from another class as well.</p>
<p>使用 <strong>Runable</strong> 接口的同时，你还可以继承其他类。但是使用<strong>extends Threads</strong>就无法再继承其他类了。</p>
<p><strong>Inherit less, interface more,</strong> only use inherit when you need override some behavior.</p>
<p>少继承，多接口。只有在你需要重写某些行为时才使用基础。</p>
<p>Multi-threads Ticket system 多线程卖票案例</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WindowTest1</span> <span class="o">{</span>
<span class="ln"> 2</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 3</span>        <span class="n">Window1</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Window1</span><span class="o">();</span>
<span class="ln"> 4</span>        <span class="n">Window1</span> <span class="n">t2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Window1</span><span class="o">();</span>
<span class="ln"> 5</span>        <span class="n">Window1</span> <span class="n">t3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Window1</span><span class="o">();</span>
<span class="ln"> 6</span>
<span class="ln"> 7</span>        <span class="n">t1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Window_1&#34;</span><span class="o">);</span>
<span class="ln"> 8</span>        <span class="n">t2</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Window_2&#34;</span><span class="o">);</span>
<span class="ln"> 9</span>        <span class="n">t3</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Window_3&#34;</span><span class="o">);</span>
<span class="ln">10</span>
<span class="ln">11</span>        <span class="n">t1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">12</span>        <span class="n">t2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">13</span>        <span class="n">t3</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">14</span>    <span class="o">}</span>
<span class="ln">15</span><span class="o">}</span>
<span class="ln">16</span>
<span class="ln">17</span><span class="kd">class</span> <span class="nc">Window1</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
<span class="ln">18</span>  <span class="c1">//if not use static, all 3 every threads will have their own 100 tickets.
</span><span class="ln">19</span><span class="c1"></span>    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">tickets</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span> 
<span class="ln">20</span>  
<span class="ln">21</span>    <span class="nd">@Override</span>
<span class="ln">22</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">23</span>        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">24</span>            <span class="k">if</span><span class="o">(</span><span class="n">tickets</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">25</span>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">getName</span><span class="o">()+</span> <span class="s">&#34; Sold ticket No: &#34;</span> <span class="o">+</span> <span class="n">tickets</span><span class="o">);</span>
<span class="ln">26</span>                <span class="n">tickets</span><span class="o">--;</span>
<span class="ln">27</span>            <span class="o">}</span> <span class="k">else</span> <span class="k">break</span><span class="o">;</span>
<span class="ln">28</span>        <span class="o">}</span>
<span class="ln">29</span>    <span class="o">}</span>
<span class="ln">30</span><span class="o">}</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WindowTest2</span> <span class="o">{</span>
<span class="ln"> 2</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 3</span>        <span class="n">Window2</span> <span class="n">w</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Window2</span><span class="o">();</span>
<span class="ln"> 4</span>
<span class="ln"> 5</span>        <span class="n">Thread</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span> <span class="o">(</span><span class="n">w</span><span class="o">);</span>
<span class="ln"> 6</span>        <span class="n">Thread</span> <span class="n">t2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span> <span class="o">(</span><span class="n">w</span><span class="o">);</span>
<span class="ln"> 7</span>        <span class="n">Thread</span> <span class="n">t3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span> <span class="o">(</span><span class="n">w</span><span class="o">);</span>
<span class="ln"> 8</span>
<span class="ln"> 9</span>        <span class="n">t1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Window_1&#34;</span><span class="o">);</span>
<span class="ln">10</span>        <span class="n">t2</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Window_2&#34;</span><span class="o">);</span>
<span class="ln">11</span>        <span class="n">t3</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Window_3&#34;</span><span class="o">);</span>
<span class="ln">12</span>
<span class="ln">13</span>        <span class="n">t1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">14</span>        <span class="n">t2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">15</span>        <span class="n">t3</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">16</span>    <span class="o">}</span>
<span class="ln">17</span><span class="o">}</span>
<span class="ln">18</span>
<span class="ln">19</span><span class="kd">class</span> <span class="nc">Window2</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
<span class="ln">20</span>  <span class="c1">// implenments Runnable means all 3 threads are inherit from 1 object
</span><span class="ln">21</span><span class="c1"></span>  <span class="c1">// so they will share the 100 tickets, no need use modifier static
</span><span class="ln">22</span><span class="c1"></span>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">tickets</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span>
<span class="ln">23</span>
<span class="ln">24</span>    <span class="nd">@Override</span>
<span class="ln">25</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">26</span>        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">27</span>            <span class="k">if</span><span class="o">(</span><span class="n">tickets</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">28</span>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34; has sold ticket No : &#34;</span> <span class="o">+</span> <span class="n">tickets</span><span class="o">);</span>
<span class="ln">29</span>                <span class="n">tickets</span><span class="o">--;</span>
<span class="ln">30</span>            <span class="o">}</span> <span class="k">else</span> <span class="k">break</span><span class="o">;</span>
<span class="ln">31</span>        <span class="o">}</span>
<span class="ln">32</span>    <span class="o">}</span>
<span class="ln">33</span><span class="o">}</span>
</code></pre></div><h3 id="为什么要调用start不直接调用run方法">为什么要调用<code>start()</code>不直接调用<code>run()</code>方法?</h3>
<p>如果直接调用这些线程的 run() 方法，则所有线程的执行都由同一个当前线程处理，不会发生多线程. 当通过 start() 方法调用 <code>run()</code> 方法时，就会分配一个新的单独线程来执行 <code>run()</code> 方法，因此如果有多个线程调用 start() 方法，多线程就行同时运行。</p>
<p><strong>直接调用<code>run()</code>方法</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RunMethodExample</span> <span class="kd">implements</span> <span class="n">Runnable</span><span class="o">{</span>
<span class="ln"> 2</span>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(){</span>  
<span class="ln"> 3</span>      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">3</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>  
<span class="ln"> 4</span>	<span class="k">try</span><span class="o">{</span>
<span class="ln"> 5</span>              <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">1000</span><span class="o">);</span>
<span class="ln"> 6</span>	   <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">InterruptedException</span> <span class="n">ie</span><span class="o">){</span>
<span class="ln"> 7</span>		<span class="n">ie</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln"> 8</span>	    <span class="o">}</span>  
<span class="ln"> 9</span>	 <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>  
<span class="ln">10</span>      <span class="o">}</span>  
<span class="ln">11</span>   <span class="o">}</span>  
<span class="ln">12</span>   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[]){</span>  
<span class="ln">13</span>      <span class="n">Thread</span> <span class="n">th1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">RunMethodExample</span><span class="o">(),</span> <span class="s">&#34;th1&#34;</span><span class="o">);</span>
<span class="ln">14</span>      <span class="n">Thread</span> <span class="n">th2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">RunMethodExample</span><span class="o">(),</span> <span class="s">&#34;th2&#34;</span><span class="o">);</span> 
<span class="ln">15</span>      <span class="n">th1</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>  
<span class="ln">16</span>      <span class="n">th2</span><span class="o">.</span><span class="na">run</span><span class="o">();</span> 
<span class="ln">17</span>   <span class="o">}</span>
<span class="ln">18</span><span class="o">}</span>
</code></pre></div><p>output</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">1</span>
<span class="ln">2</span><span class="n">2</span>
<span class="ln">3</span><span class="n">3</span>
<span class="ln">4</span><span class="n">1</span>
<span class="ln">5</span><span class="n">2</span>
<span class="ln">6</span><span class="n">3</span>
</code></pre></div><p><strong>调用<code>start()</code>方法</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RunMethodExample2</span> <span class="o">{</span>
<span class="ln"> 2</span>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(){</span>  
<span class="ln"> 3</span>     <span class="o">...</span>
<span class="ln"> 4</span>   <span class="o">}</span>  
<span class="ln"> 5</span>   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[]){</span>  
<span class="ln"> 6</span>      <span class="n">Thread</span> <span class="n">th1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">RunMethodExample</span><span class="o">(),</span> <span class="s">&#34;th1&#34;</span><span class="o">);</span>
<span class="ln"> 7</span>      <span class="n">Thread</span> <span class="n">th2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">RunMethodExample</span><span class="o">(),</span> <span class="s">&#34;th2&#34;</span><span class="o">);</span> 
<span class="ln"> 8</span>      <span class="n">th1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>  
<span class="ln"> 9</span>      <span class="n">th2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span> 
<span class="ln">10</span>   <span class="o">}</span>
<span class="ln">11</span><span class="o">}</span>
</code></pre></div><p>output</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">1</span>
<span class="ln">2</span><span class="n">1</span>
<span class="ln">3</span><span class="n">2</span>
<span class="ln">4</span><span class="n">2</span>
<span class="ln">5</span><span class="n">3</span>
<span class="ln">6</span><span class="n">3</span>
</code></pre></div><h3 id="可以在-java-中启动一个线程两次吗">可以在 Java 中启动一个线程两次吗？</h3>
<p>不可以，线程一旦启动，就不能再启动。这样做会抛出一个<code>IllegalThreadStateException</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>  
<span class="ln">2</span>	<span class="n">Thread</span> <span class="n">th1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">ThreadTwiceExample</span><span class="o">(),</span> <span class="s">&#34;th1&#34;</span><span class="o">);</span> 
<span class="ln">3</span>	<span class="n">th1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>  
<span class="ln">4</span>	<span class="n">th1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>  
<span class="ln">5</span><span class="o">}</span>
</code></pre></div><p>ouput:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">Exception</span> <span class="n">in</span> <span class="n">thread</span> <span class="s">&#34;main&#34;</span> <span class="n">th1</span> <span class="n">is</span> <span class="n">executing</span><span class="o">.</span>
<span class="ln">2</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">IllegalThreadStateException</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Java threadpool</title>
			<link>https://daiwei.dev/posts/javathreadpool/</link>
			<pubDate>Wed, 20 Oct 2021 11:18:55 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/javathreadpool/</guid>
			<description>What is the Thread Pool in Java? As the name suggests, the thread pool in Java is actually a pool of Threads. In a simple sense, it contains a group of worker threads that are waiting for the job to be granted. They are reused in the whole process.
In a Thread Pool, a group of fixed size threads is created. Whenever a task has to be granted, one of the threads is pulled out and assigned that task by the service provider, as soon as the job is completed the thread is returned back to the thread pool.</description>
			<content type="html"><![CDATA[<h2 id="what-is-the-thread-pool-in-java"><strong>What is the Thread Pool in Java?</strong></h2>
<p>As the name suggests, the thread pool in Java is actually a pool of <a href="https://www.edureka.co/blog/java-thread/">Threads</a>. In a simple sense, it contains a group of worker threads that are waiting for the job to be granted. They are reused in the whole process.</p>
<p>In a Thread Pool, a group of fixed size threads is created. Whenever a task has to be granted, one of the threads is pulled out and assigned that task by the service provider, as soon as the job is completed the thread is returned back to the thread pool. Thread pool is preferably used because active threads consume system resources, when is JVM creates too many threads at the same time, the system could run out of memory. Hence the number of threads to be created has to be limited. Therefore the concept of the thread pool is preferred!</p>
<p>线程池顾名思义就是一个包含很多线程的池子，这个池子里的线程都是可复用的，使用线程池是为了降低系统内存的消耗。</p>
<h2 id="advantages-of-a-thread-pool"><strong>Advantages of a Thread Pool</strong></h2>
<ul>
<li>
<p>Better performance</p>
</li>
<li>
<p>Saves time</p>
</li>
<li>
<p>No need to create a thread again and again</p>
</li>
<li>
<p>Easy to access</p>
</li>
<li>
<p>Real-time usage</p>
<p>使用线程池的优点：不用重复创造线程，节省时间，提高性能，方便访问和使用。</p>
</li>
</ul>
<h2 id="disadvantages-of-the-thread-pool"><strong>Disadvantages of the Thread Pool</strong></h2>
<ul>
<li>
<p>There is no control over the priority and state of the thread you are working with.</p>
</li>
<li>
<p>There is no stable identity given to the thread, no track can be kept.</p>
</li>
<li>
<p>When there is a high demand for the thread pool, the process may be deleted.</p>
</li>
<li>
<p>The thread pool can not work well when two threads are working in parallel.</p>
</li>
<li>
<p>There are several situations where the application code can be affected by another application code, despite robust application isolation.</p>
<p>线程池的缺点：无法控制线程的优先级，无法追踪线程，无法很好的执行并行线程工作。</p>
</li>
</ul>
<h2 id="risk-in-the-java-thread-pool"><strong>Risk in the Java Thread Pool</strong></h2>
<p>There are a few risks while you are dealing with the thread pool, like;</p>
<ul>
<li>
<p><strong>Thread Leakage:</strong> If a thread is removed from the pool to perform a task but not returned back to it when the task is completed, thread leakage occurs.</p>
<p>**线程泄漏：**如果线程被从池中移除以执行任务但在任务完成时没有返回到它，则发生线程泄漏。</p>
</li>
<li>
<p><strong>Deadlock:</strong> In thread pool is executing thread is waiting for the output from the block the thread waiting in the queue due to unavailability of thread for execution, there’s a case of a deadlock.</p>
<p>**死锁：**在线程池中正在执行线程正在等待块的输出由于线程不可用而在队列中等待的线程执行，存在死锁的情况。</p>
</li>
<li>
<p><strong>Resource Thrashing:</strong> More number of threads than the optimal number required can cause starvation problems leading to resource thrashing.</p>
<p>**资源抖动：**线程数超过所需的最佳数量会导致饥饿问题，从而导致资源抖动。</p>
</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>arrayList vs linkedList</title>
			<link>https://daiwei.dev/posts/arraylistvslinkedlist/</link>
			<pubDate>Wed, 20 Oct 2021 11:11:34 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/arraylistvslinkedlist/</guid>
			<description>ArrayList vs LinkedList   ArrayList 底层是数组,内存地址连续可随机访问元素，查询快O(1), ArrayList 动态扩容和元素拷贝 增删慢, 实现了List 接口; LinkedList 底层是链表,内存地址不连续必须按顺序访问元素，查询慢O(N), LinkedList 只需要修改节点指针指向 增删快O(1), 实现List &amp;amp; Deque 接口。   </description>
			<content type="html"><![CDATA[<h2 id="arraylist-vs-linkedlist">ArrayList vs LinkedList</h2>
<p><img src="https://static.studytonight.com/data-structures/images/array-vs-linked-list.png" alt="img"></p>
<blockquote>
<ul>
<li>ArrayList <strong>底层是数组,内存地址连续可随机访问元素，查询快O(1),</strong></li>
<li>ArrayList <strong>动态扩容和元素拷贝 增删慢, 实现了List 接口;</strong></li>
<li>LinkedList <strong>底层是链表,内存地址不连续必须按顺序访问元素，查询慢O(N),</strong></li>
<li>LinkedList <strong>只需要修改节点指针指向 增删快O(1), 实现List &amp; Deque 接口。</strong></li>
</ul>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>LinkedList</title>
			<link>https://daiwei.dev/posts/linkedlist/</link>
			<pubDate>Wed, 20 Oct 2021 11:05:33 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/linkedlist/</guid>
			<description>1Module java.base 2Package java.util 3 4java.lang.Object 5java.util.AbstractCollection&amp;lt;E&amp;gt; 6java.util.AbstractList&amp;lt;E&amp;gt; 7java.util.AbstractSequentialList&amp;lt;E&amp;gt; 8java.util.LinkedList&amp;lt;E&amp;gt; 9 10public class LinkedList&amp;lt;E&amp;gt; 11extends AbstractSequentialList&amp;lt;E&amp;gt; 12implements List&amp;lt;E&amp;gt;, Deque&amp;lt;E&amp;gt;, Cloneable, Serializable 链表以节点为单位，每个元素都是一个独立对象，在内存空间的存储是非连续的。链表的节点对象具有两个成员变量：「值 val」，「后继节点引用 next」 。 可实现Stacks, Queues, and trees等数据结构。
1class ListNode { 2 int val; // 节点值 3 ListNode next; // 后继节点引用 4 ListNode(int x) { val = x; } 5} 和ArrayList 一样，下面两种ArrayList初始化方式都是正确的，List is an interface and LinkedList is a class.
1List&amp;lt;String&amp;gt; list1 = new LinkedList&amp;lt;&amp;gt;(); //generally preferred 2LinkedList&amp;lt;String&amp;gt; list2 = new LinkedList&amp;lt;&amp;gt;(); // type-cast List&amp;lt;E&amp;gt; is more generally preferred over LinkedList&amp;lt;E&amp;gt;, but If needed to add cells in the beginning/middle/end of the list LinkedList proved you addFirst, addLast &amp;amp; removeFirst, removeLast &amp;amp; getFirst, getLast method.</description>
			<content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">Module</span> <span class="n">java</span><span class="o">.</span><span class="na">base</span>
<span class="ln"> 2</span><span class="n">Package</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span>
<span class="ln"> 3</span>
<span class="ln"> 4</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Object</span>
<span class="ln"> 5</span><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">AbstractCollection</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln"> 6</span><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">AbstractList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln"> 7</span><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">AbstractSequentialList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln"> 8</span><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">LinkedList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln"> 9</span>  
<span class="ln">10</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LinkedList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln">11</span><span class="kd">extends</span> <span class="n">AbstractSequentialList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln">12</span><span class="kd">implements</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;,</span> <span class="n">Deque</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;,</span> <span class="n">Cloneable</span><span class="o">,</span> <span class="n">Serializable</span>
</code></pre></div><p><img src="https://img-blog.csdnimg.cn/20190227211326757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NhcnRvb25f,size_16,color_FFFFFF,t_70" alt=""></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/81117006f63098c29cceb5938fdc3199.png" alt="img"></p>
<p>链表以节点为单位，每个元素都是一个独立对象，在内存空间的存储是非连续的。链表的节点对象具有两个成员变量：「值 <code>val</code>」，「后继节点引用 <code>next</code>」 。 可实现Stacks, Queues, and trees等数据结构。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="kd">class</span> <span class="nc">ListNode</span> <span class="o">{</span>
<span class="ln">2</span>    <span class="kt">int</span> <span class="n">val</span><span class="o">;</span>       <span class="c1">// 节点值
</span><span class="ln">3</span><span class="c1"></span>    <span class="n">ListNode</span> <span class="n">next</span><span class="o">;</span> <span class="c1">// 后继节点引用
</span><span class="ln">4</span><span class="c1"></span>    <span class="n">ListNode</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span> <span class="n">val</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span> <span class="o">}</span>
<span class="ln">5</span><span class="o">}</span>
</code></pre></div><p>和ArrayList 一样，下面两种ArrayList初始化方式都是正确的，List is an <strong><code>interface</code></strong> and LinkedList is a <strong><code>class</code></strong>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span> <span class="c1">//generally preferred
</span><span class="ln">2</span><span class="c1"></span><span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span> <span class="c1">// type-cast
</span></code></pre></div><p><code>List&lt;E&gt;</code> is more generally preferred over <code>LinkedList&lt;E&gt;</code>, but If needed to add cells in the beginning/middle/end of the list LinkedList proved you  <em><code>addFirst, addLast &amp; removeFirst, removeLast &amp; getFirst, getLast</code></em> method.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">list2</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">1</span><span class="o">);</span> <span class="c1">// list[1]
</span><span class="ln">2</span><span class="c1"></span><span class="n">list2</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">2</span><span class="o">);</span> <span class="c1">// list[2,1]     
</span><span class="ln">3</span><span class="c1"></span><span class="n">list2</span><span class="o">.</span><span class="na">removeLast</span><span class="o">();</span> <span class="c1">// list[2]
</span><span class="ln">4</span><span class="c1"></span><span class="n">list2</span><span class="o">.</span><span class="na">getFirst</span><span class="o">();</span> <span class="c1">// 2
</span></code></pre></div><h2 id="heading"></h2>
]]></content>
		</item>
		
		<item>
			<title>ArrayList</title>
			<link>https://daiwei.dev/posts/arraylist/</link>
			<pubDate>Wed, 20 Oct 2021 10:52:00 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/arraylist/</guid>
			<description>1Module java.base 2Package java.util 3 4java.lang.Object 5java.util.AbstractCollection&amp;lt;E&amp;gt; 6java.util.AbstractList&amp;lt;E&amp;gt; 7java.util.ArrayList&amp;lt;E&amp;gt; 8 9public class ArrayList&amp;lt;E&amp;gt; 10extends AbstractList&amp;lt;E&amp;gt; 11implements List&amp;lt;E&amp;gt;, RandomAccess, Cloneable, Serializable 下面两种ArrayList初始化方式都是正确的，List is an interface and ArrayList is a class.
1List&amp;lt;Integer&amp;gt; list1 = new ArrayList&amp;lt;&amp;gt;(); //generally preferred 2ArrayList&amp;lt;Integer&amp;gt; list2 = ArrayList&amp;lt;&amp;gt;(); // type-cast  initialize as List&amp;lt;E&amp;gt; 更加灵活flexible, preferable，可以随后选择 LinkedList or ArrayList. initialize as ArrayList&amp;lt;E&amp;gt; 可以访问使用所有的ArrayList class method, such as such as ArrayList#ensureCapacity or ArrayList#trimToSize. 通常情况下，尽量使用方法1 List 来初始化 arrayList.  1List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();// 初始化可变数组 2list.</description>
			<content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">Module</span> <span class="n">java</span><span class="o">.</span><span class="na">base</span>
<span class="ln"> 2</span><span class="n">Package</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span>
<span class="ln"> 3</span>  
<span class="ln"> 4</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Object</span>
<span class="ln"> 5</span><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">AbstractCollection</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln"> 6</span><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">AbstractList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln"> 7</span><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">ArrayList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln"> 8</span>  
<span class="ln"> 9</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln">10</span><span class="kd">extends</span> <span class="n">AbstractList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln">11</span><span class="kd">implements</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;,</span> <span class="n">RandomAccess</span><span class="o">,</span> <span class="n">Cloneable</span><span class="o">,</span> <span class="n">Serializable</span>
</code></pre></div><p><img src="https://img-blog.csdnimg.cn/20190227211326757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NhcnRvb25f,size_16,color_FFFFFF,t_70" alt=""></p>
<p><img src="https://java2blog.com/wp-content/webpc-passthru.php?src=https://java2blog.com/wp-content/uploads/2016/05/ArrayList.jpg&amp;nocache=1" alt="img"></p>
<p>下面两种ArrayList初始化方式都是正确的，List is an <strong><code>interface</code></strong> and ArrayList is a <strong><code>class</code></strong>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span> <span class="c1">//generally preferred
</span><span class="ln">2</span><span class="c1"></span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list2</span> <span class="o">=</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span> <span class="c1">// type-cast
</span></code></pre></div><ul>
<li>initialize as <strong><code>List&lt;E&gt;</code></strong> 更加灵活flexible, preferable，可以随后选择 LinkedList or ArrayList.</li>
<li>initialize as <strong><code>ArrayList&lt;E&gt;</code></strong> 可以访问使用所有的ArrayList class method, such as such as <em><code>ArrayList#ensureCapacity</code></em> or <em><code>ArrayList#trimToSize</code></em>.</li>
<li>通常情况下，尽量使用方法1 <strong>List<!-- raw HTML omitted --></strong> 来初始化 arrayList.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span><span class="c1">// 初始化可变数组
</span><span class="ln">2</span><span class="c1"></span><span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;one&#34;</span><span class="o">);</span> <span class="c1">// list[&#34;one&#34;]
</span><span class="ln">3</span><span class="c1"></span><span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;two&#34;</span><span class="o">);</span> <span class="c1">// list[&#34;one&#34;,&#34;two&#34;]
</span><span class="ln">4</span><span class="c1"></span><span class="n">list</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">0</span><span class="o">);</span> <span class="c1">//list[&#34;two&#34;]
</span><span class="ln">5</span><span class="c1"></span><span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">1</span><span class="o">,</span><span class="n">4</span><span class="o">);</span> <span class="c1">//list[&#34;two&#34;,4]
</span><span class="ln">6</span><span class="c1"></span><span class="kt">boolean</span> <span class="n">a</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">2</span><span class="o">);</span> <span class="c1">//true
</span></code></pre></div><p>ArrayList的 <strong>toArray</strong> 方法返回一个数组, ArrayList的 <strong>asList</strong> 方法返回一个列表.</p>
]]></content>
		</item>
		
		<item>
			<title>i&#43;&#43; vs &#43;&#43;i</title>
			<link>https://daiwei.dev/posts/i&#43;&#43;/</link>
			<pubDate>Wed, 20 Oct 2021 10:20:00 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/i&#43;&#43;/</guid>
			<description>1public class Main { 2 public static void main (String[] args) { 3 int a = 0, b = 0; 4 for (int i = 0; i &amp;lt; 1; i++) { 5 System.out.println(a += i); // a = 0 6 System.out.println(i++); // i++ = 0 7 System.out.println(i); // i = 1 8 } 9 10 for (int i = 0; i &amp;lt; 1; ++i) { 11 System.out.println(b += i); // b = 0 12 System.</description>
			<content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
<span class="ln"> 2</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 3</span>        <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
<span class="ln"> 4</span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
<span class="ln"> 5</span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span> <span class="o">+=</span> <span class="n">i</span><span class="o">);</span> <span class="c1">// a = 0
</span><span class="ln"> 6</span><span class="c1"></span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">++);</span> <span class="c1">// i++ = 0
</span><span class="ln"> 7</span><span class="c1"></span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span> <span class="c1">// i = 1
</span><span class="ln"> 8</span><span class="c1"></span>        <span class="o">}</span>
<span class="ln"> 9</span>
<span class="ln">10</span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">1</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">11</span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span> <span class="o">+=</span> <span class="n">i</span><span class="o">);</span> <span class="c1">// b = 0
</span><span class="ln">12</span><span class="c1"></span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(++</span><span class="n">i</span><span class="o">);</span> <span class="c1">// ++i = 1
</span><span class="ln">13</span><span class="c1"></span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span> <span class="c1">// i = 1
</span><span class="ln">14</span><span class="c1"></span>        <span class="o">}</span>
<span class="ln">15</span>    <span class="o">}</span>
<span class="ln">16</span><span class="o">}</span>
</code></pre></div><p>From the above example we can clear see that, after 1 loop cycle i++ = 0 &amp; ++i = 1，but its not affected the for loop compute, the variables a &amp; b value still equal to 0.</p>
<p>i++ &amp; ++i 只会影响本身单独计算结果 (i++是先print i 的value 再 做加法； ++i 是先做加法再print i 的value），</p>
<p>但不管是 i++ 还是 ++i 都不会影响 for loop 循环的计算结果。</p>
]]></content>
		</item>
		
		<item>
			<title>TI 10</title>
			<link>https://daiwei.dev/posts/ti10/</link>
			<pubDate>Mon, 18 Oct 2021 15:13:13 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/ti10/</guid>
			<description>熬夜看完TI10, Team Spirit vs LGD 的决赛。
首先，恭喜 team spirit 的五位第一次打进ti就成功圆梦举盾的年轻人，这个冠军🏆他们赢得实至名归！
 连续3年了，即使这一次AME背后插上了wings，可全村的希望LGD.AME又一次倒在了举盾的门口。
 如果开局放给对面4把猛犸，如果最后一把没有选酱油小鹿，如果。。。
输了就是输了，没有那么多如果。
上一次cn.dota2 夺冠还是5年前的 ti6 wings 了。当初wings 被 ace 逼解散的时候，就有人说 ace 造的孽 会让c n.dota 用未来5年来偿还这个债。
结果cn dota 真的5年无冠。
AME, NTS, Faith_bian, XinQ，y 是我最喜欢的几个在役选手了，希望lgd这5个人可以再战一年。
 如果 wings 是对 cn dota 的透支，希望明年的 ti11 就是对 cn dota 补偿的时候。
加油LGD, 明年ti 决赛再见！</description>
			<content type="html"><![CDATA[<p>熬夜看完TI10, Team Spirit vs LGD 的决赛。</p>
<p>首先，恭喜 team spirit 的五位第一次打进ti就成功圆梦举盾的年轻人，这个冠军🏆他们赢得实至名归！</p>
<figure><img src="/images/ti10.jpeg"
         alt="Team Spirit"/>
</figure>

<p>连续3年了，即使这一次AME背后插上了wings，可全村的希望LGD.AME又一次倒在了举盾的门口。</p>
<figure><img src="/images/ti102.jpeg"
         alt="萧瑟"/>
</figure>

<p>如果开局放给对面4把猛犸，如果最后一把没有选酱油小鹿，如果。。。</p>
<p>输了就是输了，没有那么多如果。</p>
<p>上一次cn.dota2 夺冠还是5年前的 ti6 wings 了。当初wings 被 ace 逼解散的时候，就有人说 ace 造的孽 会让c n.dota 用未来5年来偿还这个债。</p>
<p>结果cn dota 真的5年无冠。</p>
<p>AME, NTS, Faith_bian, XinQ，y 是我最喜欢的几个在役选手了，希望lgd这5个人可以再战一年。</p>
<figure><img src="/images/ti101.jpeg"
         alt="image"/>
</figure>

<p>如果 wings 是对 cn dota 的透支，希望明年的 ti11 就是对 cn dota 补偿的时候。</p>
<p>加油LGD, 明年ti 决赛再见！</p>
]]></content>
		</item>
		
		<item>
			<title>Ternary Operator 三元运算符</title>
			<link>https://daiwei.dev/posts/ternary_operator/</link>
			<pubDate>Tue, 12 Oct 2021 13:28:50 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/ternary_operator/</guid>
			<description>Syntax:
1Variablename = (Condition) ? the value assigned if &amp;#39;true&amp;#39; is returned: t example：
1if (BooleanValue) { 2 Greetings = &amp;#34;Hello!&amp;#34;; 3} 4else { 5 Greetings = &amp;#34;Bye!&amp;#34;; 6} using ternary operator the above expression involves 1 line:
1Greeetings = (BooleanValue) ? &amp;#34;Hello!&amp;#34; : &amp;#34;Bye!&amp;#34;; Chained Operations
1public class Ternaryy { 2 public static void main(String[] args) { 3 4 String coffeeOrder = &amp;#34;Piccolo Latte&amp;#34;; 5 if (coffeeOrder == &amp;#34;Espresso&amp;#34; ) { 6 System.</description>
			<content type="html"><![CDATA[<p><strong>Syntax:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">Variablename</span> <span class="o">=</span> <span class="o">(</span><span class="n">Condition</span><span class="o">)</span> <span class="o">?</span> <span class="n">the</span> <span class="n">value</span> <span class="n">assigned</span> <span class="k">if</span> <span class="err">&#39;</span><span class="kc">true</span><span class="err">&#39;</span> <span class="n">is</span> <span class="n">returned</span><span class="o">:</span> <span class="n">t</span>
</code></pre></div><p>example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="k">if</span> <span class="o">(</span><span class="n">BooleanValue</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">2</span>   <span class="n">Greetings</span> <span class="o">=</span> <span class="s">&#34;Hello!&#34;</span><span class="o">;</span>
<span class="ln">3</span><span class="o">}</span>
<span class="ln">4</span><span class="k">else</span> <span class="o">{</span>
<span class="ln">5</span>   <span class="n">Greetings</span> <span class="o">=</span> <span class="s">&#34;Bye!&#34;</span><span class="o">;</span>
<span class="ln">6</span><span class="o">}</span>
</code></pre></div><p>using ternary operator the above expression involves 1 line:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">Greeetings</span> <span class="o">=</span> <span class="o">(</span><span class="n">BooleanValue</span><span class="o">)</span> <span class="o">?</span> <span class="s">&#34;Hello!&#34;</span> <span class="o">:</span> <span class="s">&#34;Bye!&#34;</span><span class="o">;</span>
</code></pre></div><p><strong>Chained Operations</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Ternaryy</span> <span class="o">{</span>
<span class="ln"> 2</span>   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 3</span> 
<span class="ln"> 4</span>       <span class="n">String</span> <span class="n">coffeeOrder</span> <span class="o">=</span> <span class="s">&#34;Piccolo Latte&#34;</span><span class="o">;</span>
<span class="ln"> 5</span>       <span class="k">if</span> <span class="o">(</span><span class="n">coffeeOrder</span> <span class="o">==</span> <span class="s">&#34;Espresso&#34;</span> <span class="o">)</span> <span class="o">{</span>
<span class="ln"> 6</span>           <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;would you like whipped cream on the top&#34;</span><span class="o">);</span>
<span class="ln"> 7</span>       <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">coffeeOrder</span> <span class="o">==</span> <span class="s">&#34;Piccolo Latte&#34;</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 8</span>           <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;25ml or 30ml&#34;</span><span class="o">);</span>
<span class="ln"> 9</span>       <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">coffeeOrder</span> <span class="o">==</span> <span class="s">&#34;Macchiato&#34;</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">10</span>           <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Short or long&#34;</span><span class="o">);</span>
<span class="ln">11</span>       <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="ln">12</span>           <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Hello, we were unable to process your order&#34;</span><span class="o">);</span>
<span class="ln">13</span> 
<span class="ln">14</span>       <span class="o">}</span>
<span class="ln">15</span>   <span class="o">}</span>
<span class="ln">16</span><span class="o">}</span>
</code></pre></div><p>use the ternary operator:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Ternaryy</span> <span class="o">{</span>
<span class="ln"> 2</span>   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 3</span>       <span class="n">String</span> <span class="n">coffeeOrder</span> <span class="o">=</span> <span class="s">&#34;Piccolo Latte&#34;</span><span class="o">;</span>
<span class="ln"> 4</span>       <span class="n">String</span> <span class="n">FinalOrder</span> <span class="o">=</span> <span class="o">(</span><span class="n">coffeeOrder</span> <span class="o">==</span> <span class="s">&#34;Espresso&#34;</span><span class="o">)</span> <span class="o">?</span> 
<span class="ln"> 5</span>         <span class="s">&#34; would you like whipped cream on the top&#34;</span> <span class="o">:</span> <span class="o">(</span><span class="n">coffeeOrder</span> <span class="o">==</span> <span class="s">&#34;Piccolo Latte&#34;</span><span class="o">)</span> <span class="o">?</span>
<span class="ln"> 6</span>           <span class="s">&#34;25ml or 30ml&#34;</span> <span class="o">:</span> <span class="o">(</span><span class="n">coffeeOrder</span> <span class="o">==</span> <span class="s">&#34;Macchiato&#34;</span><span class="o">)</span> <span class="o">?</span> 
<span class="ln"> 7</span>             <span class="s">&#34;Short or long&#34;</span> <span class="o">:</span> <span class="s">&#34;Hello, we were unable to process your order&#34;</span><span class="o">;</span>
<span class="ln"> 8</span>       <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">FinalOrder</span><span class="o">);</span>
<span class="ln"> 9</span>   <span class="o">}</span>
<span class="ln">10</span><span class="o">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Java Architecture: JVM, JRE &amp; JDK</title>
			<link>https://daiwei.dev/posts/java-architecture/</link>
			<pubDate>Mon, 11 Oct 2021 17:11:25 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/java-architecture/</guid>
			<description>Java之所以能过成为当今最流行的编程语言之一, 离不开**Java Virtual Machine (JVM), Java Runtime Environment (JRE) and Java Development Kit (JDK) **的支持。
 Java Virtual Machine JVM Java virtual machine is a platform-independent abstract machine that provides a runtime environment in which loads, verifies and executes Java bytecode. WORA (Write once Run Anywhere).
Java虚拟机是一个独立于平台的抽象机器，它提供了一个运行环境，在其中加载、验证和执行Java字节代码。它被称为解释器或 Java 编程语言的核心，因为它执行 Java 编程。引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译.
Java Virtual Machine Architecture Java Virtual Machine Architecture 虚拟机架构非常简单，它有一个内存区memory area、一个类加载器class loader 和一个执行引擎Execution Engine 以及其他组件。
ClassLoader 类加载器 It is a subsystem that is used to load class files.</description>
			<content type="html"><![CDATA[<p>Java之所以能过成为当今最流行的编程语言之一, 离不开**Java Virtual Machine (JVM), Java Runtime Environment (JRE) and Java Development Kit (JDK) **的支持。</p>
<p><img src="https://www.edureka.co/blog/wp-content/uploads/2019/07/q.png" alt="JVM - Java Architecture - Edureka"></p>
<p><img src="https://www.oracle.com/ocom/groups/public/@otn/documents/digitalasset/2167990.jpg" alt="img"></p>
<hr>
<h3 id="java-virtual-machinehttpswwworaclecomjavatechnologiesjavasejavase-core-technologies-apishtml-jvm"><strong><a href="https://www.oracle.com/java/technologies/javase/javase-core-technologies-apis.html">Java Virtual Machine</a></strong> JVM</h3>
<p>Java virtual machine is a platform-independent abstract machine that provides a runtime environment in which loads, verifies and executes Java bytecode. WORA (Write once Run Anywhere).</p>
<p>Java虚拟机是一个独立于平台的抽象机器，它提供了一个运行环境，在其中加载、验证和执行Java字节代码。它被称为解释器或 Java 编程语言的核心，因为它执行 Java 编程。引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译.</p>
<h4 id="java-virtual-machine-architecture">Java Virtual Machine Architecture</h4>
<p>Java Virtual Machine Architecture 虚拟机架构非常简单，它有一个内存区memory area、一个类加载器class loader 和一个执行引擎Execution Engine 以及其他组件。</p>
<p><img src="https://www.fatalerrors.org/images/blog/a2b8bfe83deb28ffd841280abede11d9.jpg" alt="JVM First Bounce&ndash;Class Loading Subsystem"></p>
<p><img src="http://2.bp.blogspot.com/-ILs_L_UHzNM/U4mBNvpfB8I/AAAAAAAAAeU/EdBcJ36qfAI/s1600/JVM+Architecture+block+diagram.png" alt="img"></p>
<h5 id="classloader-类加载器">ClassLoader 类加载器</h5>
<p>It is a subsystem that is used to load class files. Whenever we run a program in java, it is first loaded by the ClassLoader. the major function includes initialization, linking and loading.</p>
<h5 id="jvm-memory-内存区">JVM Memory 内存区</h5>
<ol>
<li>
<p>Method Area – It stores the structures for each class like the code, field data, runtime constant pool, method data, etc.  all **static variables, ** are created in this area.</p>
<p>方法区 - 它存储每个类的结构，如代码、字段数据、运行时常量池、方法数据等。所有静态变量都在此运行区中创建。</p>
</li>
<li>
<p>Heap Area – Objects are allocated at the runtime in the heap. It is the main memory of JVM. All <em>objects</em> of classes – <em>non-static variables memory</em> are created in this runtime area. It may increase or decrease in size while the application runs.</p>
<p>堆区 - 它是JVM的主存。类的所有<em>对象</em>-<em>非静态变量内存</em>都在此运行时区域中创建. 它是JVM的主存。类的所有<em>对象</em>-<em>非静态变量内存</em>都在此运行时区域中创建</p>
</li>
<li>
<p>Stacks Area – It stores local variables and results. In this runtime area all Java methods are executed.</p>
<p>In this runtime JVM by default creates two threads, they are Main thread. Garbage collector thread.</p>
</li>
</ol>
<ul>
<li>
<ul>
<li>
<ul>
<li><em>Main thread</em> is responsible to execute Java methods stats with main method, also responsible to create objects in heap area if it finds “new” keyword in any method logic.</li>
<li><em>Garbage collector thread</em> is responsible to destroy all unused objects from heap area.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Java 栈 - 所有的本地变量和运行结果都存储在这里并执行所有 Java 方法。在这个运行时 JVM 默认创建两个线程，主线程 和垃圾收集器线程。</p>
<ul>
<li><em>主线程</em>负责用main方法执行Java方法stats，如果在任何方法逻辑中发现“new”关键字，也负责在堆区域创建对象。</li>
<li><em>垃圾收集器线程</em>负责销毁堆区域中所有未使用的对象。</li>
</ul>
<ol start="4">
<li>
<p>PC Registers – It has the address or location of the JVMinstruction that is being executed. a separate program counter register is created for every thread for tracking that thread execution by storing its instruction address.</p>
<p>程序计数器 - 它有正在执行的JVM指令的地址或位置，为每个线程创建一个单独的程序计数器寄存器，用于通过存储其指令地址来跟踪该线程的执行。</p>
</li>
<li>
<p>Native Method Stacks – All the native methods used in the applications are present in the native method stacks.</p>
<p>本地方法栈 - 应用程序中使用的所有本地方法都存在于本地方法栈中。</p>
</li>
</ol>
<h5 id="execution-engine">Execution Engine</h5>
<p><strong>–</strong> An execution engine contains a Grabage collector, an interpreter and a <a href="https://www.edureka.co/blog/just-in-time-compiler/">JIT</a> compiler.</p>
<p><strong>–</strong> 一个执行引擎包含一个垃圾回收器Grabage collector、一个解释器interpreter 和一个JIT编译器。</p>
<h5 id="native-method-interfacehttpswwwedurekacoblogjava-interface">Native Method <a href="https://www.edureka.co/blog/java-interface/">Interface</a></h5>
<p>– It is a <a href="https://www.edureka.co/blog/java-frameworks/">framework</a> that provides. 提供框架。</p>
<h5 id="native-method-library--本地方法库">Native Method Library – 本地方法库</h5>
<hr>
<h3 id="java-runtime-environment-jrehttpsdocsoraclecomjavase8docstechnotesguidesindexhtmljre-jdk"><strong><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/index.html#jre-jdk">Java Runtime Environment (JRE)</a></strong></h3>
<p>The Java Runtime Environment (JRE) provides the libraries, the Java Virtual Machine, and other components to run applets and applications written in the Java programming language. In addition, two key deployment technologies are part of the JRE: <a href="https://www.oracle.com/java/technologies/plugin.html">Java Plug-in</a>, which enables applets to run in popular browsers; and Java Web Start, which deploys standalone applications over a network. It is also the foundation for the technologies in the Java 2 Platform, Enterprise Edition (J2EE) for enterprise software development and deployment. The JRE does not contain tools and utilities such as compilers or debuggers for developing applets and applications.</p>
<p>Java 运行时环境 (JRE) 提供库、Java 虚拟机和其他组件来运行用 Java 编程语言编写的小程序和应用程序。此外，JRE 还包含两项关键部署技术：<a href="https://www.oracle.com/java/technologies/plugin.html">Java Plug-in</a>，它使小应用程序能够在流行的浏览器中运行；和 Java Web Start，它通过网络部署独立的应用程序。它也是 Java 2 Platform, Enterprise Edition (J2EE) 中用于企业软件开发和部署的技术的基础。JRE 不包含用于开发小程序和应用程序的工具和实用程序，例如编译器或调试器。</p>
<hr>
<h3 id="java-development-kit-jdkhttpsdocsoraclecomjavase8docstechnotesguidesindexhtmljre-jdk"><strong><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/index.html#jre-jdk">Java Development Kit (JDK)</a></strong></h3>
<p>The JDK is a superset of the JRE, and contains everything that is in the JRE, plus tools such as the compilers and debuggers necessary for developing applets and applications.</p>
<p>JDK 是 JRE 的超集，包含 JRE 中的所有内容，以及开发小程序和应用程序所需的编译器和调试器等工具。</p>
<h3 id="difference-between-jdk-jre-and-jvm"><strong>Difference Between JDK, JRE, And JVM</strong></h3>
<ol>
<li>
<p>JDK is the development platform, while JRE is for execution. JDK 开发工具包，JRE 运行环境。</p>
</li>
<li>
<p>JVM is the foundation, or the heart of Java programming language, and ensures the program’s Java source code will be platform-agnostic. JVM是java基础和核心，它确保了Java可以在任何平台运行。</p>
</li>
<li>
<p>JVM is included in both JDK and JRE – Java programs won’t run without it.  <strong>jdk &amp; jre都包含jvm.</strong></p>
<p><img src="https://s3.shunyafoundation.com/s3/1578452c3f66d8fd0d04d5d195328ae1359d8caa/jdk-jvm.png" alt="What is JDK, JRE and JVM?"></p>
</li>
</ol>
<hr>
<h3 id="互补技术">互补技术</h3>
<p>有许多互补技术可用于增强 JVM、JRE 或 JDK。以下技术是最常用的技术：</p>
<ul>
<li><strong>Just-in-time Compiler (JIT)</strong> 即时编译器 是 JVM 的一部分，用于优化字节码到机器码的转换。它选择相似的字节码同时编译，减少字节码到机器码编译的整体持续时间。</li>
<li><strong>Javac</strong>是另一个补充工具，它是一个编译器，可以读取 Java 定义并将其转换为可以在 JVM 上运行的字节码。</li>
<li><strong>Javadoc</strong>将 API 文档从 Java 源代码转换为 HTML。这在以 HTML 格式创建标准文档时很有用。</li>
</ul>
<hr>
<h3 id="java-se-java-ee-java-me--javafx">Java SE, Java EE, Java ME &amp; JavaFx</h3>
<p>There are four platforms of the Java programming language:</p>
<ul>
<li>Java Platform, Standard Edition (Java SE)</li>
<li>Java Platform, Enterprise Edition (Java EE)</li>
<li>Java Platform, Micro Edition (Java ME)</li>
<li>JavaFX</li>
</ul>
<p>所有 Java 平台都由 Java 虚拟机 (VM) 和应用程序编程接口 (API) 组成。Java 虚拟机是一个用于特定硬件和软件平台的程序，它运行 Java 技术应用程序。API 是一组软件组件，可用于创建其他软件组件或应用程序。每个 Java 平台都提供了一个虚拟机和一个 API，这使得为该平台编写的应用程序可以在具有 Java 编程语言所有优点的任何兼容系统上运行：平台独立性、功能强大、稳定性、易于开发和安全。</p>
<h5 id="java-se">Java SE</h5>
<p>当大多数人想到 Java 编程语言时，他们会想到 Java SE API。Java SE 的 API 提供了 Java 编程语言的核心功能。它定义了从 Java 编程语言的基本类型和对象到用于网络、安全、数据库访问、图形用户界面 (GUI) 开发和 XML 解析的高级类的所有内容。</p>
<p>除了核心 API 之外，Java SE 平台还包括虚拟机、开发工具、部署技术以及 Java 技术应用程序中常用的其他类库和工具包。</p>
<h5 id="java-ee">Java EE</h5>
<p>Java EE 平台构建在 Java SE 平台之上。Java EE 平台为开发和运行大规模、多层、可扩展、可靠和安全的网络应用程序提供了 API 和运行时环境。</p>
<h5 id="java-me">Java ME</h5>
<p>Java ME 平台提供了一个 API 和一个小型虚拟机，用于在手机等小型设备上运行 Java 编程语言应用程序。该 API 是 Java SE API 的一个子集，以及对小型设备应用程序开发有用的特殊类库。Java ME 应用程序通常是 Java EE 平台服务的客户端。</p>
<h5 id="javafx">JavaFX</h5>
<p>JavaFX 是一个使用轻量级用户界面 API 创建富 Internet 应用程序的平台。JavaFX 应用程序使用硬件加速的图形和媒体引擎来利用更高性能的客户端和现代外观以及用于连接到网络数据源的高级 API。JavaFX 应用程序可能是 Java EE 平台服务的客户端。</p>
<p><img src="https://image.slidesharecdn.com/javastrategylgv3-100319054817-phpapp02/95/oracle-java-strategy-lg-v3-7-728.jpg?cb=1353400249" alt="Oracle Java Strategy Lg V3"></p>
<hr>
<h3 id="how-is-java-platform-indeeddent">How is Java platform indeeddent?</h3>
<p><img src="https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2019/06/Jit-Compiler.png" alt="JIT workflow in Java - Java Architecture- Edureka"></p>
<p><em><strong>sample.java → javac (sample. class) → JVM(sample.obj) → final output</strong></em></p>
<p>First source code is used by java compiler and is converted in .class file. The class file code is in byte code form and that class file is used by JVM to convert into an object file. After that, you can see the final output on your screen. Java 编译器使用第一个源代码并转换为 .class 文件。类文件代码采用字节码形式，JVM 使用该类文件转换为目标文件。之后，您可以在屏幕上看到最终输出。</p>
<p><img src="http://upload.wikimedia.org/wikipedia/commons/3/3a/Java_virtual_machine_architecture.svg" alt="Java Just-In-Time (JIT) Compiler: What is it, how does it work, where does  it fit into JVM architecture (JIT vs Interpreter)? |"></p>
]]></content>
		</item>
		
		<item>
			<title>Array</title>
			<link>https://daiwei.dev/posts/array/</link>
			<pubDate>Mon, 11 Oct 2021 14:49:45 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/array/</guid>
			<description>util.Arrays class: 1java.lang.Object 2java.util.Arrays 3public class Arrays extends Object This class contains various methods for manipulating arrays (such as sorting and searching). This class also contains a static factory that allows arrays to be viewed as lists.
此类Java Collections Framework的成员, 包含用于操作数组的各种方法（例如排序和搜索）。此类还包含一个静态工厂，允许将数组视为列表。它仅由静态方法和 Object 类的方法组成。
有两种方法可以创建 Arrays 对象:
1// method 1, declare a new array1 then initialize it 2int[] array1 = new int[3]; 3array1 = {1,2,3}; 4 5// method 2, initialized array2 when declared it 6int[] array2 = new int[]{1,2,3}; 7 8// method 3, declare with values given (variable/field initialization): 9int[] array3 = {1,2,3}; 10 11// Matrix Array 12int[][] matrix1 = new int[2][3]; 13matrix1[0][0] = 1; 14matrix1[0][1] = 2; 15matrix1[0][2] = 3; 16matrix1[1][0] = 4; 17matrix1[1][1] = 5; 18matrix1[1][2] = 6; 19 20// Martix Array 21int[][] matrix2 = { 22 {1,2,3}, 23 {4,5,6} 24}; 25 26System.</description>
			<content type="html"><![CDATA[<h3 id="utilarrays-class">util.Arrays class:</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Object</span>
<span class="ln">2</span><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Arrays</span>
<span class="ln">3</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Arrays</span> <span class="kd">extends</span> <span class="n">Object</span>
</code></pre></div><p>This class contains various methods for manipulating arrays (such as sorting and searching). This class also contains a static factory that allows arrays to be viewed as lists.</p>
<p>此类<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/package-summary.html#CollectionsFramework">Java Collections Framework</a>的成员, 包含用于操作数组的各种方法（例如排序和搜索）。此类还包含一个静态工厂，允许将数组视为列表。它仅由静态方法和 Object 类的方法组成。</p>
<p><img src="https://www.edureka.co/blog/wp-content/uploads/2018/01/7-2.png" alt="数组 - Java 数组 - edureka"></p>
<p>有两种方法可以创建 Arrays 对象:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="c1">// method 1, declare a new array1 then initialize it
</span><span class="ln"> 2</span><span class="c1"></span><span class="kt">int</span><span class="o">[]</span> <span class="n">array1</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">3</span><span class="o">];</span> 
<span class="ln"> 3</span><span class="n">array1</span> <span class="o">=</span> <span class="o">{</span><span class="n">1</span><span class="o">,</span><span class="n">2</span><span class="o">,</span><span class="n">3</span><span class="o">};</span> 
<span class="ln"> 4</span>
<span class="ln"> 5</span><span class="c1">// method 2, initialized array2 when declared it
</span><span class="ln"> 6</span><span class="c1"></span><span class="kt">int</span><span class="o">[]</span> <span class="n">array2</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="n">1</span><span class="o">,</span><span class="n">2</span><span class="o">,</span><span class="n">3</span><span class="o">};</span> 
<span class="ln"> 7</span>
<span class="ln"> 8</span><span class="c1">// method 3, declare with values given (variable/field initialization):
</span><span class="ln"> 9</span><span class="c1"></span><span class="kt">int</span><span class="o">[]</span> <span class="n">array3</span> <span class="o">=</span> <span class="o">{</span><span class="n">1</span><span class="o">,</span><span class="n">2</span><span class="o">,</span><span class="n">3</span><span class="o">};</span>
<span class="ln">10</span>
<span class="ln">11</span><span class="c1">// Matrix Array
</span><span class="ln">12</span><span class="c1"></span><span class="kt">int</span><span class="o">[][]</span> <span class="n">matrix1</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">2</span><span class="o">][</span><span class="n">3</span><span class="o">];</span>
<span class="ln">13</span><span class="n">matrix1</span><span class="o">[</span><span class="n">0</span><span class="o">][</span><span class="n">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
<span class="ln">14</span><span class="n">matrix1</span><span class="o">[</span><span class="n">0</span><span class="o">][</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">2</span><span class="o">;</span>
<span class="ln">15</span><span class="n">matrix1</span><span class="o">[</span><span class="n">0</span><span class="o">][</span><span class="n">2</span><span class="o">]</span> <span class="o">=</span> <span class="n">3</span><span class="o">;</span>
<span class="ln">16</span><span class="n">matrix1</span><span class="o">[</span><span class="n">1</span><span class="o">][</span><span class="n">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">4</span><span class="o">;</span>
<span class="ln">17</span><span class="n">matrix1</span><span class="o">[</span><span class="n">1</span><span class="o">][</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">5</span><span class="o">;</span>
<span class="ln">18</span><span class="n">matrix1</span><span class="o">[</span><span class="n">1</span><span class="o">][</span><span class="n">2</span><span class="o">]</span> <span class="o">=</span> <span class="n">6</span><span class="o">;</span>
<span class="ln">19</span>
<span class="ln">20</span><span class="c1">// Martix Array
</span><span class="ln">21</span><span class="c1"></span><span class="kt">int</span><span class="o">[][]</span> <span class="n">matrix2</span> <span class="o">=</span> <span class="o">{</span>
<span class="ln">22</span>  <span class="o">{</span><span class="n">1</span><span class="o">,</span><span class="n">2</span><span class="o">,</span><span class="n">3</span><span class="o">},</span>
<span class="ln">23</span>  <span class="o">{</span><span class="n">4</span><span class="o">,</span><span class="n">5</span><span class="o">,</span><span class="n">6</span><span class="o">}</span>
<span class="ln">24</span><span class="o">};</span>
<span class="ln">25</span>
<span class="ln">26</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">array3</span><span class="o">));</span> <span class="c1">// [1, 2, 3]
</span><span class="ln">27</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">deepToString</span><span class="o">(</span><span class="n">matrix2</span><span class="o">));</span> <span class="c1">//[[1, 2, 3], [4, 5, 6]]
</span><span class="ln">28</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">matrix1</span><span class="o">.</span><span class="na">length</span><span class="o">);</span> <span class="c1">// Prints the First Dimension size in the array 2
</span><span class="ln">29</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">matrix1</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">length</span><span class="o">);</span><span class="c1">//Prints the Second Dimension size in the array 3
</span></code></pre></div><p>3种创建方法其实是一样的，但是当你需要return一个array时，你需要<code>return new int[]{1,2,3}</code>,不可以直接<code>return {1,2,3}</code>.</p>
<hr>
<h3 id="length-vs-length-vs-size">length vs length() vs size()</h3>
<ul>
<li>
<p><code>length</code> &ndash; <strong>arrays</strong> (<code>int[]</code>, <code>double[]</code>, <code>String[]</code>) &ndash; to know the length of the arrays</p>
</li>
<li>
<p><code>length()</code> &ndash; <strong>String related Object</strong> (<code>String</code>, <code>StringBuilder</code>, etc) &ndash; to know the length of the String</p>
</li>
<li>
<p><code>size()</code> &ndash; <strong>Collection Object</strong> (<code>ArrayList</code>, <code>Set</code>, etc) &ndash; to know the size of the Collection</p>
</li>
</ul>
<p>array 在Java 中有一些特殊，类似Java的原始类，array的长度length是需要在使用前申明的，更像是一个constant，因此由于历史原因，早期的Java designer 更愿意把 array length 当做 一个私有field 才处理，而不是伪装method。</p>
<p>string 的长度是可变的 dynamic，所以需要call method 去计算长度。</p>
<hr>
<h4 id="1-两数之和httpsleetcode-cncomproblemstwo-sum"><a href="https://leetcode-cn.com/problems/two-sum/">1. 两数之和</a></h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
<span class="ln"> 2</span>    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">twoSum</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 3</span>        <span class="n">Map</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="ln"> 4</span>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
<span class="ln"> 5</span>            <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">target</span> <span class="o">-</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
<span class="ln"> 6</span>            <span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">n</span><span class="o">))</span> <span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">n</span><span class="o">),</span> <span class="n">i</span><span class="o">};</span>
<span class="ln"> 7</span>            <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">],</span><span class="n">i</span><span class="o">);</span>
<span class="ln"> 8</span>        <span class="o">}</span>
<span class="ln"> 9</span>        <span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{};</span>
<span class="ln">10</span>    <span class="o">}</span>
<span class="ln">11</span><span class="o">}</span>
</code></pre></div><p><img src="https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2018/01/Asset-2@2x.png" alt="2D Array - Java array - edureka"></p>
<hr>
<h3 id="reflectarray-class">reflect.Array Class:</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Object</span>
<span class="ln">2</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">Array</span>
<span class="ln">3</span><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Array</span> <span class="kd">extends</span> <span class="n">Object</span>
</code></pre></div><p>The <code>Array</code> class provides static methods to dynamically create and access Java Arrays.</p>
<p>此类提供静态方法去动态创建和访问Java Arrays。它是一个 final 类，这意味着它<strong>不能被实例化或改变</strong>。使数组保持类型安全。</p>
<p><strong>util.Array vs reflect.Arrays:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="c1">// Java program to show Array vs Arrays  
</span><span class="ln"> 2</span><span class="c1"></span><span class="kn">import</span> <span class="nn">java.lang.reflect.Array</span><span class="o">;</span> 
<span class="ln"> 3</span><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span> 
<span class="ln"> 4</span>  
<span class="ln"> 5</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GfG</span> <span class="o">{</span> 
<span class="ln"> 6</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> 
<span class="ln"> 7</span>    <span class="o">{</span> 
<span class="ln"> 8</span>        <span class="c1">// Get the size of the array 
</span><span class="ln"> 9</span><span class="c1"></span>        <span class="kt">int</span><span class="o">[]</span> <span class="n">intArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">5</span><span class="o">];</span> 
<span class="ln">10</span>  
<span class="ln">11</span>        <span class="c1">// Add elements into the array 
</span><span class="ln">12</span><span class="c1"></span>        <span class="c1">// using reflect.Array class 
</span><span class="ln">13</span><span class="c1"></span>        <span class="n">Array</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="n">intArray</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">10</span><span class="o">);</span> 
<span class="ln">14</span>  
<span class="ln">15</span>        <span class="c1">// Printing the Array content 
</span><span class="ln">16</span><span class="c1"></span>        <span class="c1">// using util.Arrays class 
</span><span class="ln">17</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> 
<span class="ln">18</span>            <span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">intArray</span><span class="o">));</span> 
<span class="ln">19</span>    <span class="o">}</span> 
<span class="ln">20</span><span class="o">}</span> 
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Data Structure In Java</title>
			<link>https://daiwei.dev/posts/data-structure-in-java/</link>
			<pubDate>Wed, 06 Oct 2021 18:30:40 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/data-structure-in-java/</guid>
			<description>According to the properties they possess, data types are divided into two groups:
Primitive Data Types: A primitive data type is pre-defined by the programming language. The size and type of variable values are specified, and it has no additional methods.
 byte, short, int, long, float, double, char, boolean.  **Non-Primitive Data Types: ** These data types are not actually defined by the programming language but are created by the programmer, they have additional methods.</description>
			<content type="html"><![CDATA[<p>According to the properties they possess, data types are divided into two groups:</p>
<h4 id="primitive-data-types"><strong>Primitive Data Types:</strong></h4>
<p>A primitive data type is pre-defined by the programming language. The size and type of variable values are specified, and it has no additional methods.</p>
<ul>
<li><strong>byte, short, int, long, float, double, char, boolean.</strong></li>
</ul>
<p><img src="https://www.edureka.co/blog/wp-content/uploads/2017/04/Primitive_Data_Type.png" alt="DataTypes - Data types in Java - Edureka"></p>
<h4 id="non-primitive-data-types-">**Non-Primitive Data Types: **</h4>
<p><img src="https://beginnersbook.com/wp-content/uploads/2013/12/Java-collection-framework-hierarchy.png" alt="Java Collections"></p>
<p>These data types are not actually defined by the programming language but are created by the programmer, they have additional methods.</p>
<p><img src="https://www.edureka.co/blog/wp-content/uploads/2019/06/Picture4-3.png" alt="Non Primitive data types - Data types in Java - Edureka"></p>
<figure><img src="https://docs.oracle.com/javase/tutorial/figures/collections/colls-coreInterfaces.gif"
         alt="image"/><figcaption>
            <p>The core collection interfaces</p>
        </figcaption>
</figure>

<p><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/package-summary.html">java.lang</a>:</p>
<ul>
<li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Byte.html">Byte</a>, <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Short.html">Short</a>, <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Integer.html">Integer</a>, <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Long.html">Long</a>, <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Float.html">Float</a>, <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html">Double</a>, <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html">Character</a>, <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Boolean.html">Boolean</a>.</li>
<li>java.lang.Sting: <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html">String</a>.</li>
<li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/reflect/package-summary.html">java.lang.reflect</a>: <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/reflect/Array.html">Array</a> .</li>
</ul>
<p><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/package-summary.html">java.util</a>: Interface:</p>
<p><img src="https://i.loli.net/2021/10/11/BMOvJ6Fg89VbsTS.png" alt="Screenshot 2021-10-11 at 12.49.02.png"></p>
<ul>
<li>
<p><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/List.html">List</a><!-- raw HTML omitted -->:  <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedList.html">LinkedList</a><!-- raw HTML omitted -->, <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ArrayList.html">ArrayList</a><!-- raw HTML omitted -->，<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Vector.html">Vector</a><!-- raw HTML omitted --> &lt;&ndash;  <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Stack.html">Stack</a><!-- raw HTML omitted --></p>
</li>
<li>
<p><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Set.html">Set</a><!-- raw HTML omitted -->:   <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html">HashSet</a><!-- raw HTML omitted -->, <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashSet.html">LinkedHashSet</a><!-- raw HTML omitted -->`,<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/TreeSet.html">TreeSet</a><!-- raw HTML omitted -->.</p>
</li>
<li>
<p><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Queue.html">Queue</a><!-- raw HTML omitted -->:  <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html">Deque</a><!-- raw HTML omitted -->, <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/PriorityQueue.html">PriorityQueue</a><!-- raw HTML omitted -->.</p>
</li>
<li>
<p><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html">Map</a>&lt;K,V&gt;: <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html">HashMap</a>&lt;K,V&gt;, <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Hashtable.html">Hashtable</a>&lt;K,V&gt;,  <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html">LinkedHashMap</a>&lt;K,V&gt;, <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/TreeMap.html">TreeMap</a>&lt;K,V&gt;</p>
</li>
</ul>
<p><img src="https://miro.medium.com/max/2000/1*RyCRTcbKIxHiPe5AObrvqQ.png" alt="img"></p>
<h4 id="the-difference-between-primitive-and-non-primitive-data-types-are-as-follows">The difference between <strong>primitive</strong> and <strong>non-primitive</strong> data types are as follows:</h4>
<ol>
<li>Primitive types are predefined in <a href="https://www.edureka.co/blog/what-is-java/">Java</a>. Non-primitive types are created by the programmer.</li>
<li>Non Primitive types can be used to call methods to perform certain operations, while primitive types cannot.</li>
<li>A primitive type always has a value, whereas non-primitive types can be null.</li>
<li>A primitive type starts with a lowercase letter, while non-primitive types start with an uppercase letter.</li>
<li>The size of a primitive type depends on the data type, while non-primitive types have all the same size.</li>
</ol>
<p>很多人说编程等于 数据结构 + 操作数据的算法，不一定是完全正确的，但是小白的身份来看，先学习整体框架，再一个个深入了解。可能开始会觉得学的很慢，怎么还不能写一个东西出来，但等到把基础知识掌握牢靠后，后面的面向对象编程，学起来就会更加得心应手。</p>
<p>我的大学老师是没有教我们去看Java官方文档的，也并没有从头给我们讲解Java的语言框架，开始就是面向对象编程，和一些Java 语法，导致后来很多问题都学的很困惑，比如为什么 <code>int[] a = {1,2,3}</code> 不需要new， <code>ArrayList&lt;Integer&gt; a = new ArrayList&lt;&gt;()</code> 需要new？为什么会有 <code>a.lenght</code> 和<code>a.size()</code>，为什么一个需要后面加括号，一个不需要？<code>List&lt;Integer&gt; a = new Arraylist&lt;&gt;() </code>和 <code>ArrayList&lt;Integer&gt; a = new ArrayList&lt;&gt;()</code>有什么区别？等等这些问题都是后来Google看官方文档后，才开始慢慢理解的。</p>
]]></content>
		</item>
		
		<item>
			<title>String</title>
			<link>https://daiwei.dev/posts/string/</link>
			<pubDate>Wed, 06 Oct 2021 16:00:35 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/string/</guid>
			<description>Class String  java.lang.Object  java.lang.String    1public final class String 2extends Object 3implements Serializable, Comparable&amp;lt;String&amp;gt;, CharSequence String在Java属于java.lang.Object package, The String class represents character strings.
Java 程序中的所有字符串文字，例如&amp;quot;abc&amp;quot;，都作为此类的实例实现。
Strings 是常量 constant；它们的值在创建后无法更改，不可变的。
有两种方法可以创建 String 对象:
1String s1 = &amp;#34;apple&amp;#34;; // 通过字符串文字 2String s2 = &amp;#34;apple&amp;#34;; 3String s3 = new String(&amp;#34;apple&amp;#34;); // 通过 new 关键字 4String s4 = new String(&amp;#34;apple&amp;#34;); 5char[] s5 = {&amp;#39;a&amp;#39;,&amp;#39;p&amp;#39;,&amp;#39;p&amp;#39;,&amp;#39;l&amp;#39;,&amp;#39;e&amp;#39;}; 方法1会新建一个字符串&amp;quot;Hello World!&amp;quot;到Java String Pool, 如果遇到同样的字符串，可以指向同一个对象直接引用。所以 s1 == s2 ?</description>
			<content type="html"><![CDATA[<h2 id="class-string">Class String</h2>
<ul>
<li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html">java.lang.Object</a>
<ul>
<li>java.lang.String</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JAVA" data-lang="JAVA"><span class="ln">1</span><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">String</span>
<span class="ln">2</span><span class="kd">extends</span> <span class="n">Object</span>
<span class="ln">3</span><span class="kd">implements</span> <span class="n">Serializable</span><span class="o">,</span> <span class="n">Comparable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;,</span> <span class="n">CharSequence</span>
</code></pre></div><p>String在Java属于<code>java.lang.Object</code> package, The <code>String</code> class represents character strings.</p>
<p>Java 程序中的所有字符串文字，例如<code>&quot;abc&quot;</code>，都作为此类的实例实现。</p>
<p>Strings 是常量 constant；它们的值在创建后无法更改，不可变的。</p>
<p>有两种方法可以创建 String 对象:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="s">&#34;apple&#34;</span><span class="o">;</span> <span class="c1">// 通过字符串文字
</span><span class="ln">2</span><span class="c1"></span><span class="n">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="s">&#34;apple&#34;</span><span class="o">;</span>
<span class="ln">3</span><span class="n">String</span> <span class="n">s3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&#34;apple&#34;</span><span class="o">);</span> <span class="c1">// 通过 new 关键字
</span><span class="ln">4</span><span class="c1"></span><span class="n">String</span> <span class="n">s4</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&#34;apple&#34;</span><span class="o">);</span>
<span class="ln">5</span><span class="kt">char</span><span class="o">[]</span> <span class="n">s5</span> <span class="o">=</span> <span class="o">{</span><span class="sc">&#39;a&#39;</span><span class="o">,</span><span class="sc">&#39;p&#39;</span><span class="o">,</span><span class="sc">&#39;p&#39;</span><span class="o">,</span><span class="sc">&#39;l&#39;</span><span class="o">,</span><span class="sc">&#39;e&#39;</span><span class="o">};</span> 
</code></pre></div><p>方法1会新建一个字符串<code>&quot;Hello World!&quot;</code>到Java String Pool, 如果遇到同样的字符串，可以指向同一个对象直接引用。所以 s1 == s2 ? true.</p>
<p>方法2会新建一个String Object in Java Heap, 然后variable s 会heap里的对象。s3 == s4 ? False.</p>
<p>** 我们应该避免使用 方法2 去构建新的字符串。**</p>
<blockquote>
<p><a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#String(java.lang.String)"><code>String(String original)</code></a> : Initializes a <em>newly created</em> <code>String</code> object so that it represents the same sequence of characters as the argument; in other words, the newly created string is a copy of the argument string. Unless an explicit copy of original is needed, use of this constructor is unnecessary since strings are immutable. <strong>除非需要原始的显式副本，否则不需要使用此构造函数</strong></p>
</blockquote>
<p><img src="https://www.edureka.co/blog/wp-content/uploads/2017/05/String-pool-1.png" alt="String-pool - Edureka"></p>
<p>因为，Java String 是不可变的和 final 的，所以每当我们进行 String 操作时都会创建一个新的 String。由于字符串操作消耗资源，Java 提供了两个实用程序类：<em>StringBuffer</em>和<em>StringBuilder</em>。
让我们了解这两个实用程序类之间的区别：</p>
<ul>
<li>StringBuffer 和 StringBuilder 是可变类。StringBuffer 操作是线程安全和同步的，而 StringBuilder 操作不是线程安全的。</li>
<li>当多个线程在单线程环境中处理相同的 String 和 StringBuilder 时，将使用 StringBuffer。</li>
</ul>
<p>**正常情况下我们应该避免使用 <em>StringBuffer</em>. **因为与 StringBuffer 相比，StringBuilder 的性能更快，因为没有同步的开销。</p>
<h4 id="剑指-offer-05-替换空格httpsleetcode-cncomproblemsti-huan-kong-ge-lcof"><a href="https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/">剑指 Offer 05. 替换空格</a></h4>
<p>Java 等语言中，字符串都被设计成「不可变」的类型，即无法直接修改字符串的某一位字符，需要新建一个字符串 用<code>StringBuilder</code> 来实现。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
<span class="ln"> 2</span>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">replaceSpace</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 3</span>      <span class="c1">// using StringBuilder to build new String
</span><span class="ln"> 4</span><span class="c1"></span>        <span class="n">StringBuilder</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span> 
<span class="ln"> 5</span>      <span class="c1">// toCharArray method can convert String to a Char Array, then we use for-each
</span><span class="ln"> 6</span><span class="c1"></span>        <span class="k">for</span><span class="o">(</span><span class="n">Character</span> <span class="n">c</span> <span class="o">:</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> 
<span class="ln"> 7</span>        <span class="o">{</span>
<span class="ln"> 8</span>            <span class="k">if</span><span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span><span class="o">)</span> <span class="n">res</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;%20&#34;</span><span class="o">);</span>
<span class="ln"> 9</span>            <span class="k">else</span> <span class="n">res</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
<span class="ln">10</span>        <span class="o">}</span>
<span class="ln">11</span>        <span class="k">return</span> <span class="n">res</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
<span class="ln">12</span>    <span class="o">}</span>
<span class="ln">13</span><span class="o">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Hello World</title>
			<link>https://daiwei.dev/posts/hello-world/</link>
			<pubDate>Tue, 28 Sep 2021 15:25:50 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/hello-world/</guid>
			<description>Hello World, Hello Friend!
1#include &amp;lt;stdio.h&amp;gt;2int main() { 3 // printf() displays the string inside quotation 4 printf(&amp;#34;Hello, World!&amp;#34;); 5 return 0; 6} </description>
			<content type="html"><![CDATA[<p>Hello World, Hello Friend!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="ln">1</span><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="ln">2</span><span class="cp"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
<span class="ln">3</span>   <span class="c1">// printf() displays the string inside quotation
</span><span class="ln">4</span><span class="c1"></span>   <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello, World!&#34;</span><span class="p">);</span>
<span class="ln">5</span>   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="ln">6</span><span class="p">}</span>
</code></pre></div>]]></content>
		</item>
		
	</channel>
</rss>
