<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Hello, Friends!</title>
		<link>https://daiwei.dev/posts/</link>
		<description>Recent content in Posts on Hello, Friends!</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Mon, 10 Jan 2022 16:00:11 +0800</lastBuildDate>
		<atom:link href="https://daiwei.dev/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Java Data Structure 10: Graph</title>
			<link>https://daiwei.dev/posts/data-structure/10_graph/</link>
			<pubDate>Mon, 10 Jan 2022 16:00:11 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/data-structure/10_graph/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>Java Data Structure 9: Tree</title>
			<link>https://daiwei.dev/posts/data-structure/9_tree/</link>
			<pubDate>Sun, 09 Jan 2022 16:00:11 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/data-structure/9_tree/</guid>
			<description>数据结构可分为线性结构，和非线性结构。
常见的Array、List、Stack, Heap 和 Queue都是线性结构，在存储大量数据时访问速度比较慢，
而树(tree)则是一种非线性结构，使得访问时间复杂度降低到O(logn)。
Tree 是一种经常用到的数据结构，用来模拟具有树状结构性质的数据集合。
树里的每一个节点 node 有一个值 value和一个包含所有子节点 child nodes 的列表。从图的观点来看，树也可视为一个拥有N 个节点和N-1 条边的一个有向无环图。
二叉树是一种更为典型的树状结构。如它名字所描述的那样，二叉树是每个节点最多有两个子树的树结构，通常子树被称作“左子树”和“右子树”
Type of Trees  </description>
			<content type="html"><![CDATA[<p>数据结构可分为<strong>线性结构，和非线性结构</strong>。</p>
<p>常见的Array、List、Stack, Heap 和 Queue都是线性结构，在存储大量数据时访问速度比较慢，</p>
<p>而树(tree)则是一种非线性结构，使得访问时间复杂度降低到O(logn)。</p>
<p><strong>Tree</strong> 是一种经常用到的数据结构，用来模拟具有树状结构性质的数据集合。</p>
<p>树里的每一个节点 <strong>node</strong> 有一个值 value和一个包含所有子节点 child nodes 的列表。从图的观点来看，树也可视为一个拥有N 个节点和N-1 条边的一个有向无环图。</p>
<p>二叉树是一种更为典型的树状结构。如它名字所描述的那样，二叉树是每个节点最多有两个子树的树结构，通常子树被称作“左子树”和“右子树”</p>
<h3 id="type-of-trees">Type of Trees</h3>
<h2 id="httpscdnjsdelivrnetghdaiweinusblog_pictures202112291819706png"><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202112291819706.png" alt=""></h2>
]]></content>
		</item>
		
		<item>
			<title>Java Data Structure 8.1: Map_TreeMap</title>
			<link>https://daiwei.dev/posts/data-structure/8.3_treemap/</link>
			<pubDate>Sat, 08 Jan 2022 22:00:11 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/data-structure/8.3_treemap/</guid>
			<description>TreeMap </description>
			<content type="html"><![CDATA[<h2 id="treemap">TreeMap</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Java Data Structure 8.1: Map_LinkedHashMap</title>
			<link>https://daiwei.dev/posts/data-structure/8.2_linkedhashmap/</link>
			<pubDate>Sat, 08 Jan 2022 21:00:11 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/data-structure/8.2_linkedhashmap/</guid>
			<description>LinkedHashMap 1public class LinkedHashMap&amp;lt;K,V&amp;gt; 2extends HashMap&amp;lt;K,V&amp;gt; 3implements Map&amp;lt;K,V&amp;gt; HashMap： Array + LinkedList
LinkedHashMap:Array + doubly-linked List</description>
			<content type="html"><![CDATA[<h2 id="linkedhashmap">LinkedHashMap</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LinkedHashMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span>
<span class="ln">2</span><span class="kd">extends</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span>
<span class="ln">3</span><span class="kd">implements</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span>
</code></pre></div><p><code>HashMap</code>： Array + LinkedList</p>
<p><code>LinkedHashMap</code>:Array + doubly-linked List</p>
]]></content>
		</item>
		
		<item>
			<title>Java Data Structure 8.1: Map_HashMap</title>
			<link>https://daiwei.dev/posts/data-structure/8.1_hashmap/</link>
			<pubDate>Sat, 08 Jan 2022 20:00:11 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/data-structure/8.1_hashmap/</guid>
			<description>HashMap 1public class HashMap&amp;lt;K,V&amp;gt; // underlying is Array + LinkedList 2extends AbstractMap&amp;lt;K,V&amp;gt; 3implements Map&amp;lt;K,V&amp;gt;, Cloneable, Serializable 4 5// Direct Known Subclasses: 6LinkedHashMap, PrinterStateReasons 7 8Map&amp;lt;String, String&amp;gt; hashMap1 = new HashMap&amp;lt;&amp;gt;(); 9Map&amp;lt;String, String&amp;gt; hashMap2 = new HashMap&amp;lt;&amp;gt;(hashMap1); 10Map&amp;lt;String, String&amp;gt; hashMap3 = new HashMap&amp;lt;&amp;gt;(10,0.75f); 11 12// add elements 13hashMap1.put(101,&amp;#34; John&amp;#34;); 14hashMap1.put(202,&amp;#34; Ricky&amp;#34;); 15hashMap1.put(303,&amp;#34; Deep&amp;#34;); 16hashMap1.put(404,&amp;#34; Mark&amp;#34;); 17hashMap1.put(505,&amp;#34; Maya&amp;#34;); 18 19// Map Iteration 20for(Integer i:hashMap1.keySet())System.out.println(i); // Iterate Kay 21 22for(String s:hashMap1.values())System.out.println(s); // Iterate Value 23 24for(Map.</description>
			<content type="html"><![CDATA[<h2 id="hashmap">HashMap</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="c1">// underlying is Array + LinkedList
</span><span class="ln"> 2</span><span class="c1"></span><span class="kd">extends</span> <span class="n">AbstractMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span>
<span class="ln"> 3</span><span class="kd">implements</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;,</span> <span class="n">Cloneable</span><span class="o">,</span> <span class="n">Serializable</span>
<span class="ln"> 4</span>  
<span class="ln"> 5</span><span class="c1">// Direct Known Subclasses:
</span><span class="ln"> 6</span><span class="c1"></span><span class="n">LinkedHashMap</span><span class="o">,</span> <span class="n">PrinterStateReasons</span>
<span class="ln"> 7</span>  
<span class="ln"> 8</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">hashMap1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="ln"> 9</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">hashMap2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;(</span><span class="n">hashMap1</span><span class="o">);</span>
<span class="ln">10</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">hashMap3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;(</span><span class="n">10</span><span class="o">,</span><span class="n">0</span><span class="o">.</span><span class="na">75f</span><span class="o">);</span>
<span class="ln">11</span>
<span class="ln">12</span><span class="c1">// add elements
</span><span class="ln">13</span><span class="c1"></span><span class="n">hashMap1</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">101</span><span class="o">,</span><span class="s">&#34; John&#34;</span><span class="o">);</span>
<span class="ln">14</span><span class="n">hashMap1</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">202</span><span class="o">,</span><span class="s">&#34; Ricky&#34;</span><span class="o">);</span>
<span class="ln">15</span><span class="n">hashMap1</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">303</span><span class="o">,</span><span class="s">&#34; Deep&#34;</span><span class="o">);</span>
<span class="ln">16</span><span class="n">hashMap1</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">404</span><span class="o">,</span><span class="s">&#34; Mark&#34;</span><span class="o">);</span>
<span class="ln">17</span><span class="n">hashMap1</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">505</span><span class="o">,</span><span class="s">&#34; Maya&#34;</span><span class="o">);</span>
<span class="ln">18</span>
<span class="ln">19</span><span class="c1">// Map Iteration
</span><span class="ln">20</span><span class="c1"></span><span class="k">for</span><span class="o">(</span><span class="n">Integer</span> <span class="n">i</span><span class="o">:</span><span class="n">hashMap1</span><span class="o">.</span><span class="na">keySet</span><span class="o">())</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span> <span class="c1">// Iterate Kay
</span><span class="ln">21</span><span class="c1"></span>
<span class="ln">22</span><span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">:</span><span class="n">hashMap1</span><span class="o">.</span><span class="na">values</span><span class="o">())</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span> <span class="c1">// Iterate Value
</span><span class="ln">23</span><span class="c1"></span>
<span class="ln">24</span><span class="k">for</span><span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">entry</span><span class="o">:</span><span class="n">hashMap1</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="c1">// Iterate Kay + Value
</span><span class="ln">25</span><span class="c1"></span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Key &#34;</span><span class="o">+</span><span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">()+</span><span class="s">&#34; : Value&#34;</span><span class="o">+</span><span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
<span class="ln">26</span>
<span class="ln">27</span><span class="k">for</span><span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">entry</span><span class="o">:</span><span class="n">hashMap1</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="c1">// Iterate Entry
</span><span class="ln">28</span><span class="c1"></span>     <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Entry: &#34;</span><span class="o">+</span><span class="n">entry</span><span class="o">);</span>
<span class="ln">29</span>
<span class="ln">30</span><span class="n">hashMap1</span><span class="o">.</span><span class="na">forEach</span><span class="o">((</span><span class="n">k</span><span class="o">,</span><span class="n">v</span><span class="o">)-&gt;</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Key &#34;</span><span class="o">+</span><span class="n">k</span><span class="o">+</span><span class="s">&#34; : Value &#34;</span><span class="o">+</span><span class="n">v</span><span class="o">));</span> <span class="c1">// Iterate Entry
</span><span class="ln">31</span><span class="c1"></span>
<span class="ln">32</span><span class="c1">// result
</span><span class="ln">33</span><span class="c1"></span><span class="o">&gt;</span> <span class="n">Task</span> <span class="o">:</span><span class="n">MapTest</span><span class="o">.</span><span class="na">main</span><span class="o">()</span>
<span class="ln">34</span><span class="n">404</span>
<span class="ln">35</span><span class="n">101</span>
<span class="ln">36</span><span class="n">505</span>
<span class="ln">37</span><span class="n">202</span>
<span class="ln">38</span><span class="n">303</span>
<span class="ln">39</span> <span class="n">Mark</span>
<span class="ln">40</span> <span class="n">John</span>
<span class="ln">41</span> <span class="n">Maya</span>
<span class="ln">42</span> <span class="n">Ricky</span>
<span class="ln">43</span> <span class="n">Deep</span>
<span class="ln">44</span><span class="n">Key</span> <span class="n">404</span> <span class="o">:</span> <span class="n">Value</span> <span class="n">Mark</span>
<span class="ln">45</span><span class="n">Key</span> <span class="n">101</span> <span class="o">:</span> <span class="n">Value</span> <span class="n">John</span>
<span class="ln">46</span><span class="n">Key</span> <span class="n">505</span> <span class="o">:</span> <span class="n">Value</span> <span class="n">Maya</span>
<span class="ln">47</span><span class="n">Key</span> <span class="n">202</span> <span class="o">:</span> <span class="n">Value</span> <span class="n">Ricky</span>
<span class="ln">48</span><span class="n">Key</span> <span class="n">303</span> <span class="o">:</span> <span class="n">Value</span> <span class="n">Deep</span>
<span class="ln">49</span><span class="nl">Entry:</span> <span class="n">404</span><span class="o">=</span> <span class="n">Mark</span>
<span class="ln">50</span><span class="nl">Entry:</span> <span class="n">101</span><span class="o">=</span> <span class="n">John</span>
<span class="ln">51</span><span class="nl">Entry:</span> <span class="n">505</span><span class="o">=</span> <span class="n">Maya</span>
<span class="ln">52</span><span class="nl">Entry:</span> <span class="n">202</span><span class="o">=</span> <span class="n">Ricky</span>
<span class="ln">53</span><span class="nl">Entry:</span> <span class="n">303</span><span class="o">=</span> <span class="n">Deep</span>
<span class="ln">54</span><span class="n">Key</span> <span class="n">404</span> <span class="o">:</span> <span class="n">Value</span>  <span class="n">Mark</span>
<span class="ln">55</span><span class="n">Key</span> <span class="n">101</span> <span class="o">:</span> <span class="n">Value</span>  <span class="n">John</span>
<span class="ln">56</span><span class="n">Key</span> <span class="n">505</span> <span class="o">:</span> <span class="n">Value</span>  <span class="n">Maya</span>
<span class="ln">57</span><span class="n">Key</span> <span class="n">202</span> <span class="o">:</span> <span class="n">Value</span>  <span class="n">Ricky</span>
<span class="ln">58</span><span class="n">Key</span> <span class="n">303</span> <span class="o">:</span> <span class="n">Value</span>  <span class="n">Deep</span>
</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201131314189.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201131919115.png" alt=""></p>
<p><strong>HashMap</strong>是基于哈希表的<code>Map</code>接口实现。此实现提供所有可选的映射操作，并允许 <code>null</code>值和<code>null</code>键。（这个<code>HashMap</code> 类大致相当于<code>Hashtable</code>，除了它是不同步的并且允许 null 值。）这个类不保证映射的顺序。</p>
<p>此实现为基本操作 (<code>get</code>和<code>put</code>) 提供常数<code>O(1)</code>时间性能，假设哈希函数将元素正确地分散在桶中。对集合视图的迭代需要的时间与 <code>HashMap</code>实例的“容量”（桶的数量）加上其大小（键值映射的数量）成正比。因此，如果迭代性能很重要，则不要将初始容量设置得太高（或负载因子太低），这一点非常重要。</p>
<p><code>HashMap</code>有两个影响其性能的参数：<em>初始容量 initial capacity 16</em> 和<em>负载因子 load factor 0.75</em>。<em>容量</em>是哈希表中的 桶数 buckets，初始容量只是哈希表创建时的容量。<em>负载因子</em>是哈希表在其容量自动增加之前允许达到的程度的度量。 当哈希表中的条目数超过负载因子和当前容量的乘积时，对哈希表进行<em>重新</em>哈希（即重建内部数据结构），使哈希表的桶数大约增加0.75倍。</p>
<p>作为一般规则，默认负载因子 (.75) 在时间和空间成本之间提供了良好的折衷。较高的值会减少空间开销，但会增加查找成本（反映在<code>HashMap</code>类的大多数操作中，包括 <code>get</code>and <code>put</code>）。在设置其初始容量时，应考虑映射中的预期条目数及其负载因子，以尽量减少重新哈希操作 hashcode 的次数。如果初始容量大于最大条目数除以负载因子，则不会发生重新哈希操作。</p>
<hr>
<p>HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。</p>
<p>HashMap 实现了 Map 接口，根据键的 HashCode 值存储数据，具有很快的访问速度，最多允许一条记录的键为 null，不支持线程同步。</p>
<p>HashMap 是无序的，即不会记录插入的顺序。</p>
<p>HashMap 继承于AbstractMap，实现了 Map、Cloneable、java.io.Serializable 接口。</p>
<p>HashMap 如果再次添加相同的key值，它会<strong>覆盖</strong>key值所对应的内容，这也是与HashSet不同的一点，Set通过add添加相同的对象，<strong>不会再添加到Set中</strong>去。</p>
<h3 id="hashmap的底层实现">HashMap的底层实现</h3>
<p>jdk1.7 中 <strong>HashMap 底层</strong>是基于<strong>数组Array和链表List</strong>实现的。</p>
<p>jdk8中 <strong>HashMap ** 的底层实现添加了</strong>红黑树**，当链表长度大于等于<strong>8</strong>的时候链表会变成红黑树。</p>
<h3 id="为什么采用这种结构来存储元素呢">为什么采用这种结构来存储元素呢？</h3>
<p><strong>数组的特点：查询效率高，插入，删除效率低</strong>。</p>
<p><strong>链表的特点：查询效率低，插入删除效率高</strong>。</p>
<p>在HashMap底层使用数组加（链表或红黑树）的结构完美的解决了数组和链表的问题，使得查询和插入，删除的效率都很高。</p>
<h4 id="jdk8中hashmap为什么要引入红黑树"><strong>jdk8中HashMap为什么要引入红黑树？</strong></h4>
<p>避免在最极端的情况下链表变得很长很长，在查询的时候，效率会非常慢时间复杂度会由O(1)退化成O(n)。在链表长度大于8的时候引入红黑树可以增加链表查询的效率，红黑树是一种近似平衡的二叉查找树，其主要的优点就是“平衡“，即左右子树高度几乎一致，以此来防止树退化为链表，通过这种方式来保障查找的时间复杂度为 log(n)。</p>
<ul>
<li>红黑树查询：其访问性能近似于折半查找，时间复杂度 O(logn)；</li>
<li>链表查询：这种情况下，需要遍历全部元素才行，时间复杂度 O(n)；</li>
</ul>
<h3 id="红黑树的特性">红黑树的特性：</h3>
<p>1、每个节点要么是红色，要么是黑色，但根节点永远是黑色的；</p>
<p>2、每个红色节点的两个子节点一定都是黑色；</p>
<p>3、红色节点不能连续（也即是，红色节点的孩子和父亲都不能是红色）；</p>
<p>4、从任一节点到其子树中每个叶子节点的路径都包含相同数量的黑色节点；</p>
<p>5、所有的叶节点都是是黑色的（注意这里说叶子节点其实是上图中的 NIL 节点）；</p>
<p>在树的结构发生改变时（插入或者删除操作），往往会破坏上述条件 3 或条件 4，需要通过调整使得查找树重新满足红黑树的条件。</p>
<h3 id="hashmap-put">HashMap <code>put()</code></h3>
<p>map.put(k,v)实现原理
（1）首先将k,v封装到Node对象当中（节点）。
（2）然后它的底层会调用K的hashCode()方法得出hash值。
（3）通过哈希表函数/哈希算法，将hash值转换成数组的下标，下标位置上如果没有任何元素，就把Node添加到这个位置上。如果说下标对应的位置上有链表。此时，就会拿着k和链表上每个节点的k进行equal。如果所有的equals方法返回都是false，那么这个新的节点将被添加到链表的末尾。如其中有一个equals返回了true，那么这个节点的value将会被覆盖。</p>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201031701629.jpeg" alt=""></p>
<h3 id="hashmap-get">HashMap <code>get()</code></h3>
<p>map.put(k,v)实现原理
（1）首先将k,v封装到Node对象当中（节点）。
（2）然后它的底层会调用K的hashCode()方法得出hash值。
（3）通过哈希表函数/哈希算法，将hash值转换成数组的下标，下标位置上如果没有任何元素，就把Node添加到这个位置上。如果说下标对应的位置上有链表。此时，就会拿着k和链表上每个节点的k进行equal。如果所有的equals方法返回都是false，那么这个新的节点将被添加到链表的末尾。如其中有一个equals返回了true，那么这个节点的value将会被覆盖。</p>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201031702419.jpeg" alt=""></p>
<p><strong>一：HashMap的节点</strong>：HashMap是一个集合，键值对的集合,源码中每个节点用Node&lt;K,V&gt;表示</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="kd">static</span> <span class="kd">class</span> <span class="nc">Node</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
<span class="ln">2</span>   <span class="kd">final</span> <span class="kt">int</span> <span class="n">hash</span><span class="o">;</span>
<span class="ln">3</span>   <span class="kd">final</span> <span class="n">K</span> <span class="n">key</span><span class="o">;</span>
<span class="ln">4</span>   <span class="n">V</span> <span class="n">value</span><span class="o">;</span>
<span class="ln">5</span>   <span class="n">Node</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">next</span><span class="o">;</span>
</code></pre></div><p>Node是一个内部类，这里的key为键，value为值，next指向下一个元素，可以看出HashMap中的元素不是一个单纯的键值对，<strong>还包含下一个元素的引用</strong>。</p>
<p>每个元素节点都有一个next属性指向下一个节点，这里由数组结构变成了数组+链表结构,红黑树又是怎么回事呢？</p>
<p>因为链表中元素太多的时候会影响查找效率，所以当链表的元素个数达到8的时候使用链表存储就转变成了使用红黑树存储，原因就是<strong>红黑树是平衡二叉树，在查找性能方面比链表要高</strong>.</p>
<p><strong>二：HashMap的数据结构</strong>：HashMap的数据结构为 <strong>数组+(链表或红黑树)</strong>，上图：</p>
<p><img src="https://pic3.zhimg.com/80/v2-894d2f03f6672c9b6a1ced07fe27e1be_1440w.jpg" alt="img"></p>
<p>为什么采用这种结构来存储元素呢？</p>
<p><strong>数组的特点：查询效率高，插入，删除效率低</strong>。</p>
<p><strong>链表的特点：查询效率低，插入删除效率高</strong>。</p>
<p>在HashMap底层使用数组加（<strong>链表或红黑树</strong>）的结构完美的解决了数组和链表的问题，使得查询和插入，删除的效率都很高。</p>
<p><strong>三：HashMap存储元素的过程：</strong></p>
<p>有这样一段代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="ln">1</span>HashMap&lt;String,String&gt; map = new HashMap&lt;String,String&gt;();
<span class="ln">2</span>map.put(&#34;刘德华&#34;,&#34;张惠妹&#34;);
<span class="ln">3</span>map.put(&#34;张学友&#34;,&#34;大S&#34;);
</code></pre></div><p>现在我要把键值对 “刘德华”,”张惠妹”存入map:</p>
<p>第一步：计算出键“刘德华”的hashcode，该值用来定位要将这个元素存放到数组中的什么位置.</p>
<p><strong>什么是hashcode？</strong></p>
<p>在Object类中有一个方法:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="ln">1</span>public native int hashCode();
</code></pre></div><p>该方法用native修饰，所以是一个本地方法，<strong>所谓本地方法就是非java代码，这个代码通常用c或c++写成，在java中可以去调用它</strong>。</p>
<p>调用这个方法会生成一个int型的整数，我们叫它哈希码，哈希码和调用它的对象地址和内容有关.</p>
<p><strong>哈希码的特点是:</strong></p>
<p><strong>对于同一个对象如果没有被修改（使用equals比较返回true）那么无论何时它的hashcode值都是相同的</strong></p>
<p><strong>对于两个对象如果他们的equals返回false,那么他们的hashcode值也有可能相等</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="c1">// The formula for calculating the index of bucket (where n is the size of an array of the bucket)：
</span><span class="ln">2</span><span class="c1"></span><span class="n">Index</span> <span class="o">=</span> <span class="n">hashCode</span><span class="o">(</span><span class="n">key</span><span class="o">)</span> <span class="o">&amp;</span> <span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="n">1</span><span class="o">);</span>
<span class="ln">3</span><span class="n">Index</span> <span class="o">=</span> <span class="n">2657860</span> <span class="o">&amp;</span> <span class="o">(</span><span class="n">16</span><span class="o">-</span><span class="n">1</span><span class="o">)</span> <span class="o">=</span> <span class="n">4</span><span class="o">;</span>
</code></pre></div><hr>
<p><strong>HashMap存储流程</strong></p>
<p>前面寻址算法都是一样的，根据key的hashcode经过高低位异或之后的值，再按位与 &amp;(table.lingth - 1),得到一个数组下标，然后根据这个数组下标内的状况，状况不同，然后情况也不同，大概分为了4种状态：</p>
<p>**( 1.)第一种就是数组下标下内容为空：**这种情况没什么好说的，为空据直接占有这个slot槽位就好了，然后把当前.put方法传进来的key和value包装成一个node对象,放到这个slot中就好了。</p>
<p>**( 2.)第二种情况就是数组下标下内容不为空，但它引用的node还没有链化：**这种情况下先要对比一下这个node对象的key与当前put对象的key是否完全.相等，如果完全相等的情况下，就行进行replace操作，把之前的槽位中node.下的value替换成新的value就可以了，否则的话这个put操作就是一个正儿.八经的hash冲突,这种情况在slot槽位后面追加一个node就可以了,用尾插法 ( 前面讲过，jdk7是把新增元素添加到头部节点，而jdk8则添加到尾部节点)。</p>
<p>**( 3.)第三种就是该数组下标下内容已经被链化了：**这种情况和第二种情况处理很相似，首先也是迭代查找node，看看链表上中元素的key，与当前传过来的key是否完全一致，如果完全一致的话还是repleace操作，用put过来的新value替换掉之前node中的value，否则的话就是一致迭代到链表尾节点也没有匹配到完全一致的node，就和之前的一样，把put进来数据包装成node追加到链表的尾部，再检查一下当前链表的长度，有没有达到树化阈值，如果达到了阈值就调用一个树化方法，树化操作都是在这个方法里完成的。</p>
<p>**( 4.)第四种情况就是冲突很严重的情况下，这个链表已经转化成红黑树了：**红黑树就比较复杂 要将清楚这个红黑树还得从TreeNode说起 TreeNode继承了Node结构，在Node基础上加了几个字段，分别是指向父节点parent字段，指向左子节点left字段，指向右子节点right字段，还有一个表示颜色的red字段，这就是TreeNode的基本结构，然后红黑树的插入操作，首先找到一个合适的插入点，就是找到插入节点的父节点，然后红黑树它又满足二叉树的所有特性，所以找这个父节点的操作和二叉树排序是完全一致的，然后说一下这个二叉树排序，其实就是二分查找算法映射出来的结构，就是一个倒立的二叉树，然后每个节点都可以有自己的子节点，本且左节点小于但前节点，右节点大于当前节点，然后每次向下查找一层就能那个排除掉一半的数据，查找效率非常的高效，当查找的过程中也是分情况的。</p>
<p>首先第一种情况就是一直向下探测，直到查询到左子树或者右子树位null，说明整个树中，并没有发现node链表中的key与当前put key一致的TreeNode,那此时探测节点就是插入父节点的所在了，然后就是判断插入节点的hash值和父节点的hash值大小决定插入到父节点的左子树还是右子树。当然插入会打破平衡，还需要一个红黑树的平衡算法保持平衡。其次第二种情况就是根节点在向下探测过程中发现TreeNode中key与当前put的key完全一致，然后就也是一次repleace操作，替换value。</p>
<hr>
<p><strong>HashMap中的两个重要的参数：</strong> 初始容量大小和加载因子**，初始容量大小是创建时给数组分配的容量大小，默认值为16，**用数组容量大小乘以加载因子得到一个值，一旦数组中存储的元素个数超过该值就会调用rehash方法将数组容量增加到原来的两倍，专业术语叫做扩容.</p>
<p><strong>在做扩容的时候会生成一个新的数组，原来的所有数据需要重新计算哈希码值重新分配到新的数组，所以扩容的操作非常消耗性能.</strong></p>
<p>创建HashMap时我们可以通过合理的设置初始容量大小来达到尽量少的扩容的目的。加载因子也可以设置，但是除非特殊情况不建议设置.</p>
]]></content>
		</item>
		
		<item>
			<title>Java Data Structure 8: Map</title>
			<link>https://daiwei.dev/posts/data-structure/8_map/</link>
			<pubDate>Sat, 08 Jan 2022 16:00:11 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/data-structure/8_map/</guid>
			<description>Module java.base
Package java.util
Interface Map&amp;lt;K,V&amp;gt;     Type Parameters:
K - the type of keys maintained by this map
V - the type of mapped values
  All Known Subinterfaces:
Bindings, ConcurrentMap&amp;lt;K,V&amp;gt;, ConcurrentNavigableMap&amp;lt;K,V&amp;gt;, NavigableMap&amp;lt;K,V&amp;gt;, SortedMap&amp;lt;K,V&amp;gt;
  All Known Implementing Classes:
AbstractMap, Attributes, AuthProvider, ConcurrentHashMap, ConcurrentSkipListMap, EnumMap, HashMap, Hashtable, Headers, IdentityHashMap, LinkedHashMap, PrinterStateReasons, Properties, Provider, RenderingHints, ScriptObjectMirror, SimpleBindings, TabularDataSupport, TreeMap, UIDefaults, WeakHashMap
   1public interface Map&amp;lt;K,V&amp;gt;   A map in Java is a container object that stores elements in the form of key and value pairs.</description>
			<content type="html"><![CDATA[<p><strong>Module</strong> <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/module-summary.html">java.base</a></p>
<p><strong>Package</strong> <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/package-summary.html">java.util</a></p>
<h2 id="interface-mapkv">Interface Map&lt;K,V&gt;</h2>
<ul>
<li>
<ul>
<li>
<p><strong>Type Parameters:</strong></p>
<p><code>K</code> - the type of keys maintained by this map</p>
<p><code>V</code> - the type of mapped values</p>
</li>
<li>
<p><strong>All Known Subinterfaces:</strong></p>
<p><code>Bindings</code>, <code>ConcurrentMap&lt;K,V&gt;</code>, <code>ConcurrentNavigableMap&lt;K,V&gt;</code>, <code>NavigableMap&lt;K,V&gt;</code>, <code>SortedMap&lt;K,V&gt;</code></p>
</li>
<li>
<p><strong>All Known Implementing Classes:</strong></p>
<p><code>AbstractMap</code>, <code>Attributes</code>, <code>AuthProvider</code>, <strong><code>ConcurrentHashMap</code></strong>, <code>ConcurrentSkipListMap</code>, <code>EnumMap</code>, <strong><code>HashMap</code></strong>, <strong><code>Hashtable</code></strong>, <code>Headers</code>, <code>IdentityHashMap</code>, <strong><code>LinkedHashMap</code></strong>, <code>PrinterStateReasons</code>, <code>Properties</code>, <code>Provider</code>, <code>RenderingHints</code>, <code>ScriptObjectMirror</code>, <code>SimpleBindings</code>, <code>TabularDataSupport</code>, <strong><code>TreeMap</code></strong>, <code>UIDefaults</code>, <code>WeakHashMap</code></p>
</li>
</ul>
<hr>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span>
</code></pre></div></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201122005617.png" alt=""></p>
<p>A <strong>map in Java</strong> is a container object that stores elements in the form of key and value pairs. A key is a unique element (object) that serves as an “index” in the map.</p>
<p>A map <strong>cannot have duplicate keys</strong>, but values may be duplicate.</p>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201122004768.png" alt=""></p>
<ul>
<li>
<h3 id="methods-declared-in-interface-javautilmaphttpsdocsoraclecomenjavajavase11docsapijavabasejavautilmaphtml">Methods declared in interface java.util.<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html">Map</a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">clear</span><span class="o">,</span> <span class="n">containsKey</span><span class="o">,</span> <span class="n">containsValue</span><span class="o">,</span> <span class="n">entrySet</span><span class="o">,</span> <span class="n">equals</span><span class="o">,</span> <span class="n">get</span><span class="o">,</span> <span class="n">hashCode</span><span class="o">,</span> <span class="n">isEmpty</span><span class="o">,</span> <span class="n">keySet</span><span class="o">,</span> <span class="n">put</span><span class="o">,</span> <span class="n">putAll</span><span class="o">,</span> <span class="n">remove</span><span class="o">,</span> <span class="n">size</span><span class="o">,</span> <span class="n">values</span>
</code></pre></div></li>
</ul>
<p><strong>Key point:</strong> The main difference between maps and sets is that <strong>maps contain keys and values</strong>, whereas <strong>sets contain only keys.</strong></p>
<p>Map接口的实现。它们如下:</p>
<p>**1、AbstractMap：**是实现map接口的抽象类。它是HashMap、TreeMap、LinkedHashMap等所有具体地图实现类的父类。它实现了 Map 接口中除了 entrySet() 方法之外的所有方法。</p>
<p><strong>2. <a href="https://www.scientecheasy.com/2020/12/enummap-in-java.html/">EnumMap</a> :</strong> EnumMap 类扩展了 AbstractMap 并实现了 Map 接口。它特别适用于 Enum 类型的键。</p>
<p>**3. <a href="https://www.scientecheasy.com/2020/11/hashmap-in-java.html/">HashMap</a>：**它是一个扩展AbstractMap的具体类。它使用哈希表来存储元素。它主要用于定位值、插入和删除条目。</p>
<p>**4. <a href="https://www.scientecheasy.com/2020/11/treemap-in-java.html/">TreeMap</a> :**扩展 AbstractMap 并实现 NavigableMap 接口的具体类。它使用树来存储元素。它用于按排序顺序遍历键。可以使用 Comparable 接口或 Comparator 接口对键进行排序。</p>
<p>**5. <a href="https://www.scientecheasy.com/2020/11/linkedhashmap-in-java.html/">LinkedHashMap</a>：**是一个提供Java map接口实现的具体类。它使用支持映射中条目插入顺序的链表实现扩展了 HashMap 类。</p>
<p>HashMap 中的条目没有排序，但 LinkedHashMap 中的条目可以按照它们插入映射的顺序检索。</p>
<p><strong>6. <a href="https://www.scientecheasy.com/2020/12/weakhashmap-in-java.html/">WeakHashMap</a> :</strong> WeakHashMap 类扩展了 AbstractMap 接口以使用带有弱类型键的哈希表。弱键允许映射中的元素在其键不再在程序中的任何位置使用时被垃圾收集。</p>
<p>**7. <a href="https://www.scientecheasy.com/2020/12/identityhashmap-in-java.html/">IdentityHashMap</a>：**这个类扩展了 AbstractMap 并使用引用相等来比较条目。此类不用于一般目的。</p>
<hr>
<h3 id="interface-mapentrykv">Interface Map.Entry&lt;K,V&gt;</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="kd">public</span> <span class="kd">static</span> <span class="kd">interface</span> <span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span>
</code></pre></div><p>The <strong>Map.Entry interface</strong> enables us to work on an entry in the map. An entry of a map is an object of type Map.Entry interface, where Entry is an inner interface of Map interface.</p>
<p>The <code>Map.entrySet</code> method returns a collection-view of the map, whose elements are of this class.</p>
<p>Map.Entry 是Map的封闭接口，可以在map 接口里操控 entry。 <code>Map.entrySet</code> 方法可以通过遍历返回map里的元素。</p>
<p><strong>Methods define in Map.Entry</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">comparingByKey</span><span class="o">(),</span> <span class="n">comparingByValue</span><span class="o">(),</span> <span class="n">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">),</span> <span class="n">getKey</span><span class="o">(),</span> <span class="n">getValue</span><span class="o">(),</span> <span class="n">hashCode</span><span class="o">(),</span> <span class="n">setValue</span><span class="o">(</span><span class="n">V</span> <span class="n">value</span><span class="o">)</span>
</code></pre></div><hr>
<p>The general syntax to create a map object is as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">a</span><span class="o">)</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span> <span class="c1">// It create an empty map.
</span><span class="ln">2</span><span class="c1"></span><span class="n">b</span><span class="o">)</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;(</span><span class="n">Map</span> <span class="n">m</span><span class="o">);</span> <span class="c1">// It creates a map with initializing elements of m.
</span><span class="ln">3</span><span class="c1"></span><span class="n">c</span><span class="o">)</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;(</span><span class="kt">int</span> <span class="n">initialCapacity</span><span class="o">);</span> <span class="c1">// It creates a map with initialization of initial capacity of HashMap.
</span><span class="ln">4</span><span class="c1"></span><span class="n">d</span><span class="o">)</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;(</span><span class="kt">int</span> <span class="n">initialCapacity</span><span class="o">,</span> <span class="kt">float</span> <span class="n">fillRatio</span><span class="o">);</span> <span class="c1">// It creates a map object with initializing both initial capacity and fill ratio of HashMap.
</span></code></pre></div><hr>
<h2 id="heading"></h2>
<p>什么是Map? 在数组中我们是通过数组下标来对其内容索引的，而在Map中我们通过对象来对对象进行索引，用来索引的对象叫做key,其对应的对象叫做value.这就是我们平时说的键值对。</p>
<p>java.util 中的集合类包含 Java 中某些最常用的类。最常用的集合类是 List 和 Map。List 的具体实现包括 ArrayList 和 Vector，它们是可变大小的列表，比较适合构建、存储和操作任何类型对象元素列表。List 适用于按数值索引访问元素的情形。</p>
<p>Map 提供了一个更通用的元素存储方法。Map 集合类用于存储元素对（称作“键”和“值”），其中每个键映射到一个值。从概念上而言，您可以将 List 看作是具有数值键的 Map。而实际上，除了 List 和 Map 都在定义 java.util 中外，两者并没有直接的联系。</p>
<table>
<thead>
<tr>
<th style="text-align:left">Constructor</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>HashMap()</code></td>
<td style="text-align:left">Constructs an empty <code>HashMap</code> with the default initial capacity (16) and the default load factor (0.75).</td>
</tr>
<tr>
<td style="text-align:left"><code>HashMap(int initialCapacity)</code></td>
<td style="text-align:left">Constructs an empty <code>HashMap</code> with the specified initial capacity and the default load factor (0.75).</td>
</tr>
<tr>
<td style="text-align:left"><code>HashMap(int initialCapacity, float loadFactor)</code></td>
<td style="text-align:left">Constructs an empty <code>HashMap</code> with the specified initial capacity and load factor.</td>
</tr>
<tr>
<td style="text-align:left"><code>HashMap(Map&lt;? extends K,? extends V&gt; m)</code></td>
<td style="text-align:left">Constructs a new <code>HashMap</code> with the same mappings as the specified <code>Map</code>.</td>
</tr>
</tbody>
</table>
<p><strong>比较 Map 对象的等价性</strong></p>
<table>
<thead>
<tr>
<th><code>equals(Object o)</code></th>
<th>比较指定对象与此 Map 的等价性</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong><code>hashCode()</code></strong></td>
<td>返回此 Map 的哈希码</td>
</tr>
</tbody>
</table>
<p><strong>返回视图的 Map 方法：</strong> 使用这些方法返回的对象，您可以遍历 Map 的元素，还可以删除 Map 中的元素。</p>
<table>
<thead>
<tr>
<th>entrySet()</th>
<th>返回 Map 中所包含映射的 Set 视图。Set 中的每个元素都是一个 Map.Entry 对象，可以使用 getKey() 和 getValue() 方法（还有一个 setValue() 方法）访问后者的键元素和值元素</th>
</tr>
</thead>
<tbody>
<tr>
<td>keySet()</td>
<td>返回 Map 中所包含键的 Set 视图。删除 Set 中的元素还将删除 Map 中相应的映射（键和值）</td>
</tr>
<tr>
<td>values()</td>
<td>返回 map 中所包含值的 Collection 视图。删除 Collection 中的元素还将删除 Map 中相应的映射（键和值）</td>
</tr>
</tbody>
</table>
<p><strong>访问元素</strong></p>
<table>
<thead>
<tr>
<th>get(Object key)</th>
<th>返回与指定键关联的值</th>
</tr>
</thead>
<tbody>
<tr>
<td>containsKey(Object key)</td>
<td>如果 Map 包含指定键的映射，则返回 true</td>
</tr>
<tr>
<td>containsValue(Object value)</td>
<td>如果此 Map 将一个或多个键映射到指定值，则返回 true</td>
</tr>
<tr>
<td>isEmpty()</td>
<td>如果 Map 不包含键-值映射，则返回 true</td>
</tr>
<tr>
<td>size()</td>
<td>返回 Map 中的键-值映射的数目</td>
</tr>
</tbody>
</table>
<h2 id="java-自带了各种-map-类这些-map-类可归为三种类型">Java 自带了各种 Map 类。这些 Map 类可归为三种类型：</h2>
<ul>
<li>通用 Map，用于在应用程序中<strong>管理映射</strong>，通常在 java.util 程序包中实现
<ul>
<li><strong>HashMap</strong></li>
<li><strong>Hashtable</strong></li>
<li>Properties</li>
<li><strong>LinkedHashMap</strong></li>
<li>IdentityHashMap</li>
<li><strong>TreeMap</strong></li>
<li>WeakHashMap</li>
<li><strong>ConcurrentHashMap</strong></li>
</ul>
</li>
<li>专用 Map，您通常不必亲自创建此类 Map，而是<strong>通过某些其他类对其进行访问</strong>
<ul>
<li>java.util.jar.Attributes</li>
<li>javax.print.attribute.standard.PrinterStateReasons</li>
<li>java.security.Provider</li>
<li>java.awt.RenderingHints</li>
<li>javax.swing.UIDefaults</li>
</ul>
</li>
<li>一个用于帮助实现您自己的 Map 类的<strong>抽象类</strong>
<ul>
<li>AbstractMap</li>
</ul>
</li>
</ul>
<hr>
<h3 id="调整-map-实现的大小">调整 Map 实现的大小</h3>
<p>在哈希术语中，内部数组中的每个位置称作“存储桶”(bucket)，而可用的存储桶数（即内部数组的大小）称作容量 (capacity)。为使 Map 对象有效地处理任意数目的项，Map 实现可以调整自身的大小。但调整大小的开销很大。调整大小需要将所有元素重新插入到新数组中，这是因为不同的数组大小意味着对象现在映射到不同的索引值。先前冲突的键可能不再冲突，而先前不冲突的其他键现在可能冲突。这显然表明，<strong>如果将 Map 调整得足够大，则可以减少甚至不再需要重新调整大小，这很有可能显著提高速度</strong>。</p>
<hr>
<h3 id="负载因子">负载因子</h3>
<p>为确定何时调整大小，而不是对每个存储桶中的链接列表的深度进行记数，基于哈希的 Map 使用一个额外参数并粗略计算存储桶的密度。Map 在调整大小之前，使用名为“负载因子”的参数指示 Map 将承担的“负载”量，即它的负载程度。负载因子、项数（Map 大小）与容量之间的关系简单明了：</p>
<ul>
<li><strong>如果（负载因子）x（容量）&gt;（Map 大小），则调整 Map 大小</strong></li>
</ul>
<p>例如，如果默认负载因子为 0.75，默认容量为 11，则 11 x 0.75 = 8.25，该值向下取整为 8 个元素。因此，如果<strong>将第 8 个项添加到此 Map，则该 Map 将自身的大小调整为一个更大的值</strong>。相反，要计算避免调整大小所需的初始容量，用将要添加的项数除以负载因子，并向上取整，例如，</p>
<ul>
<li>对于负载因子为 0.75 的 100 个项，应将容量设置为 100/0.75 = 133.33，并将结果向上取整为 134（或取整为 135 以<strong>使用奇数</strong>）</li>
</ul>
<p><strong>奇数个存储桶使 map 能够通过减少冲突数来提高执行效率</strong>。虽然所做的测试（关联文件中的 并未表明质数可以始终获得更好的效率，但理想情形是容量取质数。1.4 版后的某些 Map（如 HashMap 和 LinkedHashMap，而非 Hashtable 或 IdentityHashMap）使用需要 2 的幂容量的哈希函数，但下一个最高 2 的幂容量由这些 Map 计算，因此您不必亲自计算。</p>
<p><strong>负载因子本身是空间和时间之间的调整折衷。较小的负载因子将占用更多的空间，但将降低冲突的可能性，从而将加快访问和更新的速度</strong>。使用大于 0.75 的负载因子可能是不明智的，而使用大于 1.0 的负载因子肯定是不明知的，这是因为这必定会引发一次冲突。使用小于 0.50 的负载因子好处并不大，但只要您有效地调整 Map 的大小，应不会对小负载因子造成性能开销，而只会造成<strong>内存开销</strong>。但较小的负载因子将意味着如果您未预先调整 Map 的大小，则导致更频繁的调整大小，从而<strong>降低性能</strong>，因此在调整负载因子时一定要注意这个问题。</p>
<hr>
<p><strong>为什么负载因子选择0.75？而不是0.5或者1.0？</strong></p>
<p>因为负载因子本身是空间开销和时间开销之间折衷选择。</p>
<p>较小的负载因子例如0.5，意味着将占用更多的内存，造成内存开销，而且较小的负载因子会导致map频繁调整大小，又造成性能开销。</p>
<p>而选择较大的负载因子例如1.0，则意味着只有当Map的内存被元素填满时才会调整大小，这样必定会引发冲突。</p>
<hr>
<p><strong>为啥HashMap中初始化大小为什么是16呢？</strong></p>
<p>hahmap每次扩容都是以 2的整数次幂进行扩容</p>
<p>因为是将二进制进行按位于，(16-1) 是 1111,末位是1，这样也能保证计算后的index既可以是奇数也可以是偶数，并且只要传进来的key足够分散，均匀那么按位于的时候获得的index就会减少重复，这样也就减少了hash的碰撞以及hashMap的查询效率。</p>
<p>那么到了这里你也许会问？ 那么就然16可以，是不是只要是2的整数次幂就可以呢？</p>
<p>答案是肯定的。那为什么不是8,4呢？ 因为是8或者4的话很容易导致map扩容影响性能，如果分配的太大的话又会浪费资源，所以就使用16作为初始大小。</p>
<hr>
<h3 id="选择适当的-map">选择适当的 Map</h3>
<p>应使用哪种 Map？ 它是否需要同步？ 要获得应用程序的最佳性能，这可能是所面临的两个最重要的问题。当使用通用 Map 时，调整 Map 大小和选择负载因子涵盖了 Map 调整选项。</p>
<p><strong>应使用哪种 Map？答案很简单：</strong> 不要为您的设计选择任何特定的 Map，除非实际的设计需要指定一个特殊类型的 Map。设计时通常不需要选择具体的 Map 实现。您可能知道自己需要一个 Map，但不知道使用哪种。而这恰恰就是使用 Map 接口的意义所在。直到需要时再选择 Map 实现 — 如果随处使用“Map”声明的变量，则更改应用程序中任何特殊 Map 的 Map 实现只需要更改一行，这是一种开销很少的调整选择。</p>
<ul>
<li>
<p>将您的所有 Map 变量声明为 Map，而不是任何具体实现，即不要声明为 HashMap 或 Hashtable，或任何其他 Map 类实现。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">Map</span> <span class="n">criticalMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">();</span> <span class="c1">//好
</span><span class="ln">2</span><span class="c1"></span>
<span class="ln">3</span><span class="n">HashMap</span> <span class="n">criticalMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">();</span> <span class="c1">//差
</span></code></pre></div></li>
<li>
<p>这使您能够只更改一行代码即可非常轻松地替换任何特定的 Map 实例。</p>
</li>
<li>
<p>下载 Doug Lea 的 util.concurrent 程序包。将 ConcurrentHashMap 用作默认 Map。当移植到 1.5 版时，将 java.util.concurrent.ConcurrentHashMap 用作您的默认 Map。不要将 ConcurrentHashMap 包装在同步的包装器中，即使它将用于多个线程。使用默认大小和负载因子。</p>
</li>
<li>
<p>监测您的应用程序。如果发现某个 Map 造成瓶颈，则分析造成瓶颈的原因，并部分或全部更改该 Map 的以下内容：Map 类；Map 大小；负载因子；关键对象 equals() 方法实现。专用的 Map 的基本上都需要特殊用途的定制 Map 实现，否则通用 Map 将实现您所需的性能目标。</p>
</li>
</ul>
<h3 id="map的线程安全问题">Map的线程安全问题</h3>
<ol>
<li>可以使用 <code>Collections.synchronizedMap()</code> 将未同步的 Map 转换为同步的 Map，但是维护复杂，执行效率很低。</li>
<li>Doug Lea 是纽约州立大学奥斯威戈分校计算机科学系的教授。他创建了一组公共领域的程序包（统称 util.concurrent），该程序包包含许多可以简化高性能并行编程的实用程序类。这些类中包含两个 Map，即 ConcurrentReaderHashMap 和 ConcurrentHashMap。这些 Map 实现是线程安全的。Java 1.5 版将把这些 Map 包含在一个新的 java.util.concurrent 程序包中。</li>
<li>所以当面临线程安全问题时，只需要使用 ConcurrentHashMap。</li>
</ol>
<hr>
<h3 id="hashmap和treemap比较"><strong>HashMap和TreeMap比较</strong></h3>
<p>（1）HashMap:适用于在Map中插入、删除和定位元素。</p>
<p>（2）Treemap:适用于按自然顺序或自定义顺序遍历键（key）。</p>
<p>（3）HashMap通常比TreeMap快一点（树和哈希表的数据结构使然），建议多使用HashMap,在需要排序的Map时候才用TreeMap.</p>
<p>（4）HashMap 非线程安全 TreeMap 非线程安全</p>
<p>（5）HashMap的结果是没有排序的，而TreeMap输出的结果是排好序的。</p>
<p>（6）HashMap底层基于数组+链表和红黑树实现，TreeMap底层基于红黑树 red-black-tree 实现。</p>
<p>　在HashMap中通过<code>get()</code>来获取value,通过<code>put()</code>来插入<code>value, ContainsKey()</code>则用来检验对象是否已经存在。可以看出，和ArrayList的操作相比，HashMap除了通过key索引其内容之外，别的方面差异并不大。</p>
<p>HashMap通过hashcode对其内容进行快速查找，而 TreeMap中所有的元素都保持着某种固定的顺序，如果你需要得到一个有序的结果你就应该使用TreeMap（HashMap中元素的排列顺序是不固定的）。</p>
]]></content>
		</item>
		
		<item>
			<title>Java Data Structure 7: Collection_Queue</title>
			<link>https://daiwei.dev/posts/data-structure/7_queue/</link>
			<pubDate>Fri, 07 Jan 2022 16:00:11 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/data-structure/7_queue/</guid>
			<description>Module java.base
Package java.util
Interface Queue   All Superinterfaces:
Collection&amp;lt;E&amp;gt;, Iterable&amp;lt;E&amp;gt;
  All Known Subinterfaces:
BlockingDeque&amp;lt;E&amp;gt;, BlockingQueue&amp;lt;E&amp;gt;, Deque&amp;lt;E&amp;gt;, TransferQueue&amp;lt;E&amp;gt;
  All Known Implementing Classes:
AbstractQueue, ArrayBlockingQueue, ArrayDeque, ConcurrentLinkedDeque, ConcurrentLinkedQueue, DelayQueue, LinkedBlockingDeque, LinkedBlockingQueue, LinkedList, LinkedTransferQueue, PriorityBlockingQueue, PriorityQueue, SynchronousQueue
   1public interface Queue&amp;lt;E&amp;gt; A collection designed for holding elements prior to processing. Besides basic Collection operations, queues provide additional insertion, extraction, and inspection operations. Each of these methods exists in two forms: one throws an exception if the operation fails, the other returns a special value (either null or false, depending on the operation).</description>
			<content type="html"><![CDATA[<p><strong>Module</strong> <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/module-summary.html">java.base</a></p>
<p><strong>Package</strong> <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/package-summary.html">java.util</a></p>
<h2 id="interface-queuee">Interface Queue<!-- raw HTML omitted --></h2>
<ul>
<li>
<p>All Superinterfaces:</p>
<p><code>Collection&lt;E&gt;</code>, <code>Iterable&lt;E&gt;</code></p>
</li>
<li>
<p>All Known Subinterfaces:</p>
<p><code>BlockingDeque&lt;E&gt;</code>, <code>BlockingQueue&lt;E&gt;</code>, <code>Deque&lt;E&gt;</code>, <code>TransferQueue&lt;E&gt;</code></p>
</li>
<li>
<p>All Known Implementing Classes:</p>
<p><code>AbstractQueue</code>, <code>ArrayBlockingQueue</code>, <code>ArrayDeque</code>, <code>ConcurrentLinkedDeque</code>, <code>ConcurrentLinkedQueue</code>, <code>DelayQueue</code>, <code>LinkedBlockingDeque</code>, <code>LinkedBlockingQueue</code>, <code>LinkedList</code>, <code>LinkedTransferQueue</code>, <code>PriorityBlockingQueue</code>, <code>PriorityQueue</code>, <code>SynchronousQueue</code></p>
</li>
</ul>
<hr>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Queue</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
</code></pre></div><p>A collection designed for holding elements prior to processing. Besides basic <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Collection.html"><code>Collection</code></a> operations, queues provide additional insertion, extraction, and inspection operations. Each of these methods exists in two forms: one throws an exception if the operation fails, the other returns a special value (either <code>null</code> or <code>false</code>, depending on the operation). The latter form of the insert operation is designed specifically for use with capacity-restricted <code>Queue</code> implementations; in most implementations, insert operations cannot fail.</p>
<table>
<thead>
<tr>
<th></th>
<th>Throws exception</th>
<th>Returns special value</th>
</tr>
</thead>
<tbody>
<tr>
<td>Insert</td>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Queue.html#add(E)"><code>add(e)</code></a></td>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Queue.html#offer(E)"><code>offer(e)</code></a></td>
</tr>
<tr>
<td>Remove</td>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Queue.html#remove()"><code>remove()</code></a></td>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Queue.html#poll()"><code>poll()</code></a></td>
</tr>
<tr>
<td>Examine</td>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Queue.html#element()"><code>element()</code></a></td>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Queue.html#peek()"><code>peek()</code></a></td>
</tr>
</tbody>
</table>
<p>Queues typically, but do not necessarily, order elements in a <strong>FIFO (first-in-first-out)</strong> manner. Among the exceptions are priority queues, which order elements according to a supplied comparator, or the elements' natural ordering, and LIFO queues (or stacks) which order the elements LIFO (last-in-first-out). Whatever the ordering used, the <em>head</em> of the queue is that element which would be removed by a call to <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Queue.html#remove()"><code>remove()</code></a> or <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Queue.html#poll()"><code>poll()</code></a>. In a FIFO queue, all new elements are inserted at the <em>tail</em> of the queue. Other kinds of queues may use different placement rules. Every <code>Queue</code> implementation must specify its ordering properties.</p>
<p>This interface is a member of the <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/package-summary.html#CollectionsFramework">Java Collections Framework</a>.</p>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201121521758.png" alt=""></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">Queue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PriorityQueue</span><span class="o">&lt;&gt;();</span>
<span class="ln">2</span><span class="n">Deque</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">deque1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
<span class="ln">3</span><span class="n">Deque</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">deque2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayDeque</span><span class="o">&lt;&gt;();</span>
</code></pre></div><p><strong>Note:</strong></p>
<p>\1. The <code>poll()</code> and <code>remove()</code> methods are similar, except that <code>poll()</code> returns <strong>null</strong> object if the queue is empty, whereas remove() throws an exception named NoSuchElementException.</p>
<p>\2. The <code>peek()</code> and <code>element()</code> methods are similar, except that <code>peek()</code> returns <strong>null</strong> object if the queue is empty, whereas element() throws an exception named NoSuchElementException.</p>
<p>\3. The <code>offer()</code> method is used to insert an element to the queue. This method is similar to the <code>add()</code> method inherited from the Collection interface, but the offer() method is more preferred for queues.</p>
<hr>
<h2 id="priorityqueue">PriorityQueue</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PriorityQueue</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="c1">// 底层实现 priority heap (binary heap)
</span><span class="ln">2</span><span class="c1"></span><span class="kd">extends</span> <span class="n">AbstractQueue</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln">3</span><span class="kd">implements</span> <span class="n">Serializable</span><span class="o">,</span> <span class="n">Queue</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="c1">// 可现实 Queue
</span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201121543458.png" alt=""></p>
<p>A <strong>PriorityQueue in Java</strong> is a queue or collection of elements in which elements are stored in order of their priority. 底层实现是 priority heap。</p>
<p>An ordinary queue is a first-in-first-out (FIFO) data structure</p>
<p>In Java PriorityQueue, elements are stored in order of their priority. When accessing elements, the element with the highest priority is removed first before the element with lower priority.</p>
<p>Element at the head of priority queue is <strong>least element</strong>.</p>
<p>Element at the tail of priority queue is <strong>greatest element</strong>.</p>
<p>enqueue 和 dequeue 的速度是 <code>Olog(n)</code>.</p>
<p>线程不安全，多线程下使用 <code>PriorityBlockingQueue</code> .</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">Queue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">pq</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PriorityQueue</span><span class="o">&lt;&gt;();</span>
<span class="ln"> 2</span>
<span class="ln"> 3</span><span class="n">pq</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">5</span><span class="o">);</span> <span class="c1">// add element in head of queue
</span><span class="ln"> 4</span><span class="c1"></span><span class="n">pq</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">4</span><span class="o">);</span>
<span class="ln"> 5</span><span class="n">pq</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">3</span><span class="o">);</span>
<span class="ln"> 6</span><span class="n">pq</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">1</span><span class="o">);</span>
<span class="ln"> 7</span><span class="n">pq</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">2</span><span class="o">);</span>
<span class="ln"> 8</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">pq</span><span class="o">);</span> <span class="c1">// [1, 2, 4, 5, 3] 遍历打印的时候并不会按顺序
</span><span class="ln"> 9</span><span class="c1"></span>
<span class="ln">10</span><span class="k">while</span><span class="o">(</span><span class="n">pq</span><span class="o">.</span><span class="na">peek</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">11</span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">pq</span><span class="o">.</span><span class="na">peek</span><span class="o">());</span>  <span class="c1">// 1 2 3 4 5 但是使用peek方法的时候就会按从小到大的顺序
</span><span class="ln">12</span><span class="c1"></span>    <span class="n">pq</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span> <span class="c1">// remove head element
</span><span class="ln">13</span><span class="c1"></span><span class="o">}</span>
</code></pre></div><hr>
<h2 id="dequeue">Dequeue</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Deque</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln"> 2</span><span class="kd">extends</span> <span class="n">Queue</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln"> 3</span>  
<span class="ln"> 4</span><span class="c1">// All Superinterfaces:
</span><span class="ln"> 5</span><span class="c1"></span><span class="n">Collection</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;,</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;,</span> <span class="n">Queue</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln"> 6</span><span class="c1">// All Known Subinterfaces:
</span><span class="ln"> 7</span><span class="c1"></span><span class="n">BlockingDeque</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln"> 8</span><span class="c1">// All Known Implementing Classes:
</span><span class="ln"> 9</span><span class="c1"></span><span class="n">ArrayDeque</span><span class="o">,</span> <span class="n">ConcurrentLinkedDeque</span><span class="o">,</span> <span class="n">LinkedBlockingDeque</span><span class="o">,</span> <span class="n">LinkedList</span> 
<span class="ln">10</span>  
<span class="ln">11</span><span class="n">Deque</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">dl</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
<span class="ln">12</span><span class="n">Deque</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">da</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayDeque</span><span class="o">&lt;&gt;();</span>
</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201121648746.png" alt=""></p>
<p>The most important features of Deque are push and pop. The <code>push()</code> and <code>pop()</code> methods are commonly used to enable a Deque to function as a stack.</p>
<p>The name <em>deque</em> is short for &ldquo;<strong>double ended queue</strong>&rdquo; and is usually pronounced &ldquo;deck&rdquo;.</p>
<hr>
<p><strong>Summary of Deque methods</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>First Element (Head)</th>
<th>Last Element (Tail)</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Throws exception</td>
<td>Special value</td>
<td>Throws exception</td>
<td>Special value</td>
<td></td>
</tr>
<tr>
<td>Insert</td>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#addFirst(E)"><code>addFirst(e)</code></a></td>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#offerFirst(E)"><code>offerFirst(e)</code></a></td>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#addLast(E)"><code>addLast(e)</code></a></td>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#offerLast(E)"><code>offerLast(e)</code></a></td>
</tr>
<tr>
<td>Remove</td>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#removeFirst()"><code>removeFirst()</code></a></td>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#pollFirst()"><code>pollFirst()</code></a></td>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#removeLast()"><code>removeLast()</code></a></td>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#pollLast()"><code>pollLast()</code></a></td>
</tr>
<tr>
<td>Examine</td>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#getFirst()"><code>getFirst()</code></a></td>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#peekFirst()"><code>peekFirst()</code></a></td>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#getLast()"><code>getLast()</code></a></td>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#peekLast()"><code>peekLast()</code></a></td>
</tr>
</tbody>
</table>
<p><strong>Comparison of <em>Queue and Deque</em> methods</strong></p>
<table>
<thead>
<tr>
<th><code>Queue</code> Method</th>
<th>Equivalent <code>Deque</code> Method</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#add(E)"><code>add(e)</code></a></td>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#addLast(E)"><code>addLast(e)</code></a></td>
</tr>
<tr>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#offer(E)"><code>offer(e)</code></a></td>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#offerLast(E)"><code>offerLast(e)</code></a></td>
</tr>
<tr>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#remove()"><code>remove()</code></a></td>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#removeFirst()"><code>removeFirst()</code></a></td>
</tr>
<tr>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#poll()"><code>poll()</code></a></td>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#pollFirst()"><code>pollFirst()</code></a></td>
</tr>
<tr>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#element()"><code>element()</code></a></td>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#getFirst()"><code>getFirst()</code></a></td>
</tr>
<tr>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#peek()"><code>peek()</code></a></td>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#peekFirst()"><code>peekFirst()</code></a></td>
</tr>
</tbody>
</table>
<p><strong>Comparison of <em>Stack and Deque</em> methods</strong></p>
<table>
<thead>
<tr>
<th>Stack Method</th>
<th>Equivalent <code>Deque</code> Method</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#push(E)"><code>push(e)</code></a></td>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#addFirst(E)"><code>addFirst(e)</code></a></td>
</tr>
<tr>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#pop()"><code>pop()</code></a></td>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#removeFirst()"><code>removeFirst()</code></a></td>
</tr>
<tr>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#peek()"><code>peek()</code></a></td>
<td><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html#getFirst()"><code>getFirst()</code></a></td>
</tr>
</tbody>
</table>
<hr>
<h3 id="aarrydeque">AarryDeque</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArrayDeque</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln">2</span><span class="kd">extends</span> <span class="n">AbstractCollection</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln">3</span><span class="kd">implements</span> <span class="n">Deque</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;,</span> <span class="n">Cloneable</span><span class="o">,</span> <span class="n">Serializable</span>
</code></pre></div><p>Resizable-array implementation of the <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html"><code>Deque</code></a> interface. Array deques have <strong>no capacity restrictions</strong>; they grow as necessary to support usage. They are <strong>not thread-safe</strong>; in the absence of external synchronization, they do not support concurrent access by multiple threads. <strong>Null elements are prohibited</strong>. <strong>This class is likely to be faster than <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Stack.html"><code>Stack</code></a> when used as a stack, and faster than <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedList.html"><code>LinkedList</code></a> when used as a queue.</strong></p>
<p><strong>ArrayDeque 用作 stack 的时候比 Stack 快，用作 queue 队列的时候比 LinkedList 快。</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">Deque</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">da</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayDeque</span><span class="o">()&lt;&gt;;</span>
<span class="ln"> 2</span>
<span class="ln"> 3</span><span class="n">da</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">3</span><span class="o">);</span> <span class="c1">// [3]
</span><span class="ln"> 4</span><span class="c1"></span><span class="n">da</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">2</span><span class="o">);</span> <span class="c1">// [3,2]
</span><span class="ln"> 5</span><span class="c1"></span><span class="n">da</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">4</span><span class="o">);</span> <span class="c1">// [4,3,2]
</span><span class="ln"> 6</span><span class="c1"></span><span class="n">da</span><span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="n">1</span><span class="o">);</span> <span class="c1">// [4,3,2,1]
</span><span class="ln"> 7</span><span class="c1"></span>
<span class="ln"> 8</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">da</span><span class="o">);</span> <span class="c1">// [4, 3, 2, 1]
</span><span class="ln"> 9</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">da</span><span class="o">.</span><span class="na">pollFirst</span><span class="o">());</span> <span class="c1">// [4]
</span><span class="ln">10</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">da</span><span class="o">.</span><span class="na">pollLast</span><span class="o">());</span> <span class="c1">// [1]
</span><span class="ln">11</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">da</span><span class="o">);</span> <span class="c1">// [3,2]
</span><span class="ln">12</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">da</span><span class="o">.</span><span class="na">peekFirst</span><span class="o">());</span> <span class="c1">// [3]
</span><span class="ln">13</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">da</span><span class="o">.</span><span class="na">peekLast</span><span class="o">());</span> <span class="c1">// [2]
</span></code></pre></div><hr>
<h3 id="arraydeque-vs-linkedlist">ArrayDeque vs LinkedList</h3>
<p>Key differences:</p>
<ol>
<li>The <em>ArrayDeque</em> class is the resizable array implementation of the <em>Deque</em> interface and <em>LinkedList</em> class is the list implementation</li>
<li><strong>NULL</strong> elements can be added to <em><strong>LinkedList</strong></em> but not in <em>ArrayDeque</em></li>
<li><em>ArrayDeque</em> is more efficient than the <em>LinkedList</em> for add and remove operation at both ends and LinkedList implementation is efficient for removing the current element during the iteration</li>
<li>The <em><strong>LinkedList</strong></em> implementation consumes <strong>more memory</strong> than the <em>ArrayDeque</em></li>
</ol>
<p>在java中，Queue被定义成单端队列使用，Deque被定义成双端队列使用。
而由于双端队列的定义，Deque可以作为栈或者队列使用，而Queue只能作为队列或者依赖于子类的实现作为堆使用。</p>
]]></content>
		</item>
		
		<item>
			<title>Java Data Structure 6: Collection_Set</title>
			<link>https://daiwei.dev/posts/data-structure/6_set/</link>
			<pubDate>Thu, 06 Jan 2022 16:00:11 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/data-structure/6_set/</guid>
			<description>Set a unordered collection that contains no duplicate elements, and at most one null element.
Set的底层实现是map。常用HashSet, LinkedHashSet, TreeSet.(只有 TreeSet 不允许存在 null 元素)
1Module java.base 2Package java.util 3Interface Set&amp;lt;E&amp;gt; 4 5// All Superinterfaces: 6Collection&amp;lt;E&amp;gt;, Iterable&amp;lt;E&amp;gt; 7// All Known Subinterfaces: 8EventSet, NavigableSet&amp;lt;E&amp;gt;, SortedSet&amp;lt;E&amp;gt; 9// All Known Implementing Classes: 10AbstractSet, ConcurrentHashMap.KeySetView, ConcurrentSkipListSet, CopyOnWriteArraySet, EnumSet, HashSet, JobStateReasons, LinkedHashSet, TreeSet 11 12public interface Set&amp;lt;E&amp;gt; 13extends Collection&amp;lt;E&amp;gt; Set 创建对象：
1Set&amp;lt;String&amp;gt; hashSet = new HashSet&amp;lt;&amp;gt;(); 2Set&amp;lt;Integer&amp;gt; treeSet = new TreeSet&amp;lt;&amp;gt;(); 3Set&amp;lt;String&amp;gt; linkedHashSet = new LinkedHashSet&amp;lt;&amp;gt;(); Iterate SET :</description>
			<content type="html"><![CDATA[<p><strong>Set</strong> a unordered collection that contains no duplicate elements, and at most one null element.</p>
<p><strong>Set</strong>的底层实现是<strong>map</strong>。常用HashSet, LinkedHashSet, TreeSet.(只有 TreeSet 不允许存在 null 元素)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">Module</span> <span class="n">java</span><span class="o">.</span><span class="na">base</span>
<span class="ln"> 2</span><span class="n">Package</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span>
<span class="ln"> 3</span><span class="n">Interface</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln"> 4</span>  
<span class="ln"> 5</span><span class="c1">// All Superinterfaces:
</span><span class="ln"> 6</span><span class="c1"></span><span class="n">Collection</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;,</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln"> 7</span><span class="c1">// All Known Subinterfaces:
</span><span class="ln"> 8</span><span class="c1"></span><span class="n">EventSet</span><span class="o">,</span> <span class="n">NavigableSet</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;,</span> <span class="n">SortedSet</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln"> 9</span><span class="c1">// All Known Implementing Classes:
</span><span class="ln">10</span><span class="c1"></span><span class="n">AbstractSet</span><span class="o">,</span> <span class="n">ConcurrentHashMap</span><span class="o">.</span><span class="na">KeySetView</span><span class="o">,</span> <span class="n">ConcurrentSkipListSet</span><span class="o">,</span> <span class="n">CopyOnWriteArraySet</span><span class="o">,</span> <span class="n">EnumSet</span><span class="o">,</span> <span class="n">HashSet</span><span class="o">,</span> <span class="n">JobStateReasons</span><span class="o">,</span> <span class="n">LinkedHashSet</span><span class="o">,</span> <span class="n">TreeSet</span>
<span class="ln">11</span>  
<span class="ln">12</span><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Set</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln">13</span><span class="kd">extends</span> <span class="n">Collection</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201111541761.png" alt=""></p>
<p>Set 创建对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">hashSet</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>
<span class="ln">2</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">treeSet</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeSet</span><span class="o">&lt;&gt;();</span>
<span class="ln">3</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">linkedHashSet</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedHashSet</span><span class="o">&lt;&gt;();</span>
</code></pre></div><p>Iterate SET :</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="c1">// method 1 for
</span><span class="ln"> 2</span><span class="c1"></span><span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">hashSet</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 3</span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
<span class="ln"> 4</span><span class="o">}</span>
<span class="ln"> 5</span>
<span class="ln"> 6</span><span class="c1">// method 2 foreach after java 1.8
</span><span class="ln"> 7</span><span class="c1"></span><span class="n">hashSet</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
<span class="ln"> 8</span>
<span class="ln"> 9</span><span class="c1">// method 3 Iterable
</span><span class="ln">10</span><span class="c1"></span><span class="n">Iterator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="n">hashSet</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
<span class="ln">11</span><span class="k">while</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
<span class="ln">12</span>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
<span class="ln">13</span><span class="o">}</span>
</code></pre></div><hr>
<h2 id="hashset">HashSet</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JAVA" data-lang="JAVA"><span class="ln">1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HashSet</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="c1">// 底层实现是 HashMap
</span><span class="ln">2</span><span class="c1"></span><span class="kd">extends</span> <span class="n">AbstractSet</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln">3</span><span class="kd">implements</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;,</span> <span class="n">Cloneable</span><span class="o">,</span> <span class="n">Serializable</span> <span class="c1">// 实现了 Set
</span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201121249726.png" alt=""></p>
<p>This class implements the <code>Set</code> interface, backed by a hash table (actually a <code>HashMap</code> instance).</p>
<p>HashSet 类实现了<code>Set</code>接口，由一个哈希表（实际上是一个<code>HashMap</code>实例）支持。它不保证集合的迭代顺序；特别是，它不保证订单会随着时间的推移保持不变。此类**允许一个<code>null</code> **元素。</p>
<ul>
<li>
<p>HashSet 基于 <strong>HashMap</strong> 来实现的，利用<strong>HashMap</strong> 中 <strong>Key</strong> 的唯一性，来保证HashSet中<strong>没有重复值</strong>。而 HashMap 的 value 则存储了一个 <code>PRESENT</code>，它是一个静态的 Object 对象。</p>
</li>
<li>
<p>HashSet <strong>允许有 null 值</strong>。</p>
</li>
<li>
<p>HashSet 是无序的，即不会记录插入的顺序。</p>
</li>
<li>
<p>HashSet 不是线程安全的， 如果多个线程尝试同时修改 HashSet，则最终结果是不确定的。</p>
</li>
<li>
<p>HashSet 实现了 Set 接口。</p>
</li>
</ul>
<p>线程安全</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">Set</span> <span class="n">s</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">synchronizedSet</span><span class="o">(</span><span class="k">new</span> <span class="n">HashSet</span><span class="o">(...));</span>
</code></pre></div><p>Define HashSet:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">set1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>
<span class="ln">2</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">set2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;(</span><span class="n">initialCapacity</span><span class="o">:</span> <span class="n">10</span><span class="o">);</span> <span class="c1">//申明容量
</span><span class="ln">3</span><span class="c1"></span><span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">set3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;(</span><span class="n">initialCapacity</span><span class="o">:</span> <span class="n">10</span><span class="o">,</span><span class="n">loadFactor</span><span class="o">:</span> <span class="n">0</span><span class="o">.</span><span class="na">75f</span><span class="o">);</span> <span class="c1">// 申明容量和加载因子
</span></code></pre></div><h3 id="hashset-的实现原理">HashSet 的实现原理？</h3>
<p>首先，我们需要知道它是Set的一个实现，所以保证了当中没有重复的元素。</p>
<p>其次，HashSet使用的是散列函数，那么它当中的元素也就无序可寻。当中是允许元素为null的。</p>
<p>先对实现原理进行一个总结：</p>
<p>(1)基于HashMap实现的，默认构造函数是构建一个初始容量为16，负载因子为0.75 的HashMap。封装了一个 HashMap 对象来存储所有的集合元素，所有放入 HashSet 中的集合元素实际上由 HashMap 的 key 来保存，而 HashMap 的 value 则存储了一个虚拟的Object对象 PRESENT，它是一个静态的 Object 对象。</p>
<p>(2)当我们试图把某个类的对象当成 HashMap的 key，或试图将这个类的对象放入 HashSet 中保存时，重写该类的equals(Object obj)方法和 hashCode() 方法很重要，而且这两个方法的返回值必须保持一致：当该类的两个的 hashCode() 返回值相同时，它们通过 equals() 方法比较也应该返回 true。通常来说，所有参与计算 hashCode() 返回值的关键属性，都应该用于作为 equals() 比较的标准。</p>
<p>(3)HashSet的其他操作都是基于HashMap的。</p>
<p><strong>HashSet in Java is used when</strong></p>
<ol>
<li>We don’t want to store duplicate elements. 不想要重复的数据</li>
<li>We want to remove duplicate elements from the list. 想要去移除重复数据</li>
<li>HashSet is more preferred when add and remove operations are more as compared to get operations. 添加和删除数据比查询快</li>
<li>We are not working in a multithreading environment. 线程不安全</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kn">import</span> <span class="nn">java.util.HashSet</span><span class="o">;</span>
<span class="ln"> 2</span>
<span class="ln"> 3</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HashSetTest</span> <span class="o">{</span>
<span class="ln"> 4</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 5</span>        <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">hashSet</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>
<span class="ln"> 6</span>        <span class="n">hashSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;Google&#34;</span><span class="o">);</span>
<span class="ln"> 7</span>        <span class="n">hashSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;FACEBOOK&#34;</span><span class="o">);</span>
<span class="ln"> 8</span>        <span class="n">hashSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;twitter&#34;</span><span class="o">);</span>
<span class="ln"> 9</span>        <span class="n">hashSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
<span class="ln">10</span>        <span class="n">hashSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;Instagram&#34;</span><span class="o">);</span>
<span class="ln">11</span>        <span class="n">hashSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;Google&#34;</span><span class="o">);</span> <span class="c1">// hashCode相同，返回true，不会被存储进hashSet
</span><span class="ln">12</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">hashSet</span><span class="o">);</span> <span class="c1">//[Google, FACEBOOK, twitter, Instagram]
</span><span class="ln">13</span><span class="c1"></span>        <span class="kt">boolean</span> <span class="n">a</span> <span class="o">=</span> <span class="n">hashSet</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&#34;Tencent&#34;</span><span class="o">);</span>
<span class="ln">14</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">);</span> <span class="c1">// hashSet中不包含Tencent，返回false
</span><span class="ln">15</span><span class="c1"></span>    <span class="o">}</span>
<span class="ln">16</span><span class="o">}</span>
</code></pre></div><hr>
<h2 id="linkedhashset">LinkedHashSet</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LinkedHashSet</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="c1">// 底层实现是 double-linked-list 双向链表
</span><span class="ln">2</span><span class="c1"></span><span class="kd">extends</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln">3</span><span class="kd">implements</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;,</span> <span class="n">Cloneable</span><span class="o">,</span> <span class="n">Serializable</span> <span class="c1">// 实现了 Set
</span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201121249942.png" alt=""></p>
<p><strong>LinkedHashSet</strong>是继承<strong>HashSet</strong>一样都实现了<strong>Set</strong>, 不同之处是 <code>LinkedHashSet</code>它维护一个贯穿其所有条目的双向链表 <code>doubly linked list</code>。这个链表定义了迭代顺序，即元素插入集合的插入顺序。 <strong>简而言之，HashSet 没有顺序, LinkedHashSet 有顺序。</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">hashSet</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>
<span class="ln"> 2</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">linkedHashSet</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedHashSet</span><span class="o">&lt;&gt;();</span>
<span class="ln"> 3</span>
<span class="ln"> 4</span><span class="n">hashSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;aaa&#34;</span><span class="o">);</span>
<span class="ln"> 5</span><span class="n">hashSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;bbb&#34;</span><span class="o">);</span>
<span class="ln"> 6</span><span class="n">hashSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
<span class="ln"> 7</span>
<span class="ln"> 8</span><span class="n">linkedHashSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;aaa&#34;</span><span class="o">);</span>
<span class="ln"> 9</span><span class="n">linkedHashSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;bbb&#34;</span><span class="o">);</span>
<span class="ln">10</span><span class="n">linkedHashSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
<span class="ln">11</span>
<span class="ln">12</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">hashSet</span><span class="o">);</span> <span class="c1">// [aaa, null, bbb] 和插入顺序不一样
</span><span class="ln">13</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">linkedHashSet</span><span class="o">);</span> <span class="c1">// [aaa, bbb, null] 顺序和插入顺序一样
</span></code></pre></div><p><strong>When to use LinkedHashSet in Java?</strong></p>
<p>LinkedHashSet can be used when you do not want duplicate elements (i.e. want to remove duplicate elements) and want to maintain order in which elements are inserted.</p>
<p>If you want to impose different orders such as increasing or decreasing order, you can use TreeSet class that you will learn in the next tutorial.</p>
<p><strong>Which is better to use: HashSet or LinkedHashSet?</strong></p>
<p>If you do not require to maintain order in which elements are inserted then use HashSet that is more fast and efficient than LinkedHashSet.</p>
<hr>
<h2 id="treeset">TreeSet</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TreeSet</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="c1">// 底层实现是 TreeMap
</span><span class="ln">2</span><span class="c1"></span><span class="kd">extends</span> <span class="n">AbstractSet</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln">3</span><span class="kd">implements</span> <span class="n">NavigableSet</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;,</span> <span class="n">Cloneable</span><span class="o">,</span> <span class="n">Serializable</span> <span class="c1">// 实现了 NavigableSet
</span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201121250758.png" alt=""></p>
<p>A <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/NavigableSet.html"><code>NavigableSet</code></a> implementation based on a <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/TreeMap.html"><code>TreeMap</code></a>. The elements are ordered using their <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Comparable.html">natural ordering</a>, or by a <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Comparator.html"><code>Comparator</code></a> provided at set creation time, depending on which constructor is used.</p>
<p>This implementation provides guaranteed <strong>log(n) time cost</strong> for the basic operations (<code>add</code>, <code>remove</code> and <code>contains</code>).</p>
<p>TreeSet里面有一个私有化的成员变量NavigableMap，通过构造函数可以发现，NavigableMap实际上是一个TreeMap。TreeSet的所有搜索功能都是借助TreeMap的key的相关操作实现的。</p>
<p><strong>所以TreeSet 的底层实现是TreeMap。</strong></p>
<p><strong>TreeSet 不可以插入 null 元素， 内部顺序是按生序排列。</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">treeSet</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeSet</span><span class="o">&lt;&gt;();</span>
<span class="ln">2</span><span class="n">treeSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">3</span><span class="o">);</span>
<span class="ln">3</span><span class="n">treeSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>
<span class="ln">4</span><span class="n">treeSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">2</span><span class="o">);</span>
<span class="ln">5</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">treeSet</span><span class="o">);</span> <span class="c1">// [0, 2, 3] 自动按生序排列
</span></code></pre></div><p><strong>NavigableSet 常用 methods</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span>        <span class="n">NavigableSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">navigableSet</span><span class="o">=</span><span class="k">new</span> <span class="n">TreeSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
<span class="ln"> 2</span> 
<span class="ln"> 3</span>        <span class="n">navigableSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">1</span><span class="o">);</span>
<span class="ln"> 4</span>        <span class="n">navigableSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">2</span><span class="o">);</span>
<span class="ln"> 5</span>        <span class="n">navigableSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">3</span><span class="o">);</span>
<span class="ln"> 6</span>        <span class="n">navigableSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">4</span><span class="o">);</span>
<span class="ln"> 7</span>        <span class="n">navigableSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">5</span><span class="o">);</span>
<span class="ln"> 8</span>        <span class="n">navigableSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">8</span><span class="o">);</span>
<span class="ln"> 9</span>        <span class="n">navigableSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">10</span><span class="o">);</span>
<span class="ln">10</span> 
<span class="ln">11</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;元素个数：&#34;</span> <span class="o">+</span> <span class="n">navigableSet</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
<span class="ln">12</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;返回大于等于6的最小元素：&#34;</span> <span class="o">+</span> <span class="n">navigableSet</span><span class="o">.</span><span class="na">ceiling</span><span class="o">(</span><span class="n">6</span><span class="o">));</span>
<span class="ln">13</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;返回小于等于6的最大元素：&#34;</span> <span class="o">+</span> <span class="n">navigableSet</span><span class="o">.</span><span class="na">floor</span><span class="o">(</span><span class="n">6</span><span class="o">));</span>
<span class="ln">14</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;返回倒序迭代器：&#34;</span> <span class="o">+</span> <span class="n">navigableSet</span><span class="o">.</span><span class="na">descendingIterator</span><span class="o">());</span>
<span class="ln">15</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;返回倒序的NavigableSet：&#34;</span> <span class="o">+</span> <span class="n">navigableSet</span><span class="o">.</span><span class="na">descendingSet</span><span class="o">());</span>
<span class="ln">16</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;返回小于4的所有元素（不包括4）的所有元素的集合：&#34;</span> <span class="o">+</span> <span class="n">navigableSet</span><span class="o">.</span><span class="na">headSet</span><span class="o">(</span><span class="n">4</span><span class="o">));</span>
<span class="ln">17</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;返回大于5的最小元素:&#34;</span> <span class="o">+</span> <span class="n">navigableSet</span><span class="o">.</span><span class="na">higher</span><span class="o">(</span><span class="n">5</span><span class="o">));</span>
<span class="ln">18</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;返回小于5的最大元素：&#34;</span> <span class="o">+</span> <span class="n">navigableSet</span><span class="o">.</span><span class="na">lower</span><span class="o">(</span><span class="n">5</span><span class="o">));</span>
<span class="ln">19</span> 
<span class="ln">20</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;返回2（包含）到8（不包含）之间的所有元素的有序集合&#34;</span> <span class="o">+</span> <span class="n">navigableSet</span><span class="o">.</span><span class="na">subSet</span><span class="o">(</span><span class="n">2</span><span class="o">,</span><span class="n">8</span><span class="o">));</span>
<span class="ln">21</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;返回大于5的所有元素的有序集合：&#34;</span> <span class="o">+</span> <span class="n">navigableSet</span><span class="o">.</span><span class="na">tailSet</span><span class="o">(</span><span class="n">5</span><span class="o">));</span>
<span class="ln">22</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;返移除并返回集合中最小的元素：&#34;</span> <span class="o">+</span> <span class="n">navigableSet</span><span class="o">.</span><span class="na">pollFirst</span><span class="o">());</span>
<span class="ln">23</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;返移除并返回集合中最大的元素：&#34;</span> <span class="o">+</span> <span class="n">navigableSet</span><span class="o">.</span><span class="na">pollLast</span><span class="o">());</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span>
<span class="ln"> 2</span><span class="n">元素个数</span><span class="err">：</span><span class="n">7</span>
<span class="ln"> 3</span><span class="n">返回大于等于6的最小元素</span><span class="err">：</span><span class="n">8</span>
<span class="ln"> 4</span><span class="n">返回小于等于6的最大元素</span><span class="err">：</span><span class="n">5</span>
<span class="ln"> 5</span><span class="n">返回倒序迭代器</span><span class="err">：</span><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">TreeMap$NavigableSubMap$DescendingSubMapKeyIterator</span><span class="nd">@2d8e6db6</span>
<span class="ln"> 6</span><span class="n">返回倒序的NavigableSet</span><span class="err">：</span><span class="o">[</span><span class="n">10</span><span class="o">,</span> <span class="n">8</span><span class="o">,</span> <span class="n">5</span><span class="o">,</span> <span class="n">4</span><span class="o">,</span> <span class="n">3</span><span class="o">,</span> <span class="n">2</span><span class="o">,</span> <span class="n">1</span><span class="o">]</span>
<span class="ln"> 7</span><span class="n">返回小于4的所有元素</span><span class="err">（</span><span class="n">不包括4</span><span class="err">）</span><span class="n">的所有元素的集合</span><span class="err">：</span><span class="o">[</span><span class="n">1</span><span class="o">,</span> <span class="n">2</span><span class="o">,</span> <span class="n">3</span><span class="o">]</span>
<span class="ln"> 8</span><span class="nl">返回大于5的最小元素:</span><span class="n">8</span>
<span class="ln"> 9</span><span class="n">返回小于5的最大元素</span><span class="err">：</span><span class="n">4</span>
<span class="ln">10</span><span class="n">返回2</span><span class="err">（</span><span class="n">包含</span><span class="err">）</span><span class="n">到8</span><span class="err">（</span><span class="n">不包含</span><span class="err">）</span><span class="n">之间的所有元素的有序集合</span><span class="o">[</span><span class="n">2</span><span class="o">,</span> <span class="n">3</span><span class="o">,</span> <span class="n">4</span><span class="o">,</span> <span class="n">5</span><span class="o">]</span>
<span class="ln">11</span><span class="n">返回大于5的所有元素的有序集合</span><span class="err">：</span><span class="o">[</span><span class="n">5</span><span class="o">,</span> <span class="n">8</span><span class="o">,</span> <span class="n">10</span><span class="o">]</span>
<span class="ln">12</span><span class="n">返移除并返回集合中最小的元素</span><span class="err">：</span><span class="n">1</span>
</code></pre></div><p><strong>TreeSet 常用 methods</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">TreeSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">treeSet</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeSet</span><span class="o">&lt;&gt;();</span>
<span class="ln"> 2</span>
<span class="ln"> 3</span><span class="n">treeSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">3</span><span class="o">);</span>
<span class="ln"> 4</span><span class="n">treeSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>
<span class="ln"> 5</span><span class="n">treeSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">2</span><span class="o">);</span>
<span class="ln"> 6</span><span class="n">treeSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">1</span><span class="o">);</span>
<span class="ln"> 7</span><span class="n">treeSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">4</span><span class="o">);</span>
<span class="ln"> 8</span>
<span class="ln"> 9</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">treeSet</span><span class="o">);</span> <span class="c1">// [0, 1, 2, 3, 4]
</span><span class="ln">10</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">treeSet</span><span class="o">.</span><span class="na">first</span><span class="o">());</span> <span class="c1">// [0]
</span><span class="ln">11</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">treeSet</span><span class="o">.</span><span class="na">last</span><span class="o">());</span> <span class="c1">// [4]
</span><span class="ln">12</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">treeSet</span><span class="o">.</span><span class="na">headSet</span><span class="o">(</span><span class="n">2</span><span class="o">));</span> <span class="c1">// [0,1]   头set不包含2
</span><span class="ln">13</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">treeSet</span><span class="o">.</span><span class="na">tailSet</span><span class="o">(</span><span class="n">2</span><span class="o">));</span> <span class="c1">// [2,3,4] 尾set包含2
</span><span class="ln">14</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">treeSet</span><span class="o">.</span><span class="na">subSet</span><span class="o">(</span><span class="n">1</span><span class="o">,</span><span class="n">3</span><span class="o">));</span> <span class="c1">// [1,2]  subset只含头，不含尾
</span><span class="ln">15</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">treeSet</span><span class="o">.</span><span class="na">descendingSet</span><span class="o">());</span> <span class="c1">// [4, 3, 2, 1, 0] 倒序
</span></code></pre></div><p><strong>When to Use TreeSet in Java?</strong></p>
<p>TreeSet can be used when we want unique elements in sorted order.</p>
<p><strong>Which is better to use: HashSet or TreeSet?</strong></p>
<p>If you want to store unique elements in sorted order then use TreeSet, otherwise, use HashSet with no ordering of elements. This is because HashSet is much faster than TreeSet.</p>
<hr>
<h3 id="hashset-source-code">HashSet Source Code</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">  1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HashSet</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">AbstractSet</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;,</span> <span class="n">Cloneable</span><span class="o">,</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">Serializable</span>
<span class="ln">  2</span><span class="o">{</span>
<span class="ln">  3</span>    <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="o">-</span><span class="n">5024744406713321676L</span><span class="o">;</span>
<span class="ln">  4</span>
<span class="ln">  5</span>    <span class="c1">// 底层使用HashMap来保存HashSet中所有元素。
</span><span class="ln">  6</span><span class="c1"></span>    <span class="kd">private</span> <span class="kd">transient</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">E</span><span class="o">,</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">;</span>
<span class="ln">  7</span>
<span class="ln">  8</span>    <span class="c1">// 定义一个虚拟的Object对象作为HashMap的value，将此对象定义为static final。
</span><span class="ln">  9</span><span class="c1"></span>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Object</span> <span class="n">PRESENT</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">();</span>
<span class="ln"> 10</span>
<span class="ln"> 11</span>    <span class="cm">/**
</span><span class="ln"> 12</span><span class="cm">     * 默认的无参构造器，构造一个空的HashSet。
</span><span class="ln"> 13</span><span class="cm">     * 
</span><span class="ln"> 14</span><span class="cm">     * 实际底层会初始化一个空的HashMap，并使用默认初始容量为16和加载因子0.75。
</span><span class="ln"> 15</span><span class="cm">     */</span>
<span class="ln"> 16</span>    <span class="kd">public</span> <span class="nf">HashSet</span><span class="o">()</span> <span class="o">{</span>
<span class="ln"> 17</span>        <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">E</span><span class="o">,</span><span class="n">Object</span><span class="o">&gt;();</span>
<span class="ln"> 18</span>    <span class="o">}</span>
<span class="ln"> 19</span>
<span class="ln"> 20</span>    <span class="cm">/**
</span><span class="ln"> 21</span><span class="cm">     * 构造一个包含指定collection中的元素的新set。
</span><span class="ln"> 22</span><span class="cm">     *
</span><span class="ln"> 23</span><span class="cm">     * 实际底层使用默认的加载因子0.75和足以包含指定
</span><span class="ln"> 24</span><span class="cm">     * collection中所有元素的初始容量来创建一个HashMap。
</span><span class="ln"> 25</span><span class="cm">     * @param c 其中的元素将存放在此set中的collection。
</span><span class="ln"> 26</span><span class="cm">     */</span>
<span class="ln"> 27</span>    <span class="kd">public</span> <span class="nf">HashSet</span><span class="o">(</span><span class="n">Collection</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">E</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 28</span>        <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">E</span><span class="o">,</span><span class="n">Object</span><span class="o">&gt;(</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">size</span><span class="o">()/.</span><span class="na">75f</span><span class="o">)</span> <span class="o">+</span> <span class="n">1</span><span class="o">,</span> <span class="n">16</span><span class="o">));</span>
<span class="ln"> 29</span>        <span class="n">addAll</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
<span class="ln"> 30</span>    <span class="o">}</span>
<span class="ln"> 31</span>
<span class="ln"> 32</span>    <span class="cm">/**
</span><span class="ln"> 33</span><span class="cm">     * 以指定的initialCapacity和loadFactor构造一个空的HashSet。
</span><span class="ln"> 34</span><span class="cm">     *
</span><span class="ln"> 35</span><span class="cm">     * 实际底层以相应的参数构造一个空的HashMap。
</span><span class="ln"> 36</span><span class="cm">     * @param initialCapacity 初始容量。
</span><span class="ln"> 37</span><span class="cm">     * @param loadFactor 加载因子。
</span><span class="ln"> 38</span><span class="cm">     */</span>
<span class="ln"> 39</span>    <span class="kd">public</span> <span class="nf">HashSet</span><span class="o">(</span><span class="kt">int</span> <span class="n">initialCapacity</span><span class="o">,</span> <span class="kt">float</span> <span class="n">loadFactor</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 40</span>        <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">E</span><span class="o">,</span><span class="n">Object</span><span class="o">&gt;(</span><span class="n">initialCapacity</span><span class="o">,</span> <span class="n">loadFactor</span><span class="o">);</span>
<span class="ln"> 41</span>    <span class="o">}</span>
<span class="ln"> 42</span>
<span class="ln"> 43</span>    <span class="cm">/**
</span><span class="ln"> 44</span><span class="cm">     * 以指定的initialCapacity构造一个空的HashSet。
</span><span class="ln"> 45</span><span class="cm">     *
</span><span class="ln"> 46</span><span class="cm">     * 实际底层以相应的参数及加载因子loadFactor为0.75构造一个空的HashMap。
</span><span class="ln"> 47</span><span class="cm">     * @param initialCapacity 初始容量。
</span><span class="ln"> 48</span><span class="cm">     */</span>
<span class="ln"> 49</span>    <span class="kd">public</span> <span class="nf">HashSet</span><span class="o">(</span><span class="kt">int</span> <span class="n">initialCapacity</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 50</span>        <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">E</span><span class="o">,</span><span class="n">Object</span><span class="o">&gt;(</span><span class="n">initialCapacity</span><span class="o">);</span>
<span class="ln"> 51</span>    <span class="o">}</span>
<span class="ln"> 52</span>
<span class="ln"> 53</span>    <span class="cm">/**
</span><span class="ln"> 54</span><span class="cm">     * 以指定的initialCapacity和loadFactor构造一个新的空链接哈希集合。
</span><span class="ln"> 55</span><span class="cm">     * 此构造函数为包访问权限，不对外公开，实际只是是对LinkedHashSet的支持。
</span><span class="ln"> 56</span><span class="cm">     *
</span><span class="ln"> 57</span><span class="cm">     * 实际底层会以指定的参数构造一个空LinkedHashMap实例来实现。
</span><span class="ln"> 58</span><span class="cm">     * @param initialCapacity 初始容量。
</span><span class="ln"> 59</span><span class="cm">     * @param loadFactor 加载因子。
</span><span class="ln"> 60</span><span class="cm">     * @param dummy 标记。
</span><span class="ln"> 61</span><span class="cm">     */</span>
<span class="ln"> 62</span>    <span class="n">HashSet</span><span class="o">(</span><span class="kt">int</span> <span class="n">initialCapacity</span><span class="o">,</span> <span class="kt">float</span> <span class="n">loadFactor</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">dummy</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 63</span>        <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedHashMap</span><span class="o">&lt;</span><span class="n">E</span><span class="o">,</span><span class="n">Object</span><span class="o">&gt;(</span><span class="n">initialCapacity</span><span class="o">,</span> <span class="n">loadFactor</span><span class="o">);</span>
<span class="ln"> 64</span>    <span class="o">}</span>
<span class="ln"> 65</span>
<span class="ln"> 66</span>    <span class="cm">/**
</span><span class="ln"> 67</span><span class="cm">     * 返回对此set中元素进行迭代的迭代器。返回元素的顺序并不是特定的。
</span><span class="ln"> 68</span><span class="cm">     * 
</span><span class="ln"> 69</span><span class="cm">     * 底层实际调用底层HashMap的keySet来返回所有的key。
</span><span class="ln"> 70</span><span class="cm">     * 可见HashSet中的元素，只是存放在了底层HashMap的key上，
</span><span class="ln"> 71</span><span class="cm">     * value使用一个static final的Object对象标识。
</span><span class="ln"> 72</span><span class="cm">     * @return 对此set中元素进行迭代的Iterator。
</span><span class="ln"> 73</span><span class="cm">     */</span>
<span class="ln"> 74</span>    <span class="kd">public</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="nf">iterator</span><span class="o">()</span> <span class="o">{</span>
<span class="ln"> 75</span>        <span class="k">return</span> <span class="n">map</span><span class="o">.</span><span class="na">keySet</span><span class="o">().</span><span class="na">iterator</span><span class="o">();</span>
<span class="ln"> 76</span>    <span class="o">}</span>
<span class="ln"> 77</span>
<span class="ln"> 78</span>    <span class="cm">/**
</span><span class="ln"> 79</span><span class="cm">     * 返回此set中的元素的数量（set的容量）。
</span><span class="ln"> 80</span><span class="cm">     *
</span><span class="ln"> 81</span><span class="cm">     * 底层实际调用HashMap的size()方法返回Entry的数量，就得到该Set中元素的个数。
</span><span class="ln"> 82</span><span class="cm">     * @return 此set中的元素的数量（set的容量）。
</span><span class="ln"> 83</span><span class="cm">     */</span>
<span class="ln"> 84</span>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">size</span><span class="o">()</span> <span class="o">{</span>
<span class="ln"> 85</span>        <span class="k">return</span> <span class="n">map</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
<span class="ln"> 86</span>    <span class="o">}</span>
<span class="ln"> 87</span>
<span class="ln"> 88</span>    <span class="cm">/**
</span><span class="ln"> 89</span><span class="cm">     * 如果此set不包含任何元素，则返回true。
</span><span class="ln"> 90</span><span class="cm">     *
</span><span class="ln"> 91</span><span class="cm">     * 底层实际调用HashMap的isEmpty()判断该HashSet是否为空。
</span><span class="ln"> 92</span><span class="cm">     * @return 如果此set不包含任何元素，则返回true。
</span><span class="ln"> 93</span><span class="cm">     */</span>
<span class="ln"> 94</span>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isEmpty</span><span class="o">()</span> <span class="o">{</span>
<span class="ln"> 95</span>        <span class="k">return</span> <span class="n">map</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">();</span>
<span class="ln"> 96</span>    <span class="o">}</span>
<span class="ln"> 97</span>
<span class="ln"> 98</span>    <span class="cm">/**
</span><span class="ln"> 99</span><span class="cm">     * 如果此set包含指定元素，则返回true。
</span><span class="ln">100</span><span class="cm">     * 更确切地讲，当且仅当此set包含一个满足(o==null ? e==null : o.equals(e))
</span><span class="ln">101</span><span class="cm">     * 的e元素时，返回true。
</span><span class="ln">102</span><span class="cm">     *
</span><span class="ln">103</span><span class="cm">     * 底层实际调用HashMap的containsKey判断是否包含指定key。
</span><span class="ln">104</span><span class="cm">     * @param o 在此set中的存在已得到测试的元素。
</span><span class="ln">105</span><span class="cm">     * @return 如果此set包含指定元素，则返回true。
</span><span class="ln">106</span><span class="cm">     */</span>
<span class="ln">107</span>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">contains</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">108</span>        <span class="k">return</span> <span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">o</span><span class="o">);</span>
<span class="ln">109</span>    <span class="o">}</span>
<span class="ln">110</span>
<span class="ln">111</span>    <span class="cm">/**
</span><span class="ln">112</span><span class="cm">     * 如果此set中尚未包含指定元素，则添加指定元素。
</span><span class="ln">113</span><span class="cm">     * 更确切地讲，如果此 set 没有包含满足(e==null ? e2==null : e.equals(e2))
</span><span class="ln">114</span><span class="cm">     * 的元素e2，则向此set 添加指定的元素e。
</span><span class="ln">115</span><span class="cm">     * 如果此set已包含该元素，则该调用不更改set并返回false。
</span><span class="ln">116</span><span class="cm">     *
</span><span class="ln">117</span><span class="cm">     * 底层实际将将该元素作为key放入HashMap。
</span><span class="ln">118</span><span class="cm">     * 由于HashMap的put()方法添加key-value对时，当新放入HashMap的Entry中key
</span><span class="ln">119</span><span class="cm">     * 与集合中原有Entry的key相同（hashCode()返回值相等，通过equals比较也返回true），
</span><span class="ln">120</span><span class="cm">     * 新添加的Entry的value会将覆盖原来Entry的value，但key不会有任何改变，
</span><span class="ln">121</span><span class="cm">     * 因此如果向HashSet中添加一个已经存在的元素时，新添加的集合元素将不会被放入HashMap中，
</span><span class="ln">122</span><span class="cm">     * 原来的元素也不会有任何改变，这也就满足了Set中元素不重复的特性。
</span><span class="ln">123</span><span class="cm">     * @param e 将添加到此set中的元素。
</span><span class="ln">124</span><span class="cm">     * @return 如果此set尚未包含指定元素，则返回true。
</span><span class="ln">125</span><span class="cm">     */</span>
<span class="ln">126</span>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="n">E</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">127</span>        <span class="k">return</span> <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">e</span><span class="o">,</span> <span class="n">PRESENT</span><span class="o">)==</span><span class="kc">null</span><span class="o">;</span>
<span class="ln">128</span>    <span class="o">}</span>
<span class="ln">129</span>
<span class="ln">130</span>    <span class="cm">/**
</span><span class="ln">131</span><span class="cm">     * 如果指定元素存在于此set中，则将其移除。
</span><span class="ln">132</span><span class="cm">     * 更确切地讲，如果此set包含一个满足(o==null ? e==null : o.equals(e))的元素e，
</span><span class="ln">133</span><span class="cm">     * 则将其移除。如果此set已包含该元素，则返回true
</span><span class="ln">134</span><span class="cm">     * （或者：如果此set因调用而发生更改，则返回true）。（一旦调用返回，则此set不再包含该元素）。
</span><span class="ln">135</span><span class="cm">     *
</span><span class="ln">136</span><span class="cm">     * 底层实际调用HashMap的remove方法删除指定Entry。
</span><span class="ln">137</span><span class="cm">     * @param o 如果存在于此set中则需要将其移除的对象。
</span><span class="ln">138</span><span class="cm">     * @return 如果set包含指定元素，则返回true。
</span><span class="ln">139</span><span class="cm">     */</span>
<span class="ln">140</span>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">remove</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">141</span>        <span class="k">return</span> <span class="n">map</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">o</span><span class="o">)==</span><span class="n">PRESENT</span><span class="o">;</span>
<span class="ln">142</span>    <span class="o">}</span>
<span class="ln">143</span>
<span class="ln">144</span>    <span class="cm">/**
</span><span class="ln">145</span><span class="cm">     * 从此set中移除所有元素。此调用返回后，该set将为空。
</span><span class="ln">146</span><span class="cm">     *
</span><span class="ln">147</span><span class="cm">     * 底层实际调用HashMap的clear方法清空Entry中所有元素。
</span><span class="ln">148</span><span class="cm">     */</span>
<span class="ln">149</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">clear</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">150</span>        <span class="n">map</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
<span class="ln">151</span>    <span class="o">}</span>
<span class="ln">152</span>
<span class="ln">153</span>    <span class="cm">/**
</span><span class="ln">154</span><span class="cm">     * 返回此HashSet实例的浅表副本：并没有复制这些元素本身。
</span><span class="ln">155</span><span class="cm">     *
</span><span class="ln">156</span><span class="cm">     * 底层实际调用HashMap的clone()方法，获取HashMap的浅表副本，并设置到HashSet中。
</span><span class="ln">157</span><span class="cm">     */</span>
<span class="ln">158</span>    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">clone</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">159</span>        <span class="k">try</span> <span class="o">{</span>
<span class="ln">160</span>            <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">newSet</span> <span class="o">=</span> <span class="o">(</span><span class="n">HashSet</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;)</span> <span class="kd">super</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
<span class="ln">161</span>            <span class="n">newSet</span><span class="o">.</span><span class="na">map</span> <span class="o">=</span> <span class="o">(</span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">E</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;)</span> <span class="n">map</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
<span class="ln">162</span>            <span class="k">return</span> <span class="n">newSet</span><span class="o">;</span>
<span class="ln">163</span>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">CloneNotSupportedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">164</span>            <span class="k">throw</span> <span class="k">new</span> <span class="n">InternalError</span><span class="o">();</span>
<span class="ln">165</span>        <span class="o">}</span>
<span class="ln">166</span>    <span class="o">}</span>
<span class="ln">167</span><span class="o">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Java Data Structure 5: Collection_List</title>
			<link>https://daiwei.dev/posts/data-structure/5_list/</link>
			<pubDate>Wed, 05 Jan 2022 16:00:11 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/data-structure/5_list/</guid>
			<description>Module java.base
Package java.util
Interface List     Type Parameters:
E - the type of elements in this list
  All Superinterfaces:
Collection&amp;lt;E&amp;gt;, Iterable&amp;lt;E&amp;gt;
  All Known Implementing Classes:
AbstractList, AbstractSequentialList, ArrayList, AttributeList, CopyOnWriteArrayList, LinkedList, RoleList, RoleUnresolvedList, Stack, Vector
    1public interface List&amp;lt;E&amp;gt; extends Collection&amp;lt;E&amp;gt; the** List** interface includes operations method for the following:
 Positional access — manipulates elements based on their numerical position in the list.</description>
			<content type="html"><![CDATA[<p><strong>Module</strong> <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/module-summary.html">java.base</a></p>
<p><strong>Package</strong> <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/package-summary.html">java.util</a></p>
<h2 id="interface-liste">Interface List<!-- raw HTML omitted --></h2>
<ul>
<li>
<ul>
<li>
<p><strong>Type Parameters:</strong></p>
<p><code>E</code> - the type of elements in this list</p>
</li>
<li>
<p>All Superinterfaces:</p>
<p><code>Collection&lt;E&gt;</code>, <code>Iterable&lt;E&gt;</code></p>
</li>
<li>
<p>All Known Implementing Classes:</p>
<p><code>AbstractList</code>, <code>AbstractSequentialList</code>, <strong><code>ArrayList</code></strong>, <code>AttributeList</code>, <code>CopyOnWriteArrayList</code>, <strong><code>LinkedList</code></strong>, <code>RoleList</code>, <code>RoleUnresolvedList</code>, <strong><code>Stack</code></strong>, <strong><code>Vector</code></strong></p>
</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">List</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">Collection</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
</code></pre></div><p>the** <code>List</code>** interface includes operations method for the following:</p>
<ul>
<li><code>Positional access</code> — manipulates elements based on their numerical position in the list. This includes methods such as <strong><code>get</code>, <code>set</code>, <code>add</code>, <code>addAll</code>, and <code>remove</code></strong>.</li>
<li><code>Search</code> — searches for a specified object in the list and returns its numerical position. Search methods include <strong><code>indexOf</code> and <code>lastIndexOf</code></strong>.</li>
<li><code>Iteration</code> — extends <code>Iterator</code> semantics to take advantage of the list&rsquo;s sequential nature. The <strong><code>listIterator</code></strong> methods provide this behavior.</li>
<li><code>Range-view</code> — The <strong><code>sublist</code></strong> method performs arbitrary <em>range operations</em> on the list.</li>
</ul>
<p>The Java platform contains two general-purpose <code>List</code> implementations. <a href="https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html"><code>ArrayList</code></a>, which is usually the better-performing under access and search, and <a href="https://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html"><code>LinkedList</code></a> which offers better performance under insert and delete.</p>
<hr>
<h2 id="how-to-create-a-list-in-java">How to create a List in Java?</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">arrayList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
<span class="ln">2</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">linkedList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
<span class="ln">3</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">vector</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Vector</span><span class="o">&lt;&gt;();</span>
<span class="ln">4</span><span class="n">List</span><span class="o">&lt;?&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;&gt;();</span>
</code></pre></div><h2 id="when-to-use-list">When to use List?</h2>
<p>\1. List can be used when we want to allow or store duplicate elements. 允许存储重复元素
\2. It can be used when we want to store null elements. 允许存储 null 元素
\3. When we want to preserve my insertion order, we should go for list.  可以保持元素插入顺序</p>
<hr>
<h2 id="arraylist">ArrayList</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">ArrayList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln">2</span>
<span class="ln">3</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln">4</span><span class="kd">extends</span> <span class="n">AbstractList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln">5</span><span class="kd">implements</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;,</span> <span class="n">RandomAccess</span><span class="o">,</span> <span class="n">Cloneable</span><span class="o">,</span> <span class="n">Serializable</span> <span class="c1">// 可以实现List
</span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201121247012.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201062043165.png" alt=""></p>
<p>ArrayList类底层数据结构为数组<strong>Array</strong>，初始化大小：DEFAULT-CAPACITY=10，扩容方式：oldCapacity+oldCapacity&raquo;1,即<strong>1.5倍</strong>扩容。数据有序性；可添加多个null值。</p>
<p>下面两种ArrayList初始化方式都是正确的，List is an <strong><code>interface</code></strong> and ArrayList is a <strong><code>class</code></strong>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span> <span class="c1">//generally preferred
</span><span class="ln">2</span><span class="c1"></span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list2</span> <span class="o">=</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span> <span class="c1">// type-cast
</span></code></pre></div><ul>
<li>initialize as <strong><code>List&lt;E&gt;</code></strong> 更加灵活flexible, preferable，可以随后选择 LinkedList or ArrayList.</li>
<li>initialize as <strong><code>ArrayList&lt;E&gt;</code></strong> 可以访问使用所有的ArrayList class method, such as such as <em><code>ArrayList#ensureCapacity</code></em> or <em><code>ArrayList#trimToSize</code></em>.</li>
<li>通常情况下，尽量使用方法1 <strong>List<!-- raw HTML omitted --></strong> 来初始化 arrayList.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span><span class="c1">// 初始化可变数组
</span><span class="ln">2</span><span class="c1"></span><span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;one&#34;</span><span class="o">);</span> <span class="c1">// list[&#34;one&#34;]
</span><span class="ln">3</span><span class="c1"></span><span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;two&#34;</span><span class="o">);</span> <span class="c1">// list[&#34;one&#34;,&#34;two&#34;]
</span><span class="ln">4</span><span class="c1"></span><span class="n">list</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">0</span><span class="o">);</span> <span class="c1">//list[&#34;two&#34;]
</span><span class="ln">5</span><span class="c1"></span><span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">1</span><span class="o">,</span><span class="n">4</span><span class="o">);</span> <span class="c1">//list[&#34;two&#34;,4]
</span><span class="ln">6</span><span class="c1"></span><span class="kt">boolean</span> <span class="n">a</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">2</span><span class="o">);</span> <span class="c1">//true
</span></code></pre></div><p>ArrayList的 <strong>toArray</strong> 方法返回一个数组, ArrayList的 <strong>asList</strong> 方法返回一个列表.</p>
<p>对ArrayList进行添加元素的操作的时候是分两个步骤进行的，即第一步先在object[size]的位置上存放需要添加的元素；第二步将size的值增加1。由于这个过程在多线程的环境下是不能保证具有原子性的，因此ArrayList在多线程的环境下是<strong>线程不安全</strong>的。</p>
<p>线程不安全, 多线程问题需要使用 <code>synchronizedList</code>  进行封装：</p>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201101301158.png" alt=""></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">al</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span> <span class="c1">// Non-synchronized.
</span><span class="ln">2</span><span class="c1"></span><span class="n">List</span> <span class="n">l</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">synchronizedList</span><span class="o">(</span> <span class="n">al</span> <span class="o">);</span> <span class="c1">// synchronized
</span><span class="ln">3</span><span class="c1"></span>
<span class="ln">4</span><span class="c1">// Collection synchronized method 1
</span><span class="ln">5</span><span class="c1"></span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">synlist</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">synchronizedList</span><span class="o">(</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;);</span> 
<span class="ln">6</span><span class="c1">// Collection synchronized method 2
</span><span class="ln">7</span><span class="c1"></span><span class="n">CopyOnWriteArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">al</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CopyOnWriteArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span> 
</code></pre></div><p>Similarly, we can get the synchronized version of Set, Map objects by using the following syntax:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="kd">public</span> <span class="kd">static</span> <span class="n">Set</span> <span class="nf">synchronizedList</span><span class="o">(</span> <span class="n">Set</span> <span class="n">s</span> <span class="o">);</span>
<span class="ln">2</span><span class="kd">public</span> <span class="kd">static</span> <span class="n">Map</span> <span class="nf">synchronizedList</span><span class="o">(</span> <span class="n">Map</span> <span class="n">m</span> <span class="o">);</span>
</code></pre></div><hr>
<h2 id="linkedlist">LinkedList</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">LinkedList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln">2</span>
<span class="ln">3</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LinkedList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln">4</span><span class="kd">extends</span> <span class="n">AbstractSequentialList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln">5</span><span class="kd">implements</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;,</span> <span class="n">Deque</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;,</span> <span class="n">Cloneable</span><span class="o">,</span> <span class="n">Serializable</span> <span class="c1">// 可以实现List, Deque
</span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201121248412.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201101448421.png" alt=""></p>
<p><strong>LinkedList</strong>的底层实现是<strong>双向链表Doubly-linked list</strong>，链表以节点为单位，每个元素都是一个独立对象，在内存空间的存储是非连续的。链表的节点对象具有两个成员变量：「值 <code>val</code>」，「后继节点引用 <code>next</code>」 。 可实现Stacks, Queues, and trees等数据结构。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="kd">class</span> <span class="nc">ListNode</span> <span class="o">{</span>
<span class="ln">2</span>    <span class="kt">int</span> <span class="n">val</span><span class="o">;</span>       <span class="c1">// 节点值
</span><span class="ln">3</span><span class="c1"></span>    <span class="n">ListNode</span> <span class="n">next</span><span class="o">;</span> <span class="c1">// 后继节点引用
</span><span class="ln">4</span><span class="c1"></span>    <span class="n">ListNode</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span> <span class="n">val</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span> <span class="o">}</span>
<span class="ln">5</span><span class="o">}</span>
</code></pre></div><p>和ArrayList 一样，下面两种ArrayList初始化方式都是正确的，List is an <strong><code>interface</code></strong> and LinkedList is a <strong><code>class</code></strong>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span> <span class="c1">//generally preferred
</span><span class="ln">2</span><span class="c1"></span><span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span> <span class="c1">// type-cast
</span></code></pre></div><p><code>List&lt;E&gt;</code> is more generally preferred over <code>LinkedList&lt;E&gt;</code>, but If needed to add cells in the beginning/middle/end of the list LinkedList proved you  <em><code>addFirst, addLast &amp; removeFirst, removeLast &amp; getFirst, getLast</code></em> method.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">list2</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">1</span><span class="o">);</span> <span class="c1">// list[1]
</span><span class="ln">2</span><span class="c1"></span><span class="n">list2</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">2</span><span class="o">);</span> <span class="c1">// list[2,1]     
</span><span class="ln">3</span><span class="c1"></span><span class="n">list2</span><span class="o">.</span><span class="na">removeLast</span><span class="o">();</span> <span class="c1">// list[2]
</span><span class="ln">4</span><span class="c1"></span><span class="n">list2</span><span class="o">.</span><span class="na">getFirst</span><span class="o">();</span> <span class="c1">// 2
</span></code></pre></div><blockquote>
<p>LinkedList 继承了 AbstractSequentialList 类。</p>
<p>LinkedList 实现了 Queue 接口，可作为队列使用。</p>
<p>LinkedList 实现了 List 接口，可进行列表的相关操作。</p>
<p>LinkedList 实现了 Deque 接口，可作为队列使用。</p>
<p>LinkedList 实现了 Cloneable 接口，可实现克隆。</p>
<p>LinkedList 实现了 java.io.Serializable 接口，即可支持序列化，能通过序列化去传输。</p>
</blockquote>
<h3 id="deque"><code>Deque</code></h3>
<p>用 LinkedList 实现Deque:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">Deque</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">deque</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
<span class="ln">2</span>
<span class="ln">3</span><span class="n">deque</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;Love &#34;</span><span class="o">);</span><span class="c1">// Love
</span><span class="ln">4</span><span class="c1"></span><span class="n">deque</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="s">&#34;I &#34;</span><span class="o">);</span> <span class="c1">// I Love
</span><span class="ln">5</span><span class="c1"></span><span class="n">deque</span><span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="s">&#34;You!&#34;</span><span class="o">);</span> <span class="c1">// I Love You! 
</span><span class="ln">6</span><span class="c1"></span><span class="n">deque</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="s">&#34;lol &#34;</span><span class="o">);</span> <span class="c1">// lol I Love You!
</span><span class="ln">7</span><span class="c1"></span><span class="n">deque</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span> <span class="c1">// I Love You!
</span><span class="ln">8</span><span class="c1"></span><span class="n">deque</span><span class="o">.</span><span class="na">peek</span><span class="o">();</span> <span class="c1">// I
</span><span class="ln">9</span><span class="c1"></span><span class="n">deque</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span> <span class="c1">// Love You!
</span></code></pre></div><hr>
<h2 id="arraylist-vs-linkedlist">ArrayList vs LinkedList</h2>
<blockquote>
<ul>
<li>ArrayList <strong>底层是数组Array,内存地址连续可随机访问元素，查询快O(1),</strong></li>
<li>ArrayList <strong>动态扩容和元素拷贝 增删慢, 实现了List 接口;</strong></li>
<li>LinkedList <strong>底层是链表List,内存地址不连续必须按顺序访问元素，查询慢O(N),</strong></li>
<li>LinkedList <strong>只需要修改节点指针指向 增删快O(1), 实现List &amp; Deque 接口。</strong></li>
</ul>
</blockquote>
<h2 id="heading"></h2>
<h2 id="arraylist-vs-array">ArrayList vs Array</h2>
<blockquote>
<ul>
<li>Array长度<code>length()</code>是固定的，需要提前申明初始化数组的大小; ArrayList大小<code>size()</code>是可以动态增加的。</li>
<li>Array可以存储primitives原始数据类型<code>int, char</code>和object; ArrayList只可以存储object。</li>
<li>Array不能随意增删其中的项，ArrayList提供更多的方法和特性去处理数据，例如<code>add(),remove()</code></li>
<li>Array处理固定长度的数据时速度更快，在不确定数据大小的时候ArrayList更方便和节省内存空间。</li>
<li>ArrayList的底层数据结构是Array.</li>
</ul>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 2</span>        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
<span class="ln"> 3</span>        <span class="kt">int</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">3</span><span class="o">];</span>
<span class="ln"> 4</span>        <span class="n">array</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
<span class="ln"> 5</span>        <span class="n">array</span><span class="o">[</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">2</span><span class="o">;</span>
<span class="ln"> 6</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">array</span><span class="o">));</span>
<span class="ln"> 7</span>        <span class="c1">// [1, 2, 0]
</span><span class="ln"> 8</span><span class="c1"></span>        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">1</span><span class="o">);</span>
<span class="ln"> 9</span>        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">2</span><span class="o">);</span>
<span class="ln">10</span>        <span class="n">list</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">1</span><span class="o">);</span>
<span class="ln">11</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
<span class="ln">12</span>        <span class="c1">// [1]
</span><span class="ln">13</span><span class="c1"></span><span class="o">}</span>
</code></pre></div><hr>
<h2 id="vector">Vector</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Vector</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln">2</span><span class="kd">extends</span> <span class="n">AbstractList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln">3</span><span class="kd">implements</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;,</span> <span class="n">RandomAccess</span><span class="o">,</span> <span class="n">Cloneable</span><span class="o">,</span> <span class="n">Serializable</span> <span class="c1">// 实现 list
</span></code></pre></div><ul>
<li>
<p>All Implemented Interfaces:</p>
<p><code>Serializable</code>, <code>Cloneable</code>, <code>Iterable&lt;E&gt;</code>, <code>Collection&lt;E&gt;</code>, <code>List&lt;E&gt;</code>, <code>RandomAccess</code></p>
</li>
<li>
<p>Direct Known Subclasses:</p>
<p><strong><code>Stack</code></strong></p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201121302194.png" alt=""></p>
<p><strong>Vector class in Java</strong> was introduced in JDK 1.0 version. It is present in Java.util package. It is a dynamically resizable array (growable array) which means it can grow or shrink as required.</p>
<p>Java Vector class is similar to <a href="https://www.scientecheasy.com/2020/09/arraylist-in-java.html/">ArrayList class</a> with two main differences.</p>
<ul>
<li>Vector is synchronized. It is used for thread safety.</li>
<li>It contains many legacy methods that are not now a part of the collections framework.</li>
</ul>
<p>创建 Vector 方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">Vector</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">vector1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Vector</span><span class="o">&lt;&gt;();</span>
<span class="ln">2</span><span class="n">Vector</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">vector2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Vector</span><span class="o">(</span><span class="n">initialCapacity</span><span class="o">:</span> <span class="n">10</span><span class="o">,</span> <span class="n">capacityIncrement</span><span class="o">:</span> <span class="n">5</span><span class="o">);</span> <span class="c1">//可以只放capacity
</span><span class="ln">3</span><span class="c1"></span><span class="n">Vector</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">vector3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Vector</span><span class="o">(</span><span class="n">Collection</span> <span class="n">c</span><span class="o">);</span> <span class="c1">//只可以添加 collection 类 
</span></code></pre></div><p><strong>When to Use Vector?</strong></p>
<p>➤ We are developing a multi-threaded application but it can reduce the performance of the application because it is “thread-safety”.</p>
<p>Vector  是线程安全的，当我们需要多线程问题下开发可以考虑使用它。</p>
<p><strong>Why sing <code>Vector</code> is considered to be a bad thing in most contexts. 为什么不要使用vector</strong></p>
<ul>
<li><code>Vector</code> synchronizes on every operation. Most contexts do not require fine-grained synchronization, and as such it is an unwanted performance overhead. 每一个步骤都需要同步，效率低。</li>
<li>The <code>Vector.elements()</code> method returns an <code>Enumeration</code> which does not have fail-fast semantics. 返回枚举类，速度慢。</li>
</ul>
<p>如果涉及线程安全问题，我们可以使用 Collections.synchronizedList 来代替，避免使用vector.</p>
<hr>
<h2 id="difference-between-arraylist-and-vector-in-java">Difference between ArrayList and Vector in Java</h2>
<table>
<thead>
<tr>
<th style="text-align:left">ArrayList</th>
<th style="text-align:left">Vector</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ArrayList is not synchronized.</td>
<td style="text-align:left">Vector is synchronized.</td>
</tr>
<tr>
<td style="text-align:left">Since ArrayList is not synchronized. Hence, its operation is faster as compared to vector.</td>
<td style="text-align:left">Vector is slower than ArrayList.</td>
</tr>
<tr>
<td style="text-align:left">ArrayList was introduced in JDK 2.0.</td>
<td style="text-align:left">Vector was introduced in JDK 1.0.</td>
</tr>
<tr>
<td style="text-align:left">ArrayList is created with an initial capacity of 10. Its size is increased by 50%.</td>
<td style="text-align:left">Vector is created with an initial capacity of 10 but its size is increased by 100%.</td>
</tr>
<tr>
<td style="text-align:left">In the ArrayList, Enumeration is fail-fast. Any modification in ArrayList during the iteration using Enumeration will throw ConcurrentModificatioException.</td>
<td style="text-align:left">Enumeration is fail-safe in the vector. Any modification during the iteration using Enumeration will not throw any exception.</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="stack">Stack</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Stack</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
<span class="ln">2</span><span class="kd">extends</span> <span class="n">Vector</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
</code></pre></div><p>The <code>Stack</code> class represents a last-in-first-out (LIFO) stack of objects. It extends class <code>Vector</code> with five operations that allow a vector to be treated as a stack. The usual <code>push</code> and <code>pop</code> operations are provided, as well as a method to <code>peek</code> at the top item on the stack, a method to test for whether the stack is <code>empty</code>, and a method to <code>search</code> the stack for an item and discover how far it is from the top.</p>
<p><code>Stack</code>类表示对象的后进先出（LIFO）堆栈。提供了常用的 <code>push</code>和<code>pop</code>操作，以及<code>peek</code>在堆栈顶部项目的方法，测试堆栈是否为<code>empty</code>的方法，<code>search</code> 以及对项目的堆栈并发现它离顶部多远的方法。</p>
<p>A more complete and consistent set of LIFO stack operations is provided by the <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html"><code>Deque</code></a> interface and its implementations, which should be used in preference to this class. For example:</p>
<p><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Deque.html"><code>Deque</code></a>接口及其实现提供了一组更完整和一致的 LIFO 堆栈操作，应优先使用此类。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="ln">1</span>Deque&lt;Integer&gt; stack = new ArrayDeque&lt;Integer&gt;();
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Java Data Structure 4: Collection</title>
			<link>https://daiwei.dev/posts/data-structure/4_collection/</link>
			<pubDate>Tue, 04 Jan 2022 15:00:11 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/data-structure/4_collection/</guid>
			<description>Java Collection Framework 是 Java语言最重要的特性，也是Java面试无法躲避的内容，可以说没有collection framework 我们就无法开发出任何产品级别的软件。
因为 collection framework 所有的 类和接口都存放在 Java.util.package 包里， 所以最初被称为 Java.util.package or Collection API, 后来 Sun Microsystem 在 Java 1.2 中 开始正式引入 collection framework。
What is Collection in Java? A collection is a group of objects. In Java, these objects are called elements of the collection. Technically, a collection is an object or container which stores a group of other objects as a single unit or single entity.</description>
			<content type="html"><![CDATA[<p><strong>Java Collection Framework</strong> 是 Java语言最重要的特性，也是Java面试无法躲避的内容，可以说没有collection framework 我们就无法开发出任何产品级别的软件。</p>
<p>因为 collection framework 所有的 类和接口都存放在 <strong>Java.util.package</strong> 包里， 所以最初被称为 <strong>Java.util.package</strong> or <strong>Collection API</strong>, 后来 Sun Microsystem 在 Java 1.2 中 开始正式引入 collection framework。</p>
<h3 id="what-is-collection-in-java">What is Collection in Java?</h3>
<p>A collection is a group of objects. In Java, these objects are called elements of the collection. Technically, a collection is an object or container which stores a group of other objects as a single unit or single entity. Therefore, it is also known as container object or collection object in java. A container object means it contains other objects. In simple words, a collection is a container that stores multiple elements together.</p>
<p>Collection 就是一个可以容纳很多各种各样的对象的容器。</p>
<h3 id="what-is-collections-framework-in-java">What is Collections Framework in Java?</h3>
<p>A framework in java is a set of several classes and interfaces which provide a ready-made architecture.</p>
<p>java框架是一组提供现成架构的类和接口。</p>
<p>In simple words, a collections framework is a class library to handle groups of objects. It is present in java.util package. It allows us to store, retrieve, and update a group of objects.</p>
<p>简单来说，集合框架是一个处理对象组的类库。它存在于 java.util 包中。它允许我们存储、检索和更新一组对象。</p>
<p>Collections framework in Java supports two types of containers:</p>
<ul>
<li>One for storing a collection of elements (objects), that is simply called a collection.</li>
<li>The other, for storing key/value pairs, which is called a map.</li>
</ul>
<p>Java 中的集合框架支持两种类型的容器：</p>
<ul>
<li>一个用于存储元素（对象）的集合，简称为集合。</li>
<li>另一个，用于存储键/值对，称为映射。</li>
</ul>
<p><img src="https://i.loli.net/2021/10/11/BMOvJ6Fg89VbsTS.png" alt="Screenshot 2021-10-11 at 12.49.02.png"></p>
<h3 id="list-of-interfaces-defined-in-javautil-package">List of Interfaces defined in java.util package</h3>
<table>
<thead>
<tr>
<th>Collection</th>
<th>List</th>
<th>Queue</th>
</tr>
</thead>
<tbody>
<tr>
<td>Comparator</td>
<td>ListIterator</td>
<td>RandomAccess</td>
</tr>
<tr>
<td>Deque</td>
<td>Map</td>
<td>Set</td>
</tr>
<tr>
<td>Enumeration</td>
<td>Map.Entry</td>
<td>SortedMap</td>
</tr>
<tr>
<td>EventListener</td>
<td>NavigableMap</td>
<td>SortedSet</td>
</tr>
<tr>
<td>Formattable</td>
<td>NavigableSet</td>
<td></td>
</tr>
<tr>
<td>Iterator</td>
<td>Observer</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="list-of-classes-defined-in-javautil-package">List of classes defined in java.util package</h3>
<table>
<thead>
<tr>
<th>AbstractCollection</th>
<th>EventObject</th>
<th>Random</th>
</tr>
</thead>
<tbody>
<tr>
<td>AbstractList</td>
<td>FormattableFlags</td>
<td>ResourceBundle</td>
</tr>
<tr>
<td>AbstractMap</td>
<td>Formatter</td>
<td>Scanner</td>
</tr>
<tr>
<td>AbstractQueue</td>
<td>AbstractSequentialList</td>
<td>HashMap</td>
</tr>
<tr>
<td>AbstractSet</td>
<td>HashSet</td>
<td>Stack</td>
</tr>
<tr>
<td>ArrayDeque</td>
<td>Hashtable</td>
<td>StringTokenizer</td>
</tr>
<tr>
<td>ArrayList</td>
<td>LinkedList</td>
<td>Vector</td>
</tr>
<tr>
<td>Collections</td>
<td>EnumMap</td>
<td>EnumSet</td>
</tr>
<tr>
<td>Calender</td>
<td>LinkedHashMap</td>
<td>TreeMap</td>
</tr>
</tbody>
</table>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201062015575.png" alt=""></p>
<p><em><strong>e➝ extends, I➝ implements</strong></em></p>
<hr>
<p><img src="https://docs.oracle.com/javase/tutorial/figures/collections/colls-coreInterfaces.gif" alt="Two interface trees, one starting with Collection and including Set, SortedSet, List, and Queue, and the other starting with Map and including SortedMap."></p>
<ul>
<li>
<p><code>Collection</code> — the root of the collection hierarchy. A collection represents a group of objects known as its <em>elements</em>. The <code>Collection</code> interface is the least common denominator that all collections implement and is used to pass collections around and to manipulate them when maximum generality is desired. Some types of collections allow duplicate elements, and others do not. Some are ordered and others are unordered. The Java platform doesn&rsquo;t provide any direct implementations of this interface but provides implementations of more specific subinterfaces, such as <code>Set</code> and <code>List</code>. Also see <a href="https://docs.oracle.com/javase/tutorial/collections/interfaces/collection.html">The Collection Interface</a> section.</p>
</li>
<li>
<p><code>Set</code> — a collection that cannot contain duplicate elements. This interface models the mathematical set abstraction and is used to represent sets, such as the cards comprising a poker hand, the courses making up a student&rsquo;s schedule, or the processes running on a machine. See also <a href="https://docs.oracle.com/javase/tutorial/collections/interfaces/set.html">The Set Interface</a> section.</p>
</li>
<li>
<p><code>List</code> — an ordered collection (sometimes called a <em>sequence</em>). <code>List</code>s can contain duplicate elements. The user of a <code>List</code> generally has precise control over where in the list each element is inserted and can access elements by their integer index (position). If you&rsquo;ve used <code>Vector</code>, you&rsquo;re familiar with the general flavor of <code>List</code>. Also see <a href="https://docs.oracle.com/javase/tutorial/collections/interfaces/list.html">The List Interface</a> section.</p>
</li>
<li>
<p>Queue — a collection used to hold multiple elements prior to processing. Besides basic Collection operations, a Queue provides additional insertion, extraction, and inspection operations.</p>
<p>Queues typically, but do not necessarily, order elements in a FIFO (first-in, first-out) manner. Among the exceptions are priority queues, which order elements according to a supplied comparator or the elements' natural ordering. Whatever the ordering used, the head of the queue is the element that would be removed by a call to <code>remove</code> or <code>poll</code>. In a FIFO queue, all new elements are inserted at the tail of the queue. Other kinds of queues may use different placement rules. Every <code>Queue</code> implementation must specify its ordering properties. Also see <a href="https://docs.oracle.com/javase/tutorial/collections/interfaces/queue.html">The Queue Interface</a> section.</p>
</li>
<li>
<p>Deque — a collection used to hold multiple elements prior to processing. Besides basic Collection operations, a Deque provides additional insertion, extraction, and inspection operations.</p>
<p>Deques can be used both as FIFO (first-in, first-out) and LIFO (last-in, first-out). In a deque all new elements can be inserted, retrieved and removed at both ends. Also see <a href="https://docs.oracle.com/javase/tutorial/collections/interfaces/deque.html">The Deque Interface</a> section.</p>
</li>
<li>
<p><code>Map</code> — an object that maps keys to values. A <code>Map</code> cannot contain duplicate keys; each key can map to at most one value. If you&rsquo;ve used <code>Hashtable</code>, you&rsquo;re already familiar with the basics of <code>Map</code>. Also see <a href="https://docs.oracle.com/javase/tutorial/collections/interfaces/map.html">The Map Interface</a> section.</p>
</li>
</ul>
<p>The <code>Collection</code> interface contains methods that perform basic operations, such as <strong><code>int size()</code>, <code>boolean isEmpty()</code>, <code>boolean contains(Object element)</code>, <code>boolean add(E element)</code>, <code>boolean remove(Object element)</code>, and <code>Iterator&lt;E&gt; iterator()</code>.</strong></p>
<p>It also contains methods that operate on entire collections, such as <strong><code>boolean containsAll(Collection&lt;?&gt; c)</code>, <code>boolean addAll(Collection&lt;? extends E&gt; c)</code>, <code>boolean removeAll(Collection&lt;?&gt; c)</code>, <code>boolean retainAll(Collection&lt;?&gt; c)</code>, and <code>void clear()</code>.</strong></p>
<p>Additional methods for array operations (such as <strong><code>Object[] toArray()</code> and <code>&lt;T&gt; T[] toArray(T[] a)</code></strong> exist as well.</p>
<hr>
<p>Collection所有的 object 的 methods 都是一层一层继承自父类的，</p>
<ul>
<li>
<h3 id="methods-declared-in-interface-javautilcollectionhttpsdocsoraclecomenjavajavase11docsapijavabasejavautilcollectionhtml">Methods declared in interface java.util.<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Collection.html">Collection</a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">parallelStream</span><span class="o">,</span> <span class="n">removeIf</span><span class="o">,</span> <span class="n">stream</span><span class="o">,</span> <span class="n">toArray</span>
</code></pre></div></li>
<li></li>
</ul>
<h3 id="methods-declared-in-interface-javalangiterablehttpsdocsoraclecomenjavajavase11docsapijavabasejavalangiterablehtml">Methods declared in interface java.lang.<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Iterable.html">Iterable</a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">forEach</span>
</code></pre></div><p>例如  ArrayList.methods = Iterable.methods + Collection.methods + List.methods + ArrayList.methods</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">List</span><span class="o">&lt;?&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span> <span class="c1">// list 只可以使用Collection和List的方法
</span><span class="ln"> 2</span><span class="c1"></span>
<span class="ln"> 3</span><span class="n">ArrayList</span><span class="o">&lt;?&gt;</span> <span class="n">arraylist</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span> <span class="c1">//arraylist 可以使用所有Colleciton,List &amp; ArrayList 的方法。
</span><span class="ln"> 4</span><span class="c1"></span>
<span class="ln"> 5</span><span class="c1">// 虽然 declare List 不可以使用arraylist的私有方法，但是在真实案例中 在需要的时候更容易转换object的类型
</span><span class="ln"> 6</span><span class="c1">// 例如：
</span><span class="ln"> 7</span><span class="c1"></span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
<span class="ln"> 8</span><span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
<span class="ln"> 9</span>
<span class="ln">10</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
<span class="ln">11</span><span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</code></pre></div><p><strong>The <code>toArray</code> methods are provided as a bridge between collections and older APIs that expect arrays on input.</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">Object</span><span class="o">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="na">toArray</span><span class="o">();</span>
<span class="ln">2</span><span class="n">String</span><span class="o">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="n">0</span><span class="o">]);</span>
</code></pre></div><p>Example String LinkedList to String Array:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">linkedList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
<span class="ln"> 2</span>
<span class="ln"> 3</span><span class="n">linkedList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;Hello&#34;</span><span class="o">);</span>
<span class="ln"> 4</span><span class="n">linkedList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;world&#34;</span><span class="o">);</span>
<span class="ln"> 5</span><span class="n">linkedList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;!&#34;</span><span class="o">);</span>
<span class="ln"> 6</span>
<span class="ln"> 7</span><span class="n">String</span><span class="o">[]</span> <span class="n">str</span> <span class="o">=</span> <span class="n">linkedList</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="n">0</span><span class="o">]);</span>
<span class="ln"> 8</span>
<span class="ln"> 9</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">linkedList</span><span class="o">);</span>
<span class="ln">10</span><span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">str</span><span class="o">)</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
<span class="ln">11</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">[</span><span class="n">1</span><span class="o">]);</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="o">&gt;</span> <span class="n">Task</span> <span class="o">:</span><span class="n">ListTest</span><span class="o">.</span><span class="na">main</span><span class="o">()</span>
<span class="ln">2</span><span class="o">[</span><span class="n">Hello</span><span class="o">,</span> <span class="n">world</span><span class="o">,</span> <span class="o">!]</span>
<span class="ln">3</span><span class="n">Hello</span>
<span class="ln">4</span><span class="n">world</span>
<span class="ln">5</span><span class="o">!</span>
<span class="ln">6</span><span class="n">world</span>
</code></pre></div><hr>
<p><strong>Q.</strong> Does a collection object store copies of other objects?</p>
<p><strong>A:</strong> No, a collection object works with reference types. It stores references of other objects, not copies of other objects.</p>
<p><strong>Q.</strong> Can we store a primitive data type into a collection?</p>
<p><strong>A:</strong> No, collections store only objects.</p>
<hr>
<ul>
<li>
<h3 id="methods-declared-in-interface-javautilcollectionhttpsdocsoraclecomenjavajavase11docsapijavabasejavautilcollectionhtml-1">Methods declared in interface java.util.<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Collection.html">Collection</a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">addAll</span><span class="o">,</span> <span class="n">clear</span><span class="o">,</span> <span class="n">contains</span><span class="o">,</span> <span class="n">containsAll</span><span class="o">,</span> <span class="n">equals</span><span class="o">,</span> <span class="n">hashCode</span><span class="o">,</span> <span class="n">isEmpty</span><span class="o">,</span> <span class="n">iterator</span><span class="o">,</span> <span class="n">parallelStream</span><span class="o">,</span> <span class="n">remove</span><span class="o">,</span> <span class="n">removeAll</span><span class="o">,</span> <span class="n">removeIf</span><span class="o">,</span> <span class="n">retainAll</span><span class="o">,</span> <span class="n">size</span><span class="o">,</span> <span class="n">spliterator</span><span class="o">,</span> <span class="n">stream</span><span class="o">,</span> <span class="n">toArray</span><span class="o">,</span> <span class="n">toArray</span><span class="o">,</span> <span class="n">toArray</span>
</code></pre></div></li>
<li></li>
</ul>
<h3 id="methods-declared-in-interface-javalangiterablehttpsdocsoraclecomenjavajavase11docsapijavabasejavalangiterablehtml-1">Methods declared in interface java.lang.<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Iterable.html">Iterable</a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">forEach</span>
</code></pre></div><hr>
<h3 id="summary">Summary</h3>
<p>The Java Collections Framework hierarchy consists of two distinct interface trees:</p>
<ul>
<li>The first tree starts with the <code>Collection</code> interface, which provides for the basic functionality used by all collections, such as <code>add</code> and <code>remove</code> methods. Its subinterfaces — <code>Set</code>, <code>List</code>, and <code>Queue</code> — provide for more specialized collections.</li>
<li>The <strong><code>Set</code></strong> interface does <strong>not allow duplicate elements.</strong> This can be useful for storing collections such as a deck of cards or student records. The <code>Set</code> interface has a <strong>subinterface</strong>, <strong><code>SortedSet</code></strong>, that provides for <strong>ordering of elements</strong> in the set.</li>
<li>The <strong><code>List</code></strong> interface provides for an ordered collection, for situations in which you need precise control over where each element is inserted. You can retrieve elements from a <code>List</code> by their exact position.</li>
<li>The <strong><code>Queue</code></strong> interface enables additional insertion, extraction, and inspection operations. Elements in a <code>Queue</code> are typically ordered in on a <strong>FIFO</strong> basis.</li>
<li>The <strong><code>Deque</code></strong> interface enables insertion, deletion, and inspection operations at <strong>both the ends</strong>. Elements in a <code>Deque</code> can be used in <strong>both LIFO and FIFO</strong>.</li>
<li>The second tree starts with the <strong><code>Map</code></strong> interface, which maps keys and values similar to a <code>Hashtable</code>.</li>
<li><code>Map</code>&rsquo;s <strong>subinterface</strong>, <strong><code>SortedMap</code></strong>, maintains its key-value pairs in <strong>ascending order</strong> or in an order specified by a <code>Comparator</code>.</li>
</ul>
<p>These interfaces allow collections to be manipulated independently of the details of their representation.</p>
]]></content>
		</item>
		
		<item>
			<title>Java Data Structure 3: Array</title>
			<link>https://daiwei.dev/posts/data-structure/3_array/</link>
			<pubDate>Mon, 03 Jan 2022 14:59:11 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/data-structure/3_array/</guid>
			<description>1Module java.base 2Package java.lang.reflect 3 4Class Array 5 6java.lang.Object 7 java.lang.reflect.Array 8 9public final class Array extends Object **The Array class provides static methods to dynamically create and access Java arrays. ** Array class 是定义在Java.lang的基础语言包里，提供了一个静态方法可以动态创建和访问数组。
1Module java.base 2Package java.util 3 4Class Arrays 5 6java.lang.Object 7 java.util.Arrays 8 9public class Arrays extends Object **This class contains various methods for manipulating arrays (such as sorting and searching). ** Arrays class是一个工具类，为操作array数据提供额外方法。是 Array to ArrayList 的桥梁。</description>
			<content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">Module</span> <span class="n">java</span><span class="o">.</span><span class="na">base</span>
<span class="ln">2</span><span class="n">Package</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect</span>
<span class="ln">3</span>  
<span class="ln">4</span><span class="n">Class</span> <span class="n">Array</span>
<span class="ln">5</span>  
<span class="ln">6</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Object</span>
<span class="ln">7</span>    <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">Array</span>
<span class="ln">8</span>  
<span class="ln">9</span><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Array</span> <span class="kd">extends</span> <span class="n">Object</span>
</code></pre></div><p>**The <code>Array</code> class provides static methods to dynamically create and access Java arrays. ** Array class 是定义在Java.lang的基础语言包里，提供了一个静态方法可以动态创建和访问数组。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">Module</span> <span class="n">java</span><span class="o">.</span><span class="na">base</span>
<span class="ln">2</span><span class="n">Package</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span>
<span class="ln">3</span>  
<span class="ln">4</span><span class="n">Class</span> <span class="n">Arrays</span>
<span class="ln">5</span>  
<span class="ln">6</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Object</span>
<span class="ln">7</span>    <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Arrays</span>
<span class="ln">8</span>  
<span class="ln">9</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Arrays</span> <span class="kd">extends</span> <span class="n">Object</span>
</code></pre></div><p>**This class contains various methods for manipulating arrays (such as sorting and searching). ** Arrays class是一个工具类，为操作array数据提供额外方法。是 Array to ArrayList 的桥梁。</p>
<p>例如下面代码里的<code>Arrays.toString()</code>帮助把array转换成string方便打印：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
<span class="ln">2</span>        <span class="kt">int</span><span class="o">[]</span> <span class="n">array1</span> <span class="o">=</span> <span class="o">{</span><span class="n">1</span><span class="o">,</span><span class="n">2</span><span class="o">,</span><span class="n">3</span><span class="o">};</span>
<span class="ln">3</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">array1</span><span class="o">));</span> <span class="c1">// Arrays.toString() method
</span><span class="ln">4</span><span class="c1"></span>    <span class="o">}</span>
</code></pre></div><hr>
<p><strong>Array数组是将相同类型的元素存储于连续内存空间的数据结构，其长度需要提前声明且不可变。</strong></p>
<p>Array 存储在  <strong>Heap</strong> 。</p>
<p>Array 主要分为两类：<strong>one-dimensional array 一元数组 &amp; Multidimensional arrays 多元数组</strong></p>
<p><img src="https://www.edureka.co/blog/wp-content/uploads/2018/01/7-2.png" alt="数组 - Java 数组 - edureka"></p>
<p>在Java里，Array属于Object, 而所有的Object都属于 Class， 因此我们可以用 <strong><code>new</code></strong> keyword 来创建新的Array 对象。构建数组需要在初始化时给定长度，并对数组每个索引元素赋值，创建 Arrays 的方法如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201051530909.png" alt=""></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="c1">// method 1, declare a new array1 then initialize it
</span><span class="ln"> 2</span><span class="c1"></span><span class="kt">int</span><span class="o">[]</span> <span class="n">array1</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">3</span><span class="o">];</span> 
<span class="ln"> 3</span><span class="n">array1</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> 
<span class="ln"> 4</span><span class="n">array1</span><span class="o">[</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">2</span><span class="o">;</span>
<span class="ln"> 5</span><span class="n">array1</span><span class="o">[</span><span class="n">2</span><span class="o">]</span> <span class="o">=</span> <span class="n">3</span><span class="o">;</span>
<span class="ln"> 6</span>
<span class="ln"> 7</span><span class="c1">// method 2, initialized array2 when declared it
</span><span class="ln"> 8</span><span class="c1"></span><span class="kt">int</span><span class="o">[]</span> <span class="n">array2</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="n">1</span><span class="o">,</span><span class="n">2</span><span class="o">,</span><span class="n">3</span><span class="o">};</span> 
<span class="ln"> 9</span>
<span class="ln">10</span><span class="c1">// method 3, declare with values given (variable/field initialization):
</span><span class="ln">11</span><span class="c1"></span><span class="kt">int</span><span class="o">[]</span> <span class="n">array3</span> <span class="o">=</span> <span class="o">{</span><span class="n">1</span><span class="o">,</span><span class="n">2</span><span class="o">,</span><span class="n">3</span><span class="o">};</span>
<span class="ln">12</span>
<span class="ln">13</span><span class="c1">// Matrix Array method 1
</span><span class="ln">14</span><span class="c1"></span><span class="kt">int</span><span class="o">[][]</span> <span class="n">matrix1</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">2</span><span class="o">][</span><span class="n">3</span><span class="o">];</span>
<span class="ln">15</span><span class="n">matrix1</span><span class="o">[</span><span class="n">0</span><span class="o">][</span><span class="n">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
<span class="ln">16</span><span class="n">matrix1</span><span class="o">[</span><span class="n">0</span><span class="o">][</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">2</span><span class="o">;</span>
<span class="ln">17</span><span class="n">matrix1</span><span class="o">[</span><span class="n">0</span><span class="o">][</span><span class="n">2</span><span class="o">]</span> <span class="o">=</span> <span class="n">3</span><span class="o">;</span>
<span class="ln">18</span><span class="n">matrix1</span><span class="o">[</span><span class="n">1</span><span class="o">][</span><span class="n">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">4</span><span class="o">;</span>
<span class="ln">19</span><span class="n">matrix1</span><span class="o">[</span><span class="n">1</span><span class="o">][</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">5</span><span class="o">;</span>
<span class="ln">20</span><span class="n">matrix1</span><span class="o">[</span><span class="n">1</span><span class="o">][</span><span class="n">2</span><span class="o">]</span> <span class="o">=</span> <span class="n">6</span><span class="o">;</span>
<span class="ln">21</span>
<span class="ln">22</span><span class="c1">// Martix Array method 2
</span><span class="ln">23</span><span class="c1"></span><span class="kt">int</span><span class="o">[][]</span> <span class="n">matrix2</span> <span class="o">=</span> <span class="o">{</span>
<span class="ln">24</span>  <span class="o">{</span><span class="n">1</span><span class="o">,</span><span class="n">2</span><span class="o">,</span><span class="n">3</span><span class="o">},</span>
<span class="ln">25</span>  <span class="o">{</span><span class="n">4</span><span class="o">,</span><span class="n">5</span><span class="o">,</span><span class="n">6</span><span class="o">}</span>
<span class="ln">26</span><span class="o">};</span>
<span class="ln">27</span>
<span class="ln">28</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">array3</span><span class="o">));</span> <span class="c1">// [1, 2, 3]
</span><span class="ln">29</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">deepToString</span><span class="o">(</span><span class="n">matrix2</span><span class="o">));</span> <span class="c1">//[[1, 2, 3], [4, 5, 6]]
</span><span class="ln">30</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">matrix1</span><span class="o">.</span><span class="na">length</span><span class="o">);</span> <span class="c1">// Prints the First Dimension size in the array 2
</span><span class="ln">31</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">matrix1</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">length</span><span class="o">);</span><span class="c1">//Prints the Second Dimension size in the array 3
</span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201051536994.png" alt=""></p>
<p>3D Matrix Array:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="c1">// method 1
</span><span class="ln">2</span><span class="c1"></span><span class="kt">int</span><span class="o">[</span> <span class="o">][</span> <span class="o">][</span> <span class="o">]</span> <span class="n">scores</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">3</span><span class="o">][</span><span class="n">3</span><span class="o">][</span><span class="n">3</span><span class="o">];</span> 
<span class="ln">3</span>
<span class="ln">4</span><span class="c1">// method 2
</span><span class="ln">5</span><span class="c1"></span><span class="kt">int</span><span class="o">[</span> <span class="o">][</span> <span class="o">][</span> <span class="o">]</span> <span class="n">scores</span> <span class="o">=</span> <span class="o">{</span>
<span class="ln">6</span>                        <span class="o">{{</span><span class="n">75</span><span class="o">,</span> <span class="n">87</span><span class="o">,</span> <span class="n">69</span><span class="o">},</span> <span class="o">{</span><span class="n">90</span><span class="o">,</span> <span class="n">87</span><span class="o">,</span> <span class="n">85</span><span class="o">},{</span><span class="n">56</span><span class="o">,</span> <span class="n">67</span><span class="o">,</span> <span class="n">76</span><span class="o">}},</span>
<span class="ln">7</span>                        <span class="o">{{</span><span class="n">78</span><span class="o">,</span> <span class="n">67</span><span class="o">,</span> <span class="n">75</span><span class="o">},</span> <span class="o">{</span><span class="n">87</span><span class="o">,</span> <span class="n">98</span><span class="o">,</span> <span class="n">76</span><span class="o">},</span> <span class="o">{</span><span class="n">67</span><span class="o">,</span> <span class="n">56</span><span class="o">,</span> <span class="n">66</span><span class="o">}},</span>
<span class="ln">8</span>                        <span class="o">{{</span><span class="n">72</span><span class="o">,</span> <span class="n">63</span><span class="o">,</span> <span class="n">72</span><span class="o">},</span> <span class="o">{</span><span class="n">82</span><span class="o">,</span> <span class="n">91</span><span class="o">,</span> <span class="n">71</span><span class="o">},</span> <span class="o">{</span><span class="n">64</span><span class="o">,</span> <span class="n">56</span><span class="o">,</span> <span class="n">66</span><span class="o">}}</span>
<span class="ln">9</span>                       <span class="o">};</span>
</code></pre></div><hr>
<h3 id="array-copy-in-java">Array copy in Java</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="ln">1</span>array2 = array1;
</code></pre></div><p>此处，不会将array1 引用（即指向）的数组元素复制到array2。它只是将引用地址从 array1 复制到 array2。</p>
<p>由于array1 和array2 引用同一个数组，因此不再引用array2 指向的前一个数组，现在它变成了垃圾，JVM的垃圾回收器会自动收集。</p>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201051647254.png" alt=""></p>
<hr>
<h3 id="length-vs-length-vs-size">length vs length() vs size()</h3>
<ul>
<li>
<p><code>length</code> &ndash; <strong>arrays</strong> (<code>int[]</code>, <code>double[]</code>, <code>String[]</code>) &ndash; to know the length of the arrays</p>
</li>
<li>
<p><code>length()</code> &ndash; <strong>String related Object</strong> (<code>String</code>, <code>StringBuilder</code>, etc) &ndash; to know the length of the String</p>
</li>
<li>
<p><code>size()</code> &ndash; <strong>Collection Object</strong> (<code>ArrayList</code>, <code>Set</code>, etc) &ndash; to know the size of the Collection</p>
</li>
</ul>
<p>array 在Java 中有一些特殊，类似Java的原始类，array的长度length是需要在使用前申明的，更像是一个constant，因此由于历史原因，早期的Java designer 更愿意把 array length 当做 一个私有field 才处理，而不是伪装method。</p>
<p>string 的长度是可变的 dynamic，所以需要call method 去计算长度。</p>
<hr>
<h3 id="1-两数之和httpsleetcode-cncomproblemstwo-sum"><a href="https://leetcode-cn.com/problems/two-sum/">1. 两数之和</a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
<span class="ln"> 2</span>    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">twoSum</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 3</span>        <span class="n">Map</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="ln"> 4</span>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
<span class="ln"> 5</span>            <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">target</span> <span class="o">-</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
<span class="ln"> 6</span>            <span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">n</span><span class="o">))</span> <span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">n</span><span class="o">),</span> <span class="n">i</span><span class="o">};</span>
<span class="ln"> 7</span>            <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">],</span><span class="n">i</span><span class="o">);</span>
<span class="ln"> 8</span>        <span class="o">}</span>
<span class="ln"> 9</span>        <span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{};</span> 
<span class="ln">10</span>      <span class="c1">//当你需要return一个新的array时，你需要 return new int[]{1,2,3},不可以直接 return {1,2,3}
</span><span class="ln">11</span><span class="c1"></span>    <span class="o">}</span>
<span class="ln">12</span><span class="o">}</span>
</code></pre></div><h4 id="704-二分查找httpsleetcode-cncomproblemsbinary-search"><a href="https://leetcode-cn.com/problems/binary-search/">704. 二分查找</a></h4>
]]></content>
		</item>
		
		<item>
			<title>Java Data Structure 2: String</title>
			<link>https://daiwei.dev/posts/data-structure/2_string/</link>
			<pubDate>Sun, 02 Jan 2022 14:58:11 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/data-structure/2_string/</guid>
			<description>1Module java.base 2Package java.lang 3 4Class String 5 6java.lang.Object 7 java.lang.String 8 9public final class String extends Object implements Serializable, Comparable&amp;lt;String&amp;gt;, CharSequence String在Java属于java.lang.Object package, The String class represents character strings.
String class 是用来创建string对象的，它是不可改变的类因为它和Java的原始数据一样都是被预先定义在Java language里面的。
Java 程序中的所有字符串文字，例如&amp;quot;abc&amp;quot;，都作为此类的实例实现。
Strings 是常量 constant；它们的值在创建后无法更改，不可变的。
 基本上Java的内存可以分为2个部分：heap &amp;amp; stack，String Pool 是Java在 Heap 堆中开辟出来的一个专门用来存放 String 的内存区。
有两种方法可以创建 String 对象:
1String s1 = &amp;#34;apple&amp;#34;; // 通过字符串文字 2String s2 = &amp;#34;apple&amp;#34;; 3String s3 = new String(&amp;#34;apple&amp;#34;); // 通过 new 关键字 4String s4 = new String(&amp;#34;apple&amp;#34;); 5char[] s5 = {&amp;#39;a&amp;#39;,&amp;#39;p&amp;#39;,&amp;#39;p&amp;#39;,&amp;#39;l&amp;#39;,&amp;#39;e&amp;#39;}; 方法1会新建一个字符串&amp;quot;Hello World!</description>
			<content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">Module</span> <span class="n">java</span><span class="o">.</span><span class="na">base</span>
<span class="ln">2</span><span class="n">Package</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span>
<span class="ln">3</span>  
<span class="ln">4</span><span class="n">Class</span> <span class="n">String</span>
<span class="ln">5</span>  
<span class="ln">6</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Object</span>
<span class="ln">7</span>    <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span>
<span class="ln">8</span>  
<span class="ln">9</span><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">String</span> <span class="kd">extends</span> <span class="n">Object</span> <span class="kd">implements</span> <span class="n">Serializable</span><span class="o">,</span> <span class="n">Comparable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;,</span> <span class="n">CharSequence</span>
</code></pre></div><p>String在Java属于<code>java.lang.Object</code> package, The <code>String</code> class represents character strings.</p>
<p>String class 是用来创建string对象的，它是<strong>不可改变的</strong>类因为它和Java的原始数据一样都是被预先定义在Java language里面的。</p>
<p>Java 程序中的所有字符串文字，例如<code>&quot;abc&quot;</code>，都作为此类的实例实现。</p>
<p>Strings 是常量 constant；它们的值在创建后无法更改，不可变的。</p>
<hr>
<p><strong>基本上Java的内存可以分为2个部分：heap &amp; stack</strong>，String Pool 是Java在 Heap 堆中开辟出来的一个专门用来存放 String 的内存区。</p>
<p>有两种方法可以创建 String 对象:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="s">&#34;apple&#34;</span><span class="o">;</span> <span class="c1">// 通过字符串文字
</span><span class="ln">2</span><span class="c1"></span><span class="n">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="s">&#34;apple&#34;</span><span class="o">;</span>
<span class="ln">3</span><span class="n">String</span> <span class="n">s3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&#34;apple&#34;</span><span class="o">);</span> <span class="c1">// 通过 new 关键字
</span><span class="ln">4</span><span class="c1"></span><span class="n">String</span> <span class="n">s4</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&#34;apple&#34;</span><span class="o">);</span>
<span class="ln">5</span><span class="kt">char</span><span class="o">[]</span> <span class="n">s5</span> <span class="o">=</span> <span class="o">{</span><span class="sc">&#39;a&#39;</span><span class="o">,</span><span class="sc">&#39;p&#39;</span><span class="o">,</span><span class="sc">&#39;p&#39;</span><span class="o">,</span><span class="sc">&#39;l&#39;</span><span class="o">,</span><span class="sc">&#39;e&#39;</span><span class="o">};</span> 
</code></pre></div><p>方法1会新建一个字符串<code>&quot;Hello World!&quot;</code>到Java String Pool, 如果遇到同样的字符串，可以指向同一个对象直接引用。所以 s1 == s2 ? true.</p>
<p>方法2会新建一个String Object in Java Heap, 然后variable s 会heap里的对象。s3 == s4 ? False.</p>
<p>** 我们应该避免使用 方法2 去构建新的字符串。**</p>
<blockquote>
<p><a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#String(java.lang.String)"><code>String(String original)</code></a> : Initializes a <em>newly created</em> <code>String</code> object so that it represents the same sequence of characters as the argument; in other words, the newly created string is a copy of the argument string. Unless an explicit copy of original is needed, use of this constructor is unnecessary since strings are immutable. <strong>除非需要原始的显式副本，否则不需要使用new此构造函数</strong></p>
</blockquote>
<p><img src="https://www.edureka.co/blog/wp-content/uploads/2017/05/String-pool-1.png" alt="String-pool - Edureka"></p>
<p><strong>因为，Java String 是不可变的和 final 的，所以每当我们进行 String操作时都会  <em>在Heap堆中创建一个新的 String对象。</em></strong></p>
<hr>
<h3 id="stringbuffer-vs-stringbuilder">StringBuffer vs StringBuilder</h3>
<p>由于字符串操作消耗资源，Java 提供了两个实用程序类：<em>StringBuffer</em>和<em>StringBuilder</em>。
让我们了解这两个实用程序类之间的区别：</p>
<ul>
<li>StringBuffer 和 StringBuilder 是可变类。StringBuffer 操作是线程安全和同步的，而 StringBuilder 操作不是线程安全的。</li>
<li>当多个线程在单线程环境中处理相同的 String 和 StringBuilder 时，将使用 StringBuffer。</li>
</ul>
<p>**正常情况下我们应该避免使用 <em>StringBuffer</em>. **因为与 StringBuffer 相比，StringBuilder 的性能更快，因为没有同步的开销。</p>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201051219120.jpeg" alt=""></p>
<p><strong>What is the capacity of a new StringBuffer object?</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">StringBuffer</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">);</span>
<span class="ln">2</span>
<span class="ln">3</span><span class="n">For</span> <span class="n">example</span><span class="o">:</span>
<span class="ln">4</span>   <span class="n">StringBuffer</span> <span class="n">sb</span><span class="o">=</span><span class="k">new</span> <span class="n">StringBuffer</span><span class="o">(</span><span class="s">&#34;Tech&#34;</span><span class="o">);</span>
<span class="ln">5</span>   <span class="n">Capacity</span> <span class="o">=</span> <span class="n">sb</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">+</span> <span class="n">16</span> <span class="o">=</span> <span class="n">4</span> <span class="o">+</span> <span class="n">16</span> <span class="o">=</span> <span class="n">20</span> <span class="c1">// capacity 20
</span></code></pre></div><p><strong>What is the new capacity of a new StringBuffer object?</strong></p>
<p><strong>Ans:</strong> The capacity of a new StringBuffer object can be calculated by using the formula below:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">New</span> <span class="n">capacity</span> <span class="o">=</span> <span class="o">(</span> <span class="n">Current</span> <span class="n">capacity</span> <span class="o">+</span> <span class="n">1</span> <span class="o">)</span> <span class="o">*</span> <span class="n">2</span>
<span class="ln">2</span><span class="n">Thus</span><span class="o">,</span> <span class="n">New</span> <span class="n">capacity</span> <span class="o">=</span> <span class="o">(</span><span class="n">16</span> <span class="o">+</span> <span class="n">1</span><span class="o">)</span> <span class="o">*</span> <span class="n">2</span> <span class="o">=</span> <span class="n">34</span> <span class="c1">// new capacity 34
</span></code></pre></div><p>Once the 16th character is completed, the next capacity will be 34 if we add 17th character.</p>
<hr>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> 
<span class="ln">2</span><span class="o">{</span> 
<span class="ln">3</span>   <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&#34;hello&#34;</span><span class="o">;</span> 
<span class="ln">4</span>   <span class="n">s</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span><span class="s">&#34;world&#34;</span><span class="o">);</span> <span class="c1">// concat() method adds string at the end. 
</span><span class="ln">5</span><span class="c1"></span> 
<span class="ln">6</span>   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span> <span class="c1">// It will print &#34;hello&#34; because string is immutable object. 
</span><span class="ln">7</span><span class="c1"></span> <span class="o">}</span> 
<span class="ln">8</span>
<span class="ln">9</span><span class="c1">// Output: hello
</span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> 
<span class="ln">2</span><span class="o">{</span> 
<span class="ln">3</span>   <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&#34;hello&#34;</span><span class="o">;</span> 
<span class="ln">4</span>   <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span><span class="s">&#34; world&#34;</span><span class="o">);</span> <span class="c1">// concat() method adds string at the end. 
</span><span class="ln">5</span><span class="c1"></span> 
<span class="ln">6</span>   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ss</span><span class="o">);</span> <span class="c1">// It will print &#34;hello&#34; because string is immutable object. 
</span><span class="ln">7</span><span class="c1"></span> <span class="o">}</span> 
<span class="ln">8</span>
<span class="ln">9</span><span class="c1">// Output: hello world
</span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201041927445.png" alt=""></p>
<p>第一个String s 指向了string pool 的“hello”， s.concat(&quot; world&quot;)会同时在string pool创建一个新的string “world”，同时会在heap中创建一个新的string “hello world”。而此时的 s 依然是指向string pool中的 “hello”，所以print s output 依然是“hello”；</p>
<h3 id="string-compare-in-java-have-3-ways">String Compare in Java have 3 ways</h3>
<blockquote>
<ol>
<li>By**<code> equals()</code>** method</li>
<li>By <strong><code>==</code></strong> operator (double equal operators)</li>
<li>By <strong><code>compareTo()</code></strong> method.</li>
</ol>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 2</span>        <span class="n">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="s">&#34;hello&#34;</span><span class="o">;</span>
<span class="ln"> 3</span>        <span class="n">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="s">&#34;hello&#34;</span><span class="o">;</span>
<span class="ln"> 4</span>        <span class="n">String</span> <span class="n">s3</span> <span class="o">=</span>  <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&#34;hello&#34;</span><span class="o">);</span>
<span class="ln"> 5</span>
<span class="ln"> 6</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">s2</span><span class="o">));</span> <span class="c1">// true
</span><span class="ln"> 7</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">s3</span><span class="o">));</span> <span class="c1">// true
</span><span class="ln"> 8</span><span class="c1"></span>  <span class="c1">// equal是方法，比较的是对象的hash值是否相同。例如，名单上两个张三名字一样但身份证号不一样，equal只比较名字相同即为同一个人。
</span><span class="ln"> 9</span><span class="c1"></span>
<span class="ln">10</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span> <span class="o">==</span> <span class="n">s2</span><span class="o">);</span> <span class="c1">// true
</span><span class="ln">11</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span> <span class="o">==</span> <span class="n">s3</span><span class="o">);</span> <span class="c1">// false， 
</span><span class="ln">12</span><span class="c1"></span>  <span class="c1">// == 是运算符，比较的双方是否引用的同一个对象，也就是物理地址是否相同。
</span><span class="ln">13</span><span class="c1"></span>  <span class="c1">// 例如，名单上两个张三名字一样但身份证号不一样，== 比较的是他们的身份证号也要一样才能算是同一个人。
</span><span class="ln">14</span><span class="c1"></span>
<span class="ln">15</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">s2</span><span class="o">));</span> <span class="c1">// 0
</span><span class="ln">16</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">s3</span><span class="o">));</span> <span class="c1">// 0
</span><span class="ln">17</span><span class="c1"></span>  
<span class="ln">18</span>        <span class="n">StringBuffer</span> <span class="n">sb1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">(</span><span class="s">&#34;Hello&#34;</span><span class="o">);</span> 
<span class="ln">19</span>        <span class="n">StringBuffer</span> <span class="n">sb2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">(</span><span class="s">&#34;Hello&#34;</span><span class="o">);</span>  
<span class="ln">20</span> 
<span class="ln">21</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sb1</span> <span class="o">==</span> <span class="n">sb2</span><span class="o">);</span> <span class="c1">// fasle, == 比较是否指向同一个对象
</span><span class="ln">22</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sb1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">sb2</span><span class="o">));</span> <span class="c1">//false， 在StringBuffer中，equal也是比较是否饮用同一个对象
</span><span class="ln">23</span><span class="c1"></span>  
<span class="ln">24</span>    <span class="o">}</span>
</code></pre></div><hr>
<h4 id="剑指-offer-05-替换空格httpsleetcode-cncomproblemsti-huan-kong-ge-lcof"><a href="https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/">剑指 Offer 05. 替换空格</a></h4>
<p>Java 等语言中，字符串都被设计成「不可变」的类型，即无法直接修改字符串的某一位字符，需要新建一个字符串 用<code>StringBuilder</code> 来实现。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
<span class="ln"> 2</span>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">replaceSpace</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 3</span>      <span class="c1">// using StringBuilder to build new String
</span><span class="ln"> 4</span><span class="c1"></span>        <span class="n">StringBuilder</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span> 
<span class="ln"> 5</span>      <span class="c1">// toCharArray method can convert String to a Char Array, then we use for-each
</span><span class="ln"> 6</span><span class="c1"></span>        <span class="k">for</span><span class="o">(</span><span class="n">Character</span> <span class="n">c</span> <span class="o">:</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> 
<span class="ln"> 7</span>        <span class="o">{</span>
<span class="ln"> 8</span>            <span class="k">if</span><span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span><span class="o">)</span> <span class="n">res</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;%20&#34;</span><span class="o">);</span>
<span class="ln"> 9</span>            <span class="k">else</span> <span class="n">res</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
<span class="ln">10</span>        <span class="o">}</span>
<span class="ln">11</span>        <span class="k">return</span> <span class="n">res</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
<span class="ln">12</span>    <span class="o">}</span>
<span class="ln">13</span><span class="o">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Java Data Structure 1: Introduction</title>
			<link>https://daiwei.dev/posts/data-structure/1_introduction/</link>
			<pubDate>Sat, 01 Jan 2022 14:00:11 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/data-structure/1_introduction/</guid>
			<description>程序简而言之就是数据+算法，根据数据的属性 Java data structure 可以分为两大类：primitive data types &amp;amp; non-primitive data types.
 Primitive data types: byte, short, int, long, float, double, char, boolean.
Non-primitive data types: String, Array, Class, Interface, Object.
  Primitive Data Types (also called built-in types) 下面以 **Integer ** 为例：
1Module java.base 2Package java.lang 3 4Class Integer 5 6java.lang.Object 7 java.lang.Number // Number包里还包含：BigDecimal,Byte, Double,Float, Integer, Long,Short 等子包 8 java.lang.Integer 9 10public final class Integer extends Number implements Comparable&amp;lt;Integer&amp;gt; The Integer class wraps a value of the primitive type int in an object.</description>
			<content type="html"><![CDATA[<p>程序简而言之就是数据+算法，根据数据的属性 <strong>Java data structure</strong> 可以分为两大类：<strong>primitive data types &amp; non-primitive data types</strong>.</p>
<blockquote>
<p>Primitive data types: <strong>byte, short, int, long, float, double, char, boolean.</strong></p>
<p>Non-primitive data types: <strong>String, Array, Class, Interface, Object</strong>.</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201041727487.png" alt=""></p>
<hr>
<h3 id="primitive-data-types-also-called-built-in-types">Primitive Data Types (also called built-in types)</h3>
<p>下面以 **Integer ** 为例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">Module</span> <span class="n">java</span><span class="o">.</span><span class="na">base</span>
<span class="ln"> 2</span><span class="n">Package</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span>
<span class="ln"> 3</span>   
<span class="ln"> 4</span><span class="n">Class</span> <span class="n">Integer</span>
<span class="ln"> 5</span>  
<span class="ln"> 6</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Object</span>
<span class="ln"> 7</span>    <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Number</span> <span class="c1">// Number包里还包含：BigDecimal,Byte, Double,Float, Integer, Long,Short 等子包
</span><span class="ln"> 8</span><span class="c1"></span>        <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Integer</span>
<span class="ln"> 9</span>  
<span class="ln">10</span><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Integer</span> <span class="kd">extends</span> <span class="n">Number</span> <span class="kd">implements</span> <span class="n">Comparable</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span>
</code></pre></div><p>The <strong>Integer class</strong> wraps a value of the <strong>primitive type  int</strong> in an object. An object of type Integer contains a <strong>single field</strong> whose type is int.     Integer类 把原始数据类型 int 的封装为一个对象。</p>
<p><img src="https://www.edureka.co/blog/wp-content/uploads/2017/04/Primitive_Data_Type.png" alt="DataTypes - Data types in Java - Edureka"></p>
<ul>
<li>
<p><strong>byte, short, int, long, float, double, char, boolean.</strong></p>
</li>
<li>
<p>1 bit; 1 byte = 8 bits; 1kilobyte = 1024 bytes; 1 Megabyte = 1024 KBs &hellip;..因为1970年代的计算机CPU一次最多只能处理<strong>8bits</strong>的数据，所以就有了<strong>byte</strong>, byte is <strong>the basic addressable unit</strong>, below which computer architecture cannot address.</p>
</li>
<li>
<p><strong><code>char</code> in Java</strong> is <strong>UTF-16 encoded</strong>, which requires a minimum of <strong>16-bits (2bytes)</strong> of storage for each character.</p>
<p><strong><code>char</code> in C</strong> programming is <strong>ASCII encoded</strong> which only covers the english language character set, and the range is 127, which requries a minimum of <strong>8-bits (1byte)</strong> of storage for each character.</p>
<table>
<thead>
<tr>
<th style="text-align:center">Type</th>
<th>Size (bits)</th>
<th style="text-align:center">Minimum</th>
<th style="text-align:center">Maximum</th>
<th style="text-align:center">Default Value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><em>byte</em></td>
<td>8 / 1byte</td>
<td style="text-align:center">$-2^7$</td>
<td style="text-align:center">$2^7-1$</td>
<td style="text-align:center"><em>byte b = 0;</em></td>
</tr>
<tr>
<td style="text-align:center"><em>short</em></td>
<td>16 / 2bytes</td>
<td style="text-align:center">$-2^{15}$</td>
<td style="text-align:center">$2^15-1$</td>
<td style="text-align:center"><em>short s = 0;</em></td>
</tr>
<tr>
<td style="text-align:center"><em>int</em></td>
<td>32 / 4 bytes</td>
<td style="text-align:center">$-2^{31}$</td>
<td style="text-align:center">$2^{31}-1$</td>
<td style="text-align:center"><em>int i = 0;</em></td>
</tr>
<tr>
<td style="text-align:center"><em>long</em></td>
<td>64 / 8 bytes</td>
<td style="text-align:center">$-2^{63}$</td>
<td style="text-align:center">$2^{63}-1$</td>
<td style="text-align:center"><em>long l = 0</em></td>
</tr>
<tr>
<td style="text-align:center"><em>float</em></td>
<td>32 / 4 bytes</td>
<td style="text-align:center">1 sign bit, 8 bits of exponent, 23 bits of significand</td>
<td style="text-align:center"></td>
<td style="text-align:center"><em>float f = 0.0f</em></td>
</tr>
<tr>
<td style="text-align:center"><em>double</em></td>
<td>64 / 8 bytes</td>
<td style="text-align:center">1 sign bit, 11 bits of exponent, 52 bits of significand</td>
<td style="text-align:center"></td>
<td style="text-align:center"><em>double d = 0.0d</em></td>
</tr>
<tr>
<td style="text-align:center"><em>char</em></td>
<td>16 / 2 bytes</td>
<td style="text-align:center">0</td>
<td style="text-align:center">$2^{16}-1$</td>
<td style="text-align:center"><em>char c =  ‘u0000’</em></td>
</tr>
<tr>
<td style="text-align:center"><em>boolean</em></td>
<td>1 / 1 bytes</td>
<td style="text-align:center">–</td>
<td style="text-align:center">–</td>
<td style="text-align:center"><em>boolean b = false</em></td>
</tr>
</tbody>
</table>
</li>
</ul>
<blockquote>
<p><strong>在《Effective  Java》这本书中提到这个原则，float和double只能用来做科学计算或者是工程计算，在商业计算中我们要用java.math.BigDecimal。使用BigDecimal并且一定要用String来够造。</strong></p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">double</span> <span class="nf">add</span><span class="o">(</span><span class="kt">double</span> <span class="n">v1</span><span class="o">,</span><span class="kt">double</span> <span class="n">v2</span><span class="o">){</span>    
<span class="ln">2</span>    <span class="n">BigDecimal</span> <span class="n">b1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="n">Double</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">v1</span><span class="o">));</span>    
<span class="ln">3</span>    <span class="n">BigDecimal</span> <span class="n">b2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="n">Double</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">v2</span><span class="o">));</span>    
<span class="ln">4</span>    <span class="k">return</span> <span class="n">b1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">b2</span><span class="o">).</span><span class="na">doubleValue</span><span class="o">();</span>    <span class="c1">// v1 + v2
</span><span class="ln">5</span><span class="c1"></span><span class="o">}</span>  
</code></pre></div><blockquote>
<p>A primitive data type is pre-defined by the programming language. The size and type of variable values are specified, and it has no additional methods.</p>
<p>原始数据的大小和类型都是提前规定好的，并且不提供额外的方法，这就是为什么我们需要非原始数据，例如 Array, List, Set &amp; Map 来帮助我们更高效的完成数据操作。</p>
<p>所有的原始数据都是小写，并且有一个默认值。</p>
<p>所有原始类型数据变量都存储在<strong>stack栈</strong>。</p>
</blockquote>
<hr>
<h3 id="non-primitive-data-types-also-called-reference-data-type">Non-primitive Data Types (also called reference data type)</h3>
<p>非原始数据类型是Java程序员为了更加方便的存储和操控数据而在后期创造的，也被称为高级数据类型。</p>
<blockquote>
<p>非原始数据类型的首字母都是<strong>大写</strong>；</p>
<p>非原始数据类型的默认值都是<strong>null</strong>；</p>
<p>非原始数据类型存储在<strong>Heap堆</strong>，<strong>stack堆</strong>上只是保存了一个指向heap的对象的指针；</p>
<p>将非原始数据类型的值传递给方法是指实际传递存储数据的对象的地址。</p>
</blockquote>
<p>Non-primitive data types: <strong>String, Array, Class, Interface, Object</strong></p>
<ol>
<li>**class &amp; object：**每个类都是数据类型，也被认为是用户定义的数据类型。</li>
<li>**interface：**接口的声明方式与类类似，但唯一的区别是它只包含最终变量和方法声明。</li>
<li><strong>string &amp; array</strong>: 常用的非原始数据类型，string也是一个class。</li>
</ol>
<p><img src="https://beginnersbook.com/wp-content/uploads/2013/12/Java-collection-framework-hierarchy.png" alt="Java Collections"></p>
<hr>
<h3 id="primitive-data-types-vs-non-primitive-data-types">Primitive Data Types VS Non-Primitive Data Types</h3>
<p>The main difference between <strong>primitive</strong> and <strong>non-primitive</strong> data types are:</p>
<ul>
<li>
<p>Primitive types are predefined (already defined) in Java. Non-primitive types are created by the programmer and is not defined by Java (except for <code>String</code>).</p>
<p>原始数据类型都是被Java language 提前定义好的，非原始数据除了<strong>String</strong>, 其他都是后期定义的。</p>
<p><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/package-summary.html">java.lang</a>:</p>
<ul>
<li>
<p><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Byte.html">Byte</a>, <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Short.html">Short</a>, <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Integer.html">Integer</a>, <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Long.html">Long</a>, <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Float.html">Float</a>, <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Double.html">Double</a>, <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html">Character</a>, <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Boolean.html">Boolean</a>.</p>
</li>
<li>
<p><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html">String</a>.</p>
</li>
</ul>
</li>
<li>
<p>Non-primitive types can be used to call methods to perform certain operations, while primitive types cannot.</p>
<p>非原始数据类型可以使用方法操作数据，非原始数据类型没有定义额外方法。</p>
</li>
<li>
<p>A primitive type has always a value, while non-primitive types can be <code>null</code>.</p>
<p>原始数据类型都有一个值或者不能为null的默认值。而所有的非原始数据默认值是<strong>null</strong>。</p>
</li>
<li>
<p>A primitive type starts with a lowercase letter, while non-primitive types starts with an uppercase letter.</p>
<p>原始数据类型小写开头，非原始数据大写开头。</p>
</li>
<li>
<p>The size of a primitive type depends on the data type, while non-primitive types have all the same size.</p>
<p>原始数据类型大小是固定的存储在<strong>stack栈</strong>，非原始数据类型大小都是动态的存储在<strong>heap堆</strong>。</p>
</li>
<li>
<p>原始数据类型是pass by value（copy值），原始数据不会被method改变。</p>
<p>非原始数据类型是pass by reference（copy物理地址）, 原始数据可以被method改变。</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201041845283.png" alt=""></p>
<p><img src="https://pica.zhimg.com/v2-5dd21bea8b50af177e31351ed0a2ea8d_r.jpg?source=172ae18b" alt=""></p>
<p><img src="https://static.javatpoint.com/ds/images/ds-introduction.png" alt=""></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/5253e82f78c3e235799fe38bfab6f097.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201111624931.png" alt=""></p>
]]></content>
		</item>
		
		<item>
			<title>Data Structure</title>
			<link>https://daiwei.dev/posts/data-structure/data-structure/</link>
			<pubDate>Sat, 01 Jan 2022 10:57:11 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/data-structure/data-structure/</guid>
			<description>Array 数组是将相同类型的元素存储于连续内存空间的数据结构，其长度不可变。
构建数组需要在初始化时给定长度，并对数组每个索引元素赋值，代码如下：
1int[] array = new array[3]; // 初始化一个长度为 3 的数组 array 2array[0] = 1; // 元素赋值 3array[1] = 2; 4array[2] = 3; 或者可以使用直接赋值的初始化方式，代码如下：
1int[] array = {1,2,3}; //直接赋值 List List—是一个有序的集合，可以包含重复的元素，提供了按索引访问的方式，它继承Collection。
List有两个重要的实现类：ArrayList和LinkedList
线性表在数据结构中是一种最基本、最简单、最常用的数据结构。它将数据一个接一个的排成一条线（可能逻辑上），也因此线性表上的每个数据只有前后两个方向，而在数据结构中，数组、链表、栈、队列都是线性表。二叉树和图就是典型的非线性结构了
ArrayList  ArrayList
  下面两种ArrayList初始化方式都是正确的，List is an interface and ArrayList is a class.
1List&amp;lt;Integer&amp;gt; list1 = new ArrayList&amp;lt;Integer&amp;gt;(); //generally preferred 2ArrayList&amp;lt;Integer&amp;gt; list2 = (ArrayList&amp;lt;Integer&amp;gt;) list; // type-cast   initialize as List&amp;lt;E&amp;gt; 更加灵活flexible, preferable，可以随后选择 LinkedList or ArrayList.</description>
			<content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/img_convert/5253e82f78c3e235799fe38bfab6f097.png" alt="img"></p>
<p><img src="https://pica.zhimg.com/v2-5dd21bea8b50af177e31351ed0a2ea8d_r.jpg?source=172ae18b" alt=""></p>
<p><img src="https://miro.medium.com/max/2000/1*RyCRTcbKIxHiPe5AObrvqQ.png" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/20190227211326757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NhcnRvb25f,size_16,color_FFFFFF,t_70" alt=""></p>
<p><img src="https://static.javatpoint.com/ds/images/ds-introduction.png" alt=""></p>
<p><img src="https://static.javatpoint.com/images/java-collection-hierarchy.png" alt="Hierarchy of Java Collection framework"></p>
<h2 id="array">Array</h2>
<p><img src="https://java2blog.com/wp-content/uploads/2017/09/Array.png" alt="img"></p>
<p>数组是将相同类型的元素存储于连续内存空间的数据结构，其长度不可变。</p>
<p>构建数组需要在初始化时给定长度，并对数组每个索引元素赋值，代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="k">new</span> <span class="n">array</span><span class="o">[</span><span class="n">3</span><span class="o">];</span> <span class="c1">// 初始化一个长度为 3 的数组 array
</span><span class="ln">2</span><span class="c1"></span><span class="n">array</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="c1">// 元素赋值
</span><span class="ln">3</span><span class="c1"></span><span class="n">array</span><span class="o">[</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">2</span><span class="o">;</span>
<span class="ln">4</span><span class="n">array</span><span class="o">[</span><span class="n">2</span><span class="o">]</span> <span class="o">=</span> <span class="n">3</span><span class="o">;</span>
</code></pre></div><p>或者可以使用直接赋值的初始化方式，代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="o">{</span><span class="n">1</span><span class="o">,</span><span class="n">2</span><span class="o">,</span><span class="n">3</span><span class="o">};</span> <span class="c1">//直接赋值
</span></code></pre></div><h2 id="list">List</h2>
<p><strong>List—是一个有序的集合，可以包含重复的元素，提供了按索引访问的方式，它继承Collection。</strong></p>
<p><strong>List有两个重要的实现类：ArrayList和LinkedList</strong></p>
<p>线性表在数据结构中是一种<strong>最基本、最简单、最常用</strong>的数据结构。它将数据一个接一个的排成一条线（可能逻辑上），也因此线性表上的每个数据只有前后两个方向，而在数据结构中，<strong>数组、链表、栈、队列</strong>都是线性表。<strong>二叉树</strong>和<strong>图</strong>就是典型的非线性结构了</p>
<h2 id="arraylist">ArrayList</h2>
<figure class="right"><img src="https://java2blog.com/wp-content/webpc-passthru.php?src=https://java2blog.com/wp-content/uploads/2016/05/ArrayList.jpg&amp;nocache=1%20S"
         alt="image"/><figcaption>
            <p>ArrayList</p>
        </figcaption>
</figure>

<p>下面两种ArrayList初始化方式都是正确的，List is an <strong><code>interface</code></strong> and ArrayList is a <strong><code>class</code></strong>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span> <span class="c1">//generally preferred
</span><span class="ln">2</span><span class="c1"></span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list2</span> <span class="o">=</span> <span class="o">(</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;)</span> <span class="n">list</span><span class="o">;</span> <span class="c1">// type-cast
</span></code></pre></div><ul>
<li>
<p>initialize as <strong><code>List&lt;E&gt;</code></strong> 更加灵活flexible, preferable，可以随后选择 LinkedList or ArrayList.</p>
</li>
<li>
<p>initialize as <strong><code>ArrayList&lt;E&gt;</code></strong> 可以访问使用所有的ArrayList class method, such as such as <em><code>ArrayList#ensureCapacity</code></em> or <em><code>ArrayList#trimToSize</code></em>.</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span><span class="c1">// 初始化可变数组
</span><span class="ln">2</span><span class="c1"></span><span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;one&#34;</span><span class="o">);</span> <span class="c1">// list[&#34;one&#34;]
</span><span class="ln">3</span><span class="c1"></span><span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;two&#34;</span><span class="o">);</span> <span class="c1">// list[&#34;one&#34;,&#34;two&#34;]
</span><span class="ln">4</span><span class="c1"></span><span class="n">list</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">0</span><span class="o">);</span> <span class="c1">//list[&#34;two&#34;]
</span><span class="ln">5</span><span class="c1"></span><span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">1</span><span class="o">,</span><span class="n">4</span><span class="o">);</span> <span class="c1">//list[&#34;two&#34;,4]
</span><span class="ln">6</span><span class="c1"></span><span class="kt">boolean</span> <span class="n">a</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">2</span><span class="o">);</span> <span class="c1">//true
</span></code></pre></div><p>ArrayList的 <strong>toArray</strong> 方法返回一个数组, ArrayList的 <strong>asList</strong> 方法返回一个列表.</p>
<h2 id="linkedlist">LinkedList</h2>
<figure class="right"><img src="https://img-blog.csdnimg.cn/img_convert/81117006f63098c29cceb5938fdc3199.png"
         alt="image"/><figcaption>
            <p>LinkedList</p>
        </figcaption>
</figure>

<p>链表以节点为单位，每个元素都是一个独立对象，在内存空间的存储是非连续的。链表的节点对象具有两个成员变量：「值 <code>val</code>」，「后继节点引用 <code>next</code>」 。 可实现Stacks, Queues, and trees等数据结构。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="kd">class</span> <span class="nc">ListNode</span> <span class="o">{</span>
<span class="ln">2</span>    <span class="kt">int</span> <span class="n">val</span><span class="o">;</span>       <span class="c1">// 节点值
</span><span class="ln">3</span><span class="c1"></span>    <span class="n">ListNode</span> <span class="n">next</span><span class="o">;</span> <span class="c1">// 后继节点引用
</span><span class="ln">4</span><span class="c1"></span>    <span class="n">ListNode</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span> <span class="n">val</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span> <span class="o">}</span>
<span class="ln">5</span><span class="o">}</span>
</code></pre></div><p>和ArrayList 一样，下面两种ArrayList初始化方式都是正确的，List is an <strong><code>interface</code></strong> and LinkedList is a <strong><code>class</code></strong>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span> <span class="c1">//generally preferred
</span><span class="ln">2</span><span class="c1"></span><span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span> <span class="c1">// type-cast
</span></code></pre></div><p><code>List&lt;E&gt;</code> is more generally preferred over <code>LinkedList&lt;E&gt;</code>, but If needed to add cells in the beginning/middle/end of the list LinkedList proved you  <em><code>addFirst, addLast &amp; removeFirst, removeLast &amp; getFirst, getLast</code></em> method.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">list2</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">1</span><span class="o">);</span> <span class="c1">// list[1]
</span><span class="ln">2</span><span class="c1"></span><span class="n">list2</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">2</span><span class="o">);</span> <span class="c1">// list[2,1]     
</span><span class="ln">3</span><span class="c1"></span><span class="n">list2</span><span class="o">.</span><span class="na">removeLast</span><span class="o">();</span> <span class="c1">// list[2]
</span><span class="ln">4</span><span class="c1"></span><span class="n">list2</span><span class="o">.</span><span class="na">getFirst</span><span class="o">();</span> <span class="c1">// 2
</span></code></pre></div><h2 id="arraylist-vs-linkedlist">ArrayList vs LinkedList</h2>
<figure class="right"><img src="https://static.studytonight.com/data-structures/images/array-vs-linked-list.png"
         alt="ArrayList vs LinkedList"/><figcaption>
            <p>ArrayList vs LinkedList</p>
        </figcaption>
</figure>

<blockquote>
<ul>
<li>
<p>ArrayList <strong>底层是数组,内存地址连续可随机访问元素，查询快O(1),</strong></p>
</li>
<li>
<p>ArrayList <strong>动态扩容和元素拷贝 增删慢, 实现了List 接口;</strong></p>
</li>
<li>
<p>LinkedList <strong>底层是链表,内存地址不连续必须按顺序访问元素，查询慢O(N),</strong></p>
</li>
<li>
<p>LinkedList <strong>只需要修改节点指针指向 增删快O(1), 实现List &amp; Deque 接口。</strong></p>
</li>
</ul>
</blockquote>
<h2 id="stack">Stack</h2>
<p><figure class="right"><img src="https://java2blog.com/wp-content/webpc-passthru.php?src=https://java2blog.com/wp-content/uploads/2017/09/Stack.png&amp;nocache=1%20Z"
         alt="Stack"/><figcaption>
            <p>Stack</p>
        </figcaption>
</figure>
&quot;</p>
<p>栈是一种具有 「先入后出 FILO」 特点的抽象数据结构，可使用数组或链表实现。</p>
<p>通过常用操作「入栈 <code>push()</code>」,「出栈 <code>pop()</code>」，展示了栈的先入后出特性</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">Stack</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;&gt;();</span>
<span class="ln">2</span><span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">1</span><span class="o">);</span> <span class="c1">// push = 1 ,stack = [1]
</span><span class="ln">3</span><span class="c1"></span><span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">2</span><span class="o">);</span> <span class="c1">// push = 2, stack = [1,2]
</span><span class="ln">4</span><span class="c1"></span><span class="n">stack</span><span class="o">.</span><span class="na">peek</span><span class="o">();</span> <span class="c1">// peek = 2
</span><span class="ln">5</span><span class="c1"></span><span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span> <span class="c1">// pop = 2, stack[1],
</span><span class="ln">6</span><span class="c1"></span><span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span> <span class="c1">// pop = 1, stack[],
</span></code></pre></div><h2 id="queue">Queue</h2>
<figure class="right"><img src="https://java2blog.com/wp-content/webpc-passthru.php?src=https://java2blog.com/wp-content/uploads/2017/09/Queue.png&amp;nocache=1%20S"
         alt="Queue"/><figcaption>
            <p>Queue</p>
        </figcaption>
</figure>

<p>队列是一种具有 「先入先出 FIFO」 特点的抽象数据结构，可使用链表实现.</p>
<p>通过常用操作「入队 <code>offer()</code>」,「出队 <code>poll()</code>」，展示了队列的先入先出特性。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">Queue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
<span class="ln">2</span><span class="n">queue</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">1</span><span class="o">);</span> <span class="c1">// queue = [1]
</span><span class="ln">3</span><span class="c1"></span><span class="n">queue</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">2</span><span class="o">);</span> <span class="c1">// queue = [1,2]
</span><span class="ln">4</span><span class="c1"></span><span class="n">queue</span><span class="o">.</span><span class="na">peek</span><span class="o">();</span> <span class="c1">// peek = 1
</span><span class="ln">5</span><span class="c1"></span><span class="n">queue</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>   <span class="c1">// poll = 1; queue = [2]
</span><span class="ln">6</span><span class="c1"></span><span class="n">queue</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>   <span class="c1">// poll = 2; queue = []
</span></code></pre></div><h2 id="tree">Tree</h2>
<figure class="right"><img src="https://img-blog.csdnimg.cn/img_convert/03f6d9e00726a132eac1b662a4e8a5ef.png"
         alt="Tree"/><figcaption>
            <p>Tree</p>
        </figcaption>
</figure>

<p>树是一种非线性数据结构，根据子节点数量可分为 「二叉树」 和 「多叉树」，最顶层的节点称为「根节点 root」。以二叉树为例，每个节点包含三个成员变量：「值 val」、「左子节点 left」、「右子节点 right」 。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="kd">class</span> <span class="nc">TreeNode</span> <span class="o">{</span>
<span class="ln">2</span>    <span class="kt">int</span> <span class="n">val</span><span class="o">;</span>        <span class="c1">// 节点值
</span><span class="ln">3</span><span class="c1"></span>    <span class="n">TreeNode</span> <span class="n">left</span><span class="o">;</span>  <span class="c1">// 左子节点
</span><span class="ln">4</span><span class="c1"></span>    <span class="n">TreeNode</span> <span class="n">right</span><span class="o">;</span> <span class="c1">// 右子节点
</span><span class="ln">5</span><span class="c1"></span>    <span class="n">TreeNode</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span> <span class="n">val</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span> <span class="o">}</span>
<span class="ln">6</span><span class="o">}</span>
</code></pre></div><p>建立此二叉树需要实例化每个节点，并构建各节点的引用指向。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="c1">// 初始化节点
</span><span class="ln"> 2</span><span class="c1"></span><span class="n">TreeNode</span> <span class="n">n1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeNode</span><span class="o">(</span><span class="n">3</span><span class="o">);</span> <span class="c1">// 根节点 root
</span><span class="ln"> 3</span><span class="c1"></span><span class="n">TreeNode</span> <span class="n">n2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeNode</span><span class="o">(</span><span class="n">4</span><span class="o">);</span>
<span class="ln"> 4</span><span class="n">TreeNode</span> <span class="n">n3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeNode</span><span class="o">(</span><span class="n">5</span><span class="o">);</span>
<span class="ln"> 5</span><span class="n">TreeNode</span> <span class="n">n4</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeNode</span><span class="o">(</span><span class="n">1</span><span class="o">);</span>
<span class="ln"> 6</span><span class="n">TreeNode</span> <span class="n">n5</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeNode</span><span class="o">(</span><span class="n">2</span><span class="o">);</span>
<span class="ln"> 7</span>
<span class="ln"> 8</span><span class="c1">// 构建引用指向
</span><span class="ln"> 9</span><span class="c1"></span><span class="n">n1</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">n2</span><span class="o">;</span>
<span class="ln">10</span><span class="n">n1</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">n3</span><span class="o">;</span>
<span class="ln">11</span><span class="n">n2</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">n4</span><span class="o">;</span>
<span class="ln">12</span><span class="n">n2</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">n5</span><span class="o">;</span>
</code></pre></div><h2 id="graph">Graph</h2>
<figure class="right"><img src="https://img-blog.csdnimg.cn/img_convert/8bb2cee2e9db758ff3de1ace8a5fc848.png"
         alt="Graph"/><figcaption>
            <p>Graph</p>
        </figcaption>
</figure>

<p>图是一种非线性数据结构，由「节点（顶点）vertex」和「边 edge」组成，每条边连接一对顶点。根据边的方向有无，图可分为「有向图」和「无向图」。本文 以无向图为例 开展介绍。</p>
<p>如下图所示，此无向图的 顶点 和 边 集合分别为：</p>
<p>顶点集合： vertices = {1, 2, 3, 4, 5}
边集合： edges = {(1, 2), (1, 3), (1, 4), (1, 5), (2, 4), (3, 5), (4, 5)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="kt">int</span><span class="o">[]</span> <span class="n">vertices</span> <span class="o">=</span> <span class="o">{</span><span class="n">1</span><span class="o">,</span> <span class="n">2</span><span class="o">,</span> <span class="n">3</span><span class="o">,</span> <span class="n">4</span><span class="o">,</span> <span class="n">5</span><span class="o">};</span>
<span class="ln">2</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">edges</span> <span class="o">=</span> <span class="o">{{</span><span class="n">0</span><span class="o">,</span> <span class="n">1</span><span class="o">,</span> <span class="n">1</span><span class="o">,</span> <span class="n">1</span><span class="o">,</span> <span class="n">1</span><span class="o">},</span>
<span class="ln">3</span>                 <span class="o">{</span><span class="n">1</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">1</span><span class="o">,</span> <span class="n">0</span><span class="o">},</span>
<span class="ln">4</span>                 <span class="o">{</span><span class="n">1</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">1</span><span class="o">},</span>
<span class="ln">5</span>                 <span class="o">{</span><span class="n">1</span><span class="o">,</span> <span class="n">1</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">1</span><span class="o">},</span>
<span class="ln">6</span>                 <span class="o">{</span><span class="n">1</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">1</span><span class="o">,</span> <span class="n">1</span><span class="o">,</span> <span class="n">0</span><span class="o">}}</span>
</code></pre></div><h2 id="hashing">Hashing</h2>
<figure class="right"><img src="https://img-blog.csdnimg.cn/img_convert/f2adf1e5cc3f127acd432dc34b7b2fbe.png"
         alt="Hashing"/><figcaption>
            <p>Hashing</p>
        </figcaption>
</figure>

<p>散列表是一种非线性数据结构，通过利用 Hash 函数将指定的「键 <code>key</code>」映射至对应的「值 <code>value</code>」，以实现高效的元素查找.</p>
<blockquote>
<p>设想一个简单场景：小力、小特、小扣的学号分别为 10001, 10002, 10003 。
现需求从「姓名」查找「学号」。</p>
</blockquote>
<p>则可通过建立姓名为 key ，学号为 value 的散列表实现此需求，代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="c1">// 初始化散列表
</span><span class="ln"> 2</span><span class="c1"></span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">dic</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="ln"> 3</span>
<span class="ln"> 4</span><span class="c1">// 添加 key -&gt; value 键值对
</span><span class="ln"> 5</span><span class="c1"></span><span class="n">dic</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;小力&#34;</span><span class="o">,</span> <span class="n">10001</span><span class="o">);</span>
<span class="ln"> 6</span><span class="n">dic</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;小特&#34;</span><span class="o">,</span> <span class="n">10002</span><span class="o">);</span>
<span class="ln"> 7</span><span class="n">dic</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;小扣&#34;</span><span class="o">,</span> <span class="n">10003</span><span class="o">);</span>
<span class="ln"> 8</span>
<span class="ln"> 9</span><span class="c1">// 从姓名查找学号
</span><span class="ln">10</span><span class="c1"></span><span class="n">dic</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;小力&#34;</span><span class="o">);</span> <span class="c1">// -&gt; 10001
</span><span class="ln">11</span><span class="c1"></span><span class="n">dic</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;小特&#34;</span><span class="o">);</span> <span class="c1">// -&gt; 10002
</span><span class="ln">12</span><span class="c1"></span><span class="n">dic</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;小扣&#34;</span><span class="o">);</span> <span class="c1">// -&gt; 10003
</span></code></pre></div><h2 id="heap">Heap</h2>
<figure class="right"><img src="https://img-blog.csdnimg.cn/img_convert/a803f4a953df9c1e5a243883c1ae7c94.png"
         alt="Heap"/><figcaption>
            <p>Heap</p>
        </figcaption>
</figure>

<p>堆是一种基于「完全二叉树」的数据结构，可使用数组实现。以堆为原理的排序算法称为「堆排序」，基于堆实现的数据结构为「优先队列」。堆分为「大顶堆」和「小顶堆」，大（小）顶堆：任意节点的值不大于（小于）其父节点的值。</p>
<blockquote>
<p>完全二叉树定义： 设二叉树深度为 kk ，若二叉树除第 kk 层外的其它各层（第 11 至 k-1k−1 层）的节点达到最大个数，且处于第 kk 层的节点都连续集中在最左边，则称此二叉树为完全二叉树。</p>
</blockquote>
<p>如下图所示，为包含 1, 4, 2, 6, 8 元素的小顶堆。将堆（完全二叉树）中的结点按层编号，即可映射到右边的数组存储形式。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="c1">// 初始化小顶堆
</span><span class="ln"> 2</span><span class="c1"></span><span class="n">Queue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">heap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PriorityQueue</span><span class="o">&lt;&gt;();</span>
<span class="ln"> 3</span>
<span class="ln"> 4</span><span class="c1">// 元素入堆
</span><span class="ln"> 5</span><span class="c1"></span><span class="n">heap</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">1</span><span class="o">);</span>
<span class="ln"> 6</span><span class="n">heap</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">4</span><span class="o">);</span>
<span class="ln"> 7</span><span class="n">heap</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">2</span><span class="o">);</span>
<span class="ln"> 8</span><span class="n">heap</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">6</span><span class="o">);</span>
<span class="ln"> 9</span><span class="n">heap</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">8</span><span class="o">);</span>
<span class="ln">10</span>
<span class="ln">11</span><span class="c1">// 元素出堆（从小到大）
</span><span class="ln">12</span><span class="c1"></span><span class="n">heap</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span> <span class="c1">// -&gt; 1
</span><span class="ln">13</span><span class="c1"></span><span class="n">heap</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span> <span class="c1">// -&gt; 2
</span><span class="ln">14</span><span class="c1"></span><span class="n">heap</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span> <span class="c1">// -&gt; 4
</span><span class="ln">15</span><span class="c1"></span><span class="n">heap</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span> <span class="c1">// -&gt; 6
</span><span class="ln">16</span><span class="c1"></span><span class="n">heap</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span> <span class="c1">// -&gt; 8
</span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202112291814955.png" alt=""></p>
]]></content>
		</item>
		
		<item>
			<title>Microservices 1: Introduction</title>
			<link>https://daiwei.dev/posts/microservices/microservices1_intro/</link>
			<pubDate>Thu, 30 Dec 2021 16:17:23 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/microservices/microservices1_intro/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>Java Interview Questions</title>
			<link>https://daiwei.dev/posts/java/java_interview/</link>
			<pubDate>Tue, 28 Dec 2021 15:25:50 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/java/java_interview/</guid>
			<description>一、开场介绍 自我介绍。
项目经验。
数据结构:
Arraylist vs Linklist
HashSet vs HashMap
Binary Tree vs Binary Search Tree
二、JVM 垃圾回收算法有几种类型？ 他们对应的优缺点又是什么？ 类的加载过程是什么？简单描述一下每一个步骤 JVM 预约义的类加载器有哪几种？分别什么做用？ 什么是双亲委派模式？有什么做用？ 什么是内存溢出， 内存泄露？ 他们的区别是什么？ 引发类加载操做的行为有哪些？ 介绍一下 JVM 提供的经常使用工具 Full GC 、 Major GC 、Minor GC 之间区别？ 何时触发 Full GC ？
三、Java并发 什么是可重入锁、乐观锁、悲观锁、公平锁、非公平锁、独占锁、共享锁？ 讲讲ThreadLocal 的实现原理？ ThreadLocal 做为变量的线程隔离方式，其内部是如何作的？ 说说InheritableThreadLocal 的实现原理？ 并发包中锁的实现底层（对AQS的理解）？ 讲讲独占锁 ReentrantLock 原理？
四、Java集合 HashSet 和 TreeSet 有什么区别？ HashSet 的底层实现是什么? LinkedHashMap 的实现原理? 为何集合类没有实现 Cloneable 和 Serializable 接口？ 什么是迭代器 (Iterator)？ Iterator 和 ListIterator 的区别是什么？</description>
			<content type="html"><![CDATA[<h2 id="一开场介绍">一、开场介绍</h2>
<p>自我介绍。</p>
<p>项目经验。</p>
<p>数据结构:</p>
<p>Arraylist vs Linklist</p>
<p>HashSet vs HashMap</p>
<p>Binary Tree vs Binary Search Tree</p>
<h2 id="二jvm">二、JVM</h2>
<p>垃圾回收算法有几种类型？ 他们对应的优缺点又是什么？
类的加载过程是什么？简单描述一下每一个步骤
JVM 预约义的类加载器有哪几种？分别什么做用？
什么是双亲委派模式？有什么做用？
什么是内存溢出， 内存泄露？ 他们的区别是什么？
引发类加载操做的行为有哪些？
介绍一下 JVM 提供的经常使用工具
Full GC 、 Major GC 、Minor GC 之间区别？
何时触发 Full GC ？</p>
<h2 id="三java并发">三、Java并发</h2>
<p>什么是可重入锁、乐观锁、悲观锁、公平锁、非公平锁、独占锁、共享锁？
讲讲ThreadLocal 的实现原理？
ThreadLocal 做为变量的线程隔离方式，其内部是如何作的？
说说InheritableThreadLocal 的实现原理？
并发包中锁的实现底层（对AQS的理解）？
讲讲独占锁 ReentrantLock 原理？</p>
<h2 id="四java集合">四、Java集合</h2>
<p>HashSet 和 TreeSet 有什么区别？
HashSet 的底层实现是什么?
LinkedHashMap 的实现原理?
为何集合类没有实现 Cloneable 和 Serializable 接口？
什么是迭代器 (Iterator)？
Iterator 和 ListIterator 的区别是什么？</p>
<h2 id="五spring全家桶">五、Spring全家桶</h2>
<p>Spring bean的生命周期能不能结合源码回答一下这个问题、或者结合一下bean的生命的意义来回答，就是Spring为何须要找个生命周期</p>
<p>Spring容器当中包含了哪些常用组件（至少说5个），作用是什么，场景是什么；比如BeanDefinition；再比如BeanDefinitionMap</p>
<p>Spring自动注入的原理是什么？能不能从源码来说明一下这个问题；我们常常说的自动注入，到底怎么注入的？有什么坑？怎么让你一个属性不自动注入</p>
<p>Spring源码当中如何来搞定循环依赖的？Spring支持循环依赖？生命情况不支持？支持的原理是什么？能不能从源码来说明一下？</p>
<p>如何来二次扩展Spring，比如自定义一个实现自动注入的注解；不使用@Autowried，自己如何开发一个@XXX来完成自动注入？</p>
<p>mybatis源码当中利用了Spirng的那些扩展？mybatis扩展Spring以后有哪些问题是没法解决的？好比二级缓存怎么解决</p>
<p>eureka源码当中如何扩展的Spring？好比怎么动态插拔eureka的功能，利用了Spring的那个技术点，或者从源码说一下</p>
<h2 id="六redis">六、Redis</h2>
<p>Redis 持久化机制有哪些？ 区别是什么？优缺点是什么？</p>
<p>Redis支持的数据类型</p>
<p>为何 Redis 须要把全部数据放到内存中？</p>
<p>Redis 是单线程的吗？</p>
<p>Redis 的缓存失效策略有哪几种？</p>
<p>什么是缓存命中率？提升缓存命中率的方法有哪些？</p>
<p>Redis全局命令及数据库管理</p>
<p>Redis设计订单应用场景</p>
<p>Redis缓存雪崩讲讲看？</p>
<p>什么是缓存穿透？</p>
<p>Redis重启时加载AOF与RDB的顺序</p>
<h2 id="七-中间件">七. 中间件</h2>
<p>Dubbo完整的一次调用链路介绍；</p>
<p>Dubbo支持几种负载均衡策略？</p>
<p>Dubbo Provider服务提供者要控制执行并发请求上限，具体怎么作？</p>
<p>Dubbo启动的时候支持几种配置方式？</p>
<p>了解几种消息中间件产品？各产品的优缺点介绍；</p>
<p>消息中间件如何保证消息的一致性和如何进行消息的重试机制？</p>
<p>Spring Cloud熔断机制介绍；</p>
<p>Spring Cloud对比下Dubbo，什么场景下该使用Spring Cloud？</p>
<h2 id="八分布式">八、分布式</h2>
<p>消息中间件如何解决消息丢失问题</p>
<p>Dubbo的服务请求失败怎么处理</p>
<p>重连机制会不会形成错误</p>
<p>对分布式事务的理解</p>
<p>如何实现负载均衡，有哪些算法能够实现？</p>
<p>Zookeeper的用途，选举的原理是什么？</p>
<p>数据的垂直拆分水平拆分。</p>
<p>zookeeper原理和适用场景</p>
<p>zookeeper watch机制</p>
<p>redis/zk节点宕机如何处理</p>
<p>分布式集群下如何作到惟一序列号</p>
<p>如何作一个分布式锁</p>
<p>用过哪些MQ，怎么用的，和其余mq比较有什么优缺点，MQ的链接是线程安全的吗</p>
<p>MQ系统的数据如何保证不丢失</p>
<p>列举出你能想到的数据库分库分表策略；分库分表后，如何解决全表查询的问题。</p>
<h2 id="九数据库">九、数据库</h2>
<p>MySQL InnoDB存储的文件结构</p>
<p>索引树是如何维护的？</p>
<p>数据库自增主键可能的问题</p>
<p>MySQL的几种优化</p>
<p>mysql索引为何使用B+树</p>
<p>数据库锁表的相关处理</p>
<p>索引失效场景</p>
<p>高并发下如何作到安全的修改同一行数据，乐观锁和悲观锁是什么，INNODB的行级锁有哪2种，解释其含义</p>
<p>数据库会死锁吗，举一个死锁的例子，mysql怎么解决死锁</p>
<h2 id="十计算机网络">十、计算机网络</h2>
<p>OSI vs TCP/IP Model</p>
<p>TCP vs UDP Protocol</p>
<p>Http vs Https</p>
<p>IPv4 vs IPv6</p>
<p>3 ways handshake connection</p>
<p>4 ways handshake disconnection</p>
<p>What happen after your type &lsquo;google.com&rsquo; in the borrower</p>
<p>DNS / MAC</p>
<h2 id="十一算法">十一、算法</h2>
<p>Leetcode</p>
]]></content>
		</item>
		
		<item>
			<title>SpringBoot 5: Lombok</title>
			<link>https://daiwei.dev/posts/spring/springboot5_lombok/</link>
			<pubDate>Fri, 24 Dec 2021 11:43:43 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/spring/springboot5_lombok/</guid>
			<description>Lombok 是一款用来通过注解自动生成辅助代码的插件，通过注释可自动生成Getter, Setter, AllArgsConstructor&amp;hellip;.
1package com.example.bootlunch.model; 2 3import lombok.AllArgsConstructor; 4import lombok.Builder; 5import lombok.Data; 6import lombok.NoArgsConstructor; 7import lombok.extern.slf4j.Slf4j; 8 9@Data // generate set, get method 10@Slf4j // generate project logger 11@Builder // create object 12@AllArgsConstructor // generate all args constructor 13@NoArgsConstructor // generate no args constructor 14public class LombokPOJO { 15 16 private String name; 17 18 private Integer age; 19} complied bytecode 编译后的字节码
1// 2// Source code recreated from a .</description>
			<content type="html"><![CDATA[<p>Lombok 是一款用来通过注解自动生成辅助代码的插件，通过注释可自动生成Getter, Setter, AllArgsConstructor&hellip;.</p>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202112081144164.png" alt=""></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kn">package</span> <span class="nn">com.example.bootlunch.model</span><span class="o">;</span>
<span class="ln"> 2</span>
<span class="ln"> 3</span><span class="kn">import</span> <span class="nn">lombok.AllArgsConstructor</span><span class="o">;</span>
<span class="ln"> 4</span><span class="kn">import</span> <span class="nn">lombok.Builder</span><span class="o">;</span>
<span class="ln"> 5</span><span class="kn">import</span> <span class="nn">lombok.Data</span><span class="o">;</span>
<span class="ln"> 6</span><span class="kn">import</span> <span class="nn">lombok.NoArgsConstructor</span><span class="o">;</span>
<span class="ln"> 7</span><span class="kn">import</span> <span class="nn">lombok.extern.slf4j.Slf4j</span><span class="o">;</span>
<span class="ln"> 8</span>
<span class="ln"> 9</span><span class="nd">@Data</span> <span class="c1">// generate set, get method
</span><span class="ln">10</span><span class="c1"></span><span class="nd">@Slf4j</span> <span class="c1">// generate project logger
</span><span class="ln">11</span><span class="c1"></span><span class="nd">@Builder</span> <span class="c1">// create object
</span><span class="ln">12</span><span class="c1"></span><span class="nd">@AllArgsConstructor</span> <span class="c1">// generate all args constructor
</span><span class="ln">13</span><span class="c1"></span><span class="nd">@NoArgsConstructor</span> <span class="c1">// generate no args constructor
</span><span class="ln">14</span><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LombokPOJO</span> <span class="o">{</span>
<span class="ln">15</span>
<span class="ln">16</span>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
<span class="ln">17</span>
<span class="ln">18</span>    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">age</span><span class="o">;</span>
<span class="ln">19</span><span class="o">}</span>
</code></pre></div><p>complied bytecode 编译后的字节码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">  1</span><span class="c1">//
</span><span class="ln">  2</span><span class="c1">// Source code recreated from a .class file by IntelliJ IDEA
</span><span class="ln">  3</span><span class="c1">// (powered by FernFlower decompiler)
</span><span class="ln">  4</span><span class="c1">//
</span><span class="ln">  5</span><span class="c1"></span>
<span class="ln">  6</span><span class="kn">package</span> <span class="nn">com.example.bootlunch.model</span><span class="o">;</span>
<span class="ln">  7</span>
<span class="ln">  8</span><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="ln">  9</span><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="ln"> 10</span>
<span class="ln"> 11</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LombokPOJO</span> <span class="o">{</span>
<span class="ln"> 12</span>  <span class="c1">// generate project logger
</span><span class="ln"> 13</span><span class="c1"></span>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">LombokPOJO</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="ln"> 14</span>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
<span class="ln"> 15</span>    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">age</span><span class="o">;</span>
<span class="ln"> 16</span>
<span class="ln"> 17</span>  <span class="c1">// create object
</span><span class="ln"> 18</span><span class="c1"></span>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">bootlunch</span><span class="o">.</span><span class="na">model</span><span class="o">.</span><span class="na">LombokPOJO</span><span class="o">.</span><span class="na">LombokPOJOBuilder</span> <span class="nf">builder</span><span class="o">()</span> <span class="o">{</span>
<span class="ln"> 19</span>        <span class="k">return</span> <span class="k">new</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">bootlunch</span><span class="o">.</span><span class="na">model</span><span class="o">.</span><span class="na">LombokPOJO</span><span class="o">.</span><span class="na">LombokPOJOBuilder</span><span class="o">();</span>
<span class="ln"> 20</span>    <span class="o">}</span>
<span class="ln"> 21</span>
<span class="ln"> 22</span>  <span class="c1">// generate set, get method
</span><span class="ln"> 23</span><span class="c1"></span>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
<span class="ln"> 24</span>        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
<span class="ln"> 25</span>    <span class="o">}</span>
<span class="ln"> 26</span>
<span class="ln"> 27</span>    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
<span class="ln"> 28</span>        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">age</span><span class="o">;</span>
<span class="ln"> 29</span>    <span class="o">}</span>
<span class="ln"> 30</span>
<span class="ln"> 31</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 32</span>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
<span class="ln"> 33</span>    <span class="o">}</span>
<span class="ln"> 34</span>
<span class="ln"> 35</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="kd">final</span> <span class="n">Integer</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 36</span>        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
<span class="ln"> 37</span>    <span class="o">}</span>
<span class="ln"> 38</span>
<span class="ln"> 39</span>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="kd">final</span> <span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 40</span>        <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">==</span> <span class="k">this</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 41</span>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
<span class="ln"> 42</span>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(!(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">LombokPOJO</span><span class="o">))</span> <span class="o">{</span>
<span class="ln"> 43</span>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="ln"> 44</span>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="ln"> 45</span>            <span class="n">LombokPOJO</span> <span class="n">other</span> <span class="o">=</span> <span class="o">(</span><span class="n">LombokPOJO</span><span class="o">)</span><span class="n">o</span><span class="o">;</span>
<span class="ln"> 46</span>            <span class="k">if</span> <span class="o">(!</span><span class="n">other</span><span class="o">.</span><span class="na">canEqual</span><span class="o">(</span><span class="k">this</span><span class="o">))</span> <span class="o">{</span>
<span class="ln"> 47</span>                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="ln"> 48</span>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="ln"> 49</span>                <span class="n">Object</span> <span class="k">this</span><span class="n">$age</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getAge</span><span class="o">();</span>
<span class="ln"> 50</span>                <span class="n">Object</span> <span class="n">other$age</span> <span class="o">=</span> <span class="n">other</span><span class="o">.</span><span class="na">getAge</span><span class="o">();</span>
<span class="ln"> 51</span>                <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="n">$age</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 52</span>                    <span class="k">if</span> <span class="o">(</span><span class="n">other$age</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 53</span>                        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="ln"> 54</span>                    <span class="o">}</span>
<span class="ln"> 55</span>                <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(!</span><span class="k">this</span><span class="n">$age</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">other$age</span><span class="o">))</span> <span class="o">{</span>
<span class="ln"> 56</span>                    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="ln"> 57</span>                <span class="o">}</span>
<span class="ln"> 58</span>
<span class="ln"> 59</span>                <span class="n">Object</span> <span class="k">this</span><span class="n">$name</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
<span class="ln"> 60</span>                <span class="n">Object</span> <span class="n">other$name</span> <span class="o">=</span> <span class="n">other</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
<span class="ln"> 61</span>                <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="n">$name</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 62</span>                    <span class="k">if</span> <span class="o">(</span><span class="n">other$name</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 63</span>                        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="ln"> 64</span>                    <span class="o">}</span>
<span class="ln"> 65</span>                <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(!</span><span class="k">this</span><span class="n">$name</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">other$name</span><span class="o">))</span> <span class="o">{</span>
<span class="ln"> 66</span>                    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="ln"> 67</span>                <span class="o">}</span>
<span class="ln"> 68</span>
<span class="ln"> 69</span>                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
<span class="ln"> 70</span>            <span class="o">}</span>
<span class="ln"> 71</span>        <span class="o">}</span>
<span class="ln"> 72</span>    <span class="o">}</span>
<span class="ln"> 73</span>
<span class="ln"> 74</span>    <span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">canEqual</span><span class="o">(</span><span class="kd">final</span> <span class="n">Object</span> <span class="n">other</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 75</span>        <span class="k">return</span> <span class="n">other</span> <span class="k">instanceof</span> <span class="n">LombokPOJO</span><span class="o">;</span>
<span class="ln"> 76</span>    <span class="o">}</span>
<span class="ln"> 77</span>
<span class="ln"> 78</span>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
<span class="ln"> 79</span>        <span class="kt">int</span> <span class="n">PRIME</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
<span class="ln"> 80</span>        <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
<span class="ln"> 81</span>        <span class="n">Object</span> <span class="n">$age</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getAge</span><span class="o">();</span>
<span class="ln"> 82</span>        <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">result</span> <span class="o">*</span> <span class="n">59</span> <span class="o">+</span> <span class="o">(</span><span class="n">$age</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">43</span> <span class="o">:</span> <span class="n">$age</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
<span class="ln"> 83</span>        <span class="n">Object</span> <span class="n">$name</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
<span class="ln"> 84</span>        <span class="n">result</span> <span class="o">=</span> <span class="n">result</span> <span class="o">*</span> <span class="n">59</span> <span class="o">+</span> <span class="o">(</span><span class="n">$name</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">43</span> <span class="o">:</span> <span class="n">$name</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
<span class="ln"> 85</span>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
<span class="ln"> 86</span>    <span class="o">}</span>
<span class="ln"> 87</span>
<span class="ln"> 88</span>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
<span class="ln"> 89</span>        <span class="n">String</span> <span class="n">var10000</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
<span class="ln"> 90</span>        <span class="k">return</span> <span class="s">&#34;LombokPOJO(name=&#34;</span> <span class="o">+</span> <span class="n">var10000</span> <span class="o">+</span> <span class="s">&#34;, age=&#34;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">getAge</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;)&#34;</span><span class="o">;</span>
<span class="ln"> 91</span>    <span class="o">}</span>
<span class="ln"> 92</span>
<span class="ln"> 93</span>  <span class="c1">// generate all args constructor
</span><span class="ln"> 94</span><span class="c1"></span>    <span class="kd">public</span> <span class="nf">LombokPOJO</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Integer</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 95</span>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
<span class="ln"> 96</span>        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
<span class="ln"> 97</span>    <span class="o">}</span>
<span class="ln"> 98</span>
<span class="ln"> 99</span>  <span class="c1">// generate no args constructor
</span><span class="ln">100</span><span class="c1"></span>    <span class="kd">public</span> <span class="nf">LombokPOJO</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">101</span>    <span class="o">}</span>
<span class="ln">102</span><span class="o">}</span>
</code></pre></div><p>使用Lombok可以提升开发效率，节省编写固定模式代码时间，同时使源代码更加简洁可读。</p>
]]></content>
		</item>
		
		<item>
			<title>SpringBoot 4: RESTful API</title>
			<link>https://daiwei.dev/posts/spring/springboot4_restful/</link>
			<pubDate>Thu, 23 Dec 2021 11:43:43 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/spring/springboot4_restful/</guid>
			<description>什么是RESTful 风格 API API（Application Programming Interface），顾名思义：是一组编程接口规范，客户端与服务端通过请求响应进行数据通信。REST（Representational State Transfer）表述性状态传递，决定了接口的形式与规则。RESTful是基于http方法的API设计风格，而不是一种新的技术.
 看Url就知道要什么资源 看http method就知道针对资源干什么 看http status code就知道结果如何  RESTful是面向资源的（名词） REST 通过 URI 暴露资源时，会强调不要在 URI 中出现动词。比如：
   不符合REST的接口URI 符合REST接口URI 功能     GET /api/getDogs/{id} GET /api/dogs/{id} 获取一个小狗狗   GET /api/getDogs GET /api/dogs 获取所有小狗狗   GET /api/addDogs POST /api/dogs 添加一个小狗狗   GET /api/editDogs/{id} PUT /api/dogs/{id} 修改一个小狗狗   GET /api/deleteDogs/{id} DELETE /api/dogs/{id} 删除一个小狗狗    HTTP状态码 通过HTTP状态码体现动作的结果,不要自定义</description>
			<content type="html"><![CDATA[<h3 id="什么是restful-风格-api">什么是RESTful 风格 API</h3>
<p>API（Application Programming Interface），顾名思义：是一组编程接口规范，客户端与服务端通过请求响应进行数据通信。REST（Representational State Transfer）表述性状态传递，决定了接口的形式与规则。<strong>RESTful是基于http方法的API设计风格，而不是一种新的技术.</strong></p>
<ol>
<li>看Url就知道要什么资源</li>
<li>看http method就知道针对资源干什么</li>
<li>看http status code就知道结果如何</li>
</ol>
<h3 id="restful是面向资源的名词">RESTful是面向资源的（名词）</h3>
<p>REST 通过 URI 暴露资源时，会强调不要在 URI 中出现动词。比如：</p>
<table>
<thead>
<tr>
<th style="text-align:left">不符合REST的接口URI</th>
<th style="text-align:left">符合REST接口URI</th>
<th style="text-align:left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">GET /api/getDogs/{id}</td>
<td style="text-align:left">GET /api/dogs/{id}</td>
<td style="text-align:left">获取一个小狗狗</td>
</tr>
<tr>
<td style="text-align:left">GET /api/getDogs</td>
<td style="text-align:left">GET /api/dogs</td>
<td style="text-align:left">获取所有小狗狗</td>
</tr>
<tr>
<td style="text-align:left">GET /api/addDogs</td>
<td style="text-align:left">POST /api/dogs</td>
<td style="text-align:left">添加一个小狗狗</td>
</tr>
<tr>
<td style="text-align:left">GET /api/editDogs/{id}</td>
<td style="text-align:left">PUT /api/dogs/{id}</td>
<td style="text-align:left">修改一个小狗狗</td>
</tr>
<tr>
<td style="text-align:left">GET /api/deleteDogs/{id}</td>
<td style="text-align:left">DELETE /api/dogs/{id}</td>
<td style="text-align:left">删除一个小狗狗</td>
</tr>
</tbody>
</table>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202112141953419.png" alt=""></p>
<h3 id="http状态码">HTTP状态码</h3>
<p>通过HTTP状态码体现动作的结果,不要自定义</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-apl" data-lang="apl"><span class="ln">1</span><span class="m">200</span> <span class="nv">OK</span> 
<span class="ln">2</span><span class="m">400</span> <span class="nv">Bad</span> <span class="nv">Request</span> 
<span class="ln">3</span><span class="m">500</span> <span class="nv">Internal</span> <span class="nv">Server</span> <span class="nv">Error</span>
</code></pre></div><p>在 APP 与 API 的交互当中，其结果逃不出这三种状态：</p>
<ul>
<li>所有事情都按预期正确执行完毕 - 成功</li>
<li>APP 发生了一些错误 – 客户端错误（如：校验用户输入身份证，结果输入的是军官证，就是客户端输入错误）</li>
<li>API 发生了一些错误 – 服务器端错误（各种编码bug或服务内部自己导致的异常）</li>
</ul>
<p>这三种状态与上面的状态码是一一对应的。如果你觉得这三种状态，分类处理结果太宽泛，http-status code还有很多。建议还是要遵循KISS(Keep It Stupid and Simple)原则，上面的三种状态码完全可以覆盖99%以上的场景。</p>
<h3 id="使用复数名词">使用复数名词</h3>
<p>/dogs 而不是 /dog</p>
<h3 id="复杂资源关系的表达">复杂资源关系的表达</h3>
<p>GET /cars/711/drivers/ 返回 使用过编号711汽车的所有司机
GET /cars/711/drivers/4 返回 使用过编号711汽车的4号司机</p>
<h3 id="高级用法hateoas">高级用法:HATEOAS</h3>
<p><strong>HATEOAS</strong>:Hypermedia as the Engine of Application State 超媒体作为应用状态的引擎。
RESTful API最好做到HATEOAS，<strong>即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么</strong>。比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="ln">1</span>{&#34;link&#34;: {
<span class="ln">2</span>  &#34;rel&#34;:   &#34;collection https://www.example.com/zoos&#34;,
<span class="ln">3</span>  &#34;href&#34;:  &#34;https://api.example.com/zoos&#34;,
<span class="ln">4</span>  &#34;title&#34;: &#34;List of zoos&#34;,
<span class="ln">5</span>  &#34;type&#34;:  &#34;application/vnd.yourformat+json&#34;
<span class="ln">6</span>}}
</code></pre></div><p>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API或者可以调用什么API了。</p>
<h3 id="资源过滤排序选择和分页的表述">资源<strong>过滤、排序、选择和分页</strong>的表述</h3>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202112141956190.png" alt=""></p>
<h3 id="版本化你的api">版本化你的API</h3>
<p>强制性增加API版本声明，不要发布无版本的API。如：/api/v1/blog</p>
<p><strong>面向扩展开放，面向修改关闭</strong>：也就是说一个版本的接口开发完成测试上线之后，我们一般不会对接口进行修改，如果有新的需求就开发新的接口进行功能扩展。这样做的目的是：当你的新接口上线后，不会影响使用老接口的用户。如果新接口目的是替换老接口，也不要在v1版本原接口上修改，而是开发v2版本接口，并声明v1接口废弃！</p>
<p>本文出自：<a href="http://springboot.zimug.com/">springboot深入浅出系列</a></p>
]]></content>
		</item>
		
		<item>
			<title>SpringBoot 3: IOC &amp; AOP Spring中的控制反转和面向切面编程</title>
			<link>https://daiwei.dev/posts/spring/springboot3_ioc-aop/</link>
			<pubDate>Wed, 22 Dec 2021 18:17:23 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/spring/springboot3_ioc-aop/</guid>
			<description>spring相关的书和博文看了很多，一直也没明白依赖注入和面向切面编程到底是什么，spring企业实战看到第三遍突然恍然大悟，也许是因为之前动手写过代码，所以终于潜移默化，慢慢理解了吧。
http://www.360doc.com/content/18/0125/09/27831725_724899826.shtml这篇文章写得挺好的
首先控制反转和面向切面编程是spring的核心机制，由于控制反转不好理解，因此有人提出依赖注入的概念，其实依赖注入是控制反转的一种方式，但现在大家默认控制反转等同于依赖注入
一.控制反转：控制反转是指spring容器通过依赖注入的方式使得创建依赖对象的控制权由对象转移到spring容器。举个例子：
我们有一个明星，要举办演唱会，在他唱歌之前有记者要采访他，通常我们的做法是创建一个明星类，在明星类里面new一个记者类,或者将记者类作为构造器的参数传入。如下图所示
在这里对象依赖的对象是由自己创建的。使用spring之后，reporter对象不再由superStar来创建而是交给spring容器来创建和管理，如下图：
我们在spring的配置文件中配置superstar和reporter两个bean，并把reporter注入到supers中，这样我们在superStard对象中不需要再自己去new一个reporter了，spring容器会帮我们创建。这就是控制反转，对象依赖ioc容器注入依赖的对象。实现解耦合。
二.面向切面编程
面向切面编程有几个术语需要理解：（来自百度百科）
1）aspect（切面）：实现了cross-cutting功能，是针对切面的模块。最常见的是logging模块，这样，程序按功能被分为好几层，如果按传统的继承的话，商业模型继承日志模块的话根本没有什么意义，而通过创建一个logging切面就可以使用AOP来实现相同的功能了。
2）jointpoint（连接点）：连接点是切面插入应用程序的地方，该点能被方法调用，而且也会被抛出意外。连接点是应用程序提供给切面插入的地方，可以添加新的方法。比如以上我们的切点可以认为是findInfo(String)方法。
3）advice（处理逻辑）：advice是我们切面功能的实现，它通知程序新的行为。如在logging里，logging advice包括logging的实现代码，比如像写日志到一个文件中。advice在jointpoint处插入到应用程序中。以上我们在MyHandler.java中实现了advice的功能
4）pointcut（切点）：pointcut可以控制你把哪些advice应用于jointpoint上去，通常你使用pointcuts通过正则表达式来把明显的名字和模式进行匹配应用。决定了那个jointpoint会获得通知。
上面提到的例子中，记者在明星开场前进行采访，在明星演唱结束时报道，我们可以在superstar的singing方法前去调用reporter的interview方法，但我们发现这样我们的类会比较混乱，我们不希望在superstar的方法里看到reporter的方法，这时我们就需要面向切面编程AOP的帮忙了
我们可以将reporter配置成一个切面，通过配置的方式插入superstar中，完成采访任务，如下图：
 学习过Spring框架的人一定都会听过Spring的IoC(控制反转) 、DI(依赖注入)这两个概念，对于初学Spring的人来说，总觉得IoC 、DI这两个概念是模糊不清的，是很难理解的，今天和大家分享网上的一些技术大牛们对Spring框架的IOC的理解以及谈谈我对Spring Ioc的理解。
一、分享Iteye的开涛对Ioc的精彩讲解 首先要分享的是Iteye的开涛这位技术牛人对Spring框架的IOC的理解，写得非常通俗易懂，以下内容全部来自原文，原文地址：http://jinnianshilongnian.iteye.com/blog/1413846
1.1、IoC是什么 Ioc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：
●谁控制谁，控制什么：传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对 象的创建；谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。
●为何是反转，哪些方面反转了：有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。
　用图例说明一下，传统程序设计如图2-1，都是主动去创建相关对象然后再组合起来：
图1-1 传统应用程序示意图
　当有了IoC/DI的容器后，在客户端类中不再主动去创建这些对象了，如图2-2所示:
图1-2有IoC/DI容器后程序结构示意图
1.2、IoC能做什么 IoC 不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是 松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。
　其实IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI思想中，应用程序就变成被动的了，被动的等待IoC容器来创建并注入它所需要的资源了。
IoC很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。
1.3、IoC和DI DI—Dependency Injection，即“依赖注入”：组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。
　理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：
●谁依赖于谁：当然是应用程序依赖于IoC容器；
●为什么需要依赖：应用程序需要IoC容器来提供对象需要的外部资源；
●谁注入谁：很明显是IoC容器注入应用程序某个对象，应用程序依赖的对象；
●注入了什么：就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。
IoC和DI由什么关系呢？其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。
　看过很多对Spring的Ioc理解的文章，好多人对Ioc和DI的解释都晦涩难懂，反正就是一种说不清，道不明的感觉，读完之后依然是一头雾水，感觉就是开涛这位技术牛人写得特别通俗易懂，他清楚地解释了IoC(控制反转) 和DI(依赖注入)中的每一个字，读完之后给人一种豁然开朗的感觉。我相信对于初学Spring框架的人对Ioc的理解应该是有很大帮助的。
二、分享Bromon的blog上对IoC与DI浅显易懂的讲解 2.1、IoC(控制反转) 首先想说说IoC（Inversion of Control，控制反转）。这是spring的核心，贯穿始终。所谓IoC，对于spring框架来说，就是由spring来负责控制对象的生命周期和对象间的关系。这是什么意思呢，举个简单的例子，我们是如何找女朋友的？常见的情况是，我们到处去看哪里有长得漂亮身材又好的mm，然后打听她们的兴趣爱好、qq号、电话号、ip号、iq号………，想办法认识她们，投其所好送其所要，然后嘿嘿……这个过程是复杂深奥的，我们必须自己设计和面对每个环节。传统的程序开发也是如此，在一个对象中，如果要使用另外的对象，就必须得到它（自己new一个，或者从JNDI中查询一个），使用完之后还要将对象销毁（比如Connection等），对象始终会和其他的接口或类藕合起来。
　那么IoC是如何做的呢？有点像通过婚介找女朋友，在我和女朋友之间引入了一个第三者：婚姻介绍所。婚介管理了很多男男女女的资料，我可以向婚介提出一个列表，告诉它我想找个什么样的女朋友，比如长得像李嘉欣，身材像林熙雷，唱歌像周杰伦，速度像卡洛斯，技术像齐达内之类的，然后婚介就会按照我们的要求，提供一个mm，我们只需要去和她谈恋爱、结婚就行了。简单明了，如果婚介给我们的人选不符合要求，我们就会抛出异常。整个过程不再由我自己控制，而是有婚介这样一个类似容器的机构来控制。Spring所倡导的开发方式就是如此，所有的类都会在spring容器中登记，告诉spring你是个什么东西，你需要什么东西，然后spring会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。所有的类的创建、销毁都由 spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被spring控制，所以这叫控制反转。</description>
			<content type="html"><![CDATA[<p>spring相关的书和博文看了很多，一直也没明白依赖注入和面向切面编程到底是什么，spring企业实战看到第三遍突然恍然大悟，也许是因为之前动手写过代码，所以终于潜移默化，慢慢理解了吧。</p>
<p><a href="http://www.360doc.com/content/18/0125/09/27831725_724899826.shtml">http://www.360doc.com/content/18/0125/09/27831725_724899826.shtml</a>这篇文章写得挺好的</p>
<p>首先控制反转和面向切面编程是spring的核心机制，由于控制反转不好理解，因此有人提出依赖注入的概念，其实依赖注入是控制反转的一种方式，但现在大家默认控制反转等同于依赖注入</p>
<p>一.控制反转：控制反转是指spring容器通过依赖注入的方式使得创建依赖对象的控制权由对象转移到spring容器。举个例子：</p>
<p>我们有一个明星，要举办演唱会，在他唱歌之前有记者要采访他，通常我们的做法是创建一个明星类，在明星类里面new一个记者类,或者将记者类作为构造器的参数传入。如下图所示</p>
<p><img src="https://img-blog.csdn.net/20180728201334609?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4NDA1MjIz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p>
<p>在这里对象依赖的对象是由自己创建的。使用spring之后，reporter对象不再由superStar来创建而是交给spring容器来创建和管理，如下图：</p>
<p><img src="https://img-blog.csdn.net/20180728202735870?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4NDA1MjIz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p>
<p>我们在spring的配置文件中配置superstar和reporter两个bean，并把reporter注入到supers中，这样我们在superStard对象中不需要再自己去new一个reporter了，spring容器会帮我们创建。这就是控制反转，对象依赖ioc容器注入依赖的对象。实现解耦合。</p>
<p>二.面向切面编程</p>
<p>面向切面编程有几个术语需要理解：（来自百度百科）</p>
<p>1）aspect（切面）：实现了cross-cutting功能，是针对切面的模块。最常见的是logging模块，这样，程序按功能被分为好几层，如果按传统的继承的话，商业模型继承日志模块的话根本没有什么意义，而通过创建一个logging切面就可以使用AOP来实现相同的功能了。</p>
<p>2）jointpoint（连接点）：连接点是切面插入应用程序的地方，该点能被方法调用，而且也会被抛出意外。连接点是应用程序提供给切面插入的地方，可以添加新的方法。比如以上我们的切点可以认为是findInfo(String)方法。</p>
<p>3）advice（处理逻辑）：advice是我们切面功能的实现，它通知程序新的行为。如在logging里，logging advice包括logging的实现代码，比如像写日志到一个文件中。advice在jointpoint处插入到应用程序中。以上我们在MyHandler.java中实现了advice的功能</p>
<p>4）pointcut（切点）：pointcut可以控制你把哪些advice应用于jointpoint上去，通常你使用pointcuts通过正则表达式来把明显的名字和模式进行匹配应用。决定了那个jointpoint会获得通知。</p>
<p>上面提到的例子中，记者在明星开场前进行采访，在明星演唱结束时报道，我们可以在superstar的singing方法前去调用reporter的interview方法，但我们发现这样我们的类会比较混乱，我们不希望在superstar的方法里看到reporter的方法，这时我们就需要面向切面编程AOP的帮忙了</p>
<p>我们可以将reporter配置成一个切面，通过配置的方式插入superstar中，完成采访任务，如下图：</p>
<p><img src="https://img-blog.csdn.net/20180728203107415?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4NDA1MjIz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p>
<hr>
<p>学习过Spring框架的人一定都会听过Spring的IoC(控制反转) 、DI(依赖注入)这两个概念，对于初学Spring的人来说，总觉得IoC 、DI这两个概念是模糊不清的，是很难理解的，今天和大家分享网上的一些技术大牛们对Spring框架的IOC的理解以及谈谈我对Spring Ioc的理解。</p>
<p>一、分享Iteye的开涛对Ioc的精彩讲解
　　首先要分享的是Iteye的开涛这位技术牛人对Spring框架的IOC的理解，写得非常通俗易懂，以下内容全部来自原文，原文地址：http://jinnianshilongnian.iteye.com/blog/1413846</p>
<p>1.1、IoC是什么
Ioc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：</p>
<p>●谁控制谁，控制什么：传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对 象的创建；谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。</p>
<p>●为何是反转，哪些方面反转了：有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。</p>
<p>　　用图例说明一下，传统程序设计如图2-1，都是主动去创建相关对象然后再组合起来：</p>
<p><img src="https://img-blog.csdnimg.cn/20190801182143267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW5ydWkzMTA=,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>图1-1 传统应用程序示意图</p>
<p>　　当有了IoC/DI的容器后，在客户端类中不再主动去创建这些对象了，如图2-2所示:</p>
<p>图1-2有IoC/DI容器后程序结构示意图</p>
<p>1.2、IoC能做什么
IoC 不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是 松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。</p>
<p>　　其实IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI思想中，应用程序就变成被动的了，被动的等待IoC容器来创建并注入它所需要的资源了。</p>
<p>IoC很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。</p>
<p>1.3、IoC和DI
DI—Dependency Injection，即“依赖注入”：组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。</p>
<p>　　理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：</p>
<p>●谁依赖于谁：当然是应用程序依赖于IoC容器；</p>
<p>●为什么需要依赖：应用程序需要IoC容器来提供对象需要的外部资源；</p>
<p>●谁注入谁：很明显是IoC容器注入应用程序某个对象，应用程序依赖的对象；</p>
<p>●注入了什么：就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。</p>
<p>IoC和DI由什么关系呢？其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。</p>
<p>　　看过很多对Spring的Ioc理解的文章，好多人对Ioc和DI的解释都晦涩难懂，反正就是一种说不清，道不明的感觉，读完之后依然是一头雾水，感觉就是开涛这位技术牛人写得特别通俗易懂，他清楚地解释了IoC(控制反转) 和DI(依赖注入)中的每一个字，读完之后给人一种豁然开朗的感觉。我相信对于初学Spring框架的人对Ioc的理解应该是有很大帮助的。</p>
<p>二、分享Bromon的blog上对IoC与DI浅显易懂的讲解
2.1、IoC(控制反转)
　　首先想说说IoC（Inversion of Control，控制反转）。这是spring的核心，贯穿始终。所谓IoC，对于spring框架来说，就是由spring来负责控制对象的生命周期和对象间的关系。这是什么意思呢，举个简单的例子，我们是如何找女朋友的？常见的情况是，我们到处去看哪里有长得漂亮身材又好的mm，然后打听她们的兴趣爱好、qq号、电话号、ip号、iq号………，想办法认识她们，投其所好送其所要，然后嘿嘿……这个过程是复杂深奥的，我们必须自己设计和面对每个环节。传统的程序开发也是如此，在一个对象中，如果要使用另外的对象，就必须得到它（自己new一个，或者从JNDI中查询一个），使用完之后还要将对象销毁（比如Connection等），对象始终会和其他的接口或类藕合起来。</p>
<p>　　那么IoC是如何做的呢？有点像通过婚介找女朋友，在我和女朋友之间引入了一个第三者：婚姻介绍所。婚介管理了很多男男女女的资料，我可以向婚介提出一个列表，告诉它我想找个什么样的女朋友，比如长得像李嘉欣，身材像林熙雷，唱歌像周杰伦，速度像卡洛斯，技术像齐达内之类的，然后婚介就会按照我们的要求，提供一个mm，我们只需要去和她谈恋爱、结婚就行了。简单明了，如果婚介给我们的人选不符合要求，我们就会抛出异常。整个过程不再由我自己控制，而是有婚介这样一个类似容器的机构来控制。Spring所倡导的开发方式就是如此，所有的类都会在spring容器中登记，告诉spring你是个什么东西，你需要什么东西，然后spring会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。所有的类的创建、销毁都由 spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被spring控制，所以这叫控制反转。</p>
<p>2.2、DI(依赖注入)
IoC的一个重点是在系统运行中，动态的向某个对象提供它所需要的其他对象。这一点是通过DI（Dependency Injection，依赖注入）来实现的。比如对象A需要操作数据库，以前我们总是要在A中自己编写代码来获得一个Connection对象，有了 spring我们就只需要告诉spring，A中需要一个Connection，至于这个Connection怎么构造，何时构造，A不需要知道。在系统运行时，spring会在适当的时候制造一个Connection，然后像打针一样，注射到A当中，这样就完成了对各个对象之间关系的控制。A需要依赖 Connection才能正常运行，而这个Connection是由spring注入到A中的，依赖注入的名字就这么来的。那么DI是如何实现的呢？ Java 1.3之后一个重要特征是反射（reflection），它允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性，spring就是通过反射来实现注入的。</p>
<p>　　理解了IoC和DI的概念后，一切都将变得简单明了，剩下的工作只是在spring的框架中堆积木而已。</p>
<p>三、我对IoC(控制反转)和DI(依赖注入)的理解
　　在平时的java应用开发中，我们要实现某一个功能或者说是完成某个业务逻辑时至少需要两个或以上的对象来协作完成，在没有使用Spring的时候，每个对象在需要使用他的合作对象时，自己均要使用像new object() 这样的语法来将合作对象创建出来，这个合作对象是由自己主动创建出来的，创建合作对象的主动权在自己手上，自己需要哪个合作对象，就主动去创建，创建合作对象的主动权和创建时机是由自己把控的，而这样就会使得对象间的耦合度高了，A对象需要使用合作对象B来共同完成一件事，A要使用B，那么A就对B产生了依赖，也就是A和B之间存在一种耦合关系，并且是紧密耦合在一起，而使用了Spring之后就不一样了，创建合作对象B的工作是由Spring来做的，Spring创建好B对象，然后存储到一个容器里面，当A对象需要使用B对象时，Spring就从存放对象的那个容器里面取出A要使用的那个B对象，然后交给A对象使用，至于Spring是如何创建那个对象，以及什么时候创建好对象的，A对象不需要关心这些细节问题(你是什么时候生的，怎么生出来的我可不关心，能帮我干活就行)，A得到Spring给我们的对象之后，两个人一起协作完成要完成的工作即可。</p>
<p>　　所以控制反转IoC(Inversion of Control)是说创建对象的控制权进行转移，以前创建对象的主动权和创建时机是由自己把控的，而现在这种权力转移到第三方，比如转移交给了IoC容器，它就是一个专门用来创建对象的工厂，你要什么对象，它就给你什么对象，有了 IoC容器，依赖关系就变了，原先的依赖关系就没了，它们都依赖IoC容器了，通过IoC容器来建立它们之间的关系。</p>
<p>　　这是我对Spring的IoC(控制反转)的理解。DI(依赖注入)其实就是IOC的另外一种说法，DI是由Martin Fowler 在2004年初的一篇论文中首次提出的。他总结：控制的什么被反转了？就是：获得依赖对象的方式反转了。</p>
<p>四、小结
　　对于Spring Ioc这个核心概念，我相信每一个学习Spring的人都会有自己的理解。这种概念上的理解没有绝对的标准答案，仁者见仁智者见智。如果有理解不到位或者理解错的地方，欢迎广大园友指正！</p>
<hr>
<p>众所周知，Spring的核心特性就是IOC和AOP，IOC（Inversion of Control），即“控制反转”；AOP（Aspect-OrientedProgramming），即“面向切面编程”。参考书《Spring In Action》，下面分享一下我对这两大特性的个人理解。</p>
<p>IOC：IOC，另外一种说法叫DI（Dependency Injection），即依赖注入。它并不是一种技术实现，而是一种设计思想。在任何一个有实际开发意义的程序项目中，我们会使用很多类来描述它们特有的功能，并且通过类与类之间的相互协作来完成特定的业务逻辑。这个时候，每个类都需要负责管理与自己有交互的类的引用和依赖，代码将会变的异常难以维护和极度的高耦合。而IOC的出现正是用来解决这个问题，我们通过IOC将这些相互依赖对象的创建、协调工作交给Spring容器去处理，每个对象只需要关注其自身的业务逻辑关系就可以了。在这样的角度上来看，获得依赖的对象的方式，进行了反转，变成了由spring容器控制对象如何获取外部资源（包括其他对象和文件资料等等）。</p>
<p>举例：某一天，你生病了，但是你不清楚自己到底得了什么病，你只知道自己头疼，咳嗽，全身无力。这个时候你决定去药店买药，药店有很多种药，仅仅是治疗头疼就有好几十种，还有西药中药等区别。然后你自己看了看说明书，选择了一盒你自己觉得最能治疗自己病症的药，付钱吃药，期待可以早点好起来。</p>
<p>但是这个过程，对于一个病人来说，太辛苦了。头疼，咳嗽，全身无力，还要一个个的看药品说明书，一个个的比较哪个药比较好，简直是太累了。这个时候，你决定直接去医院看医生。</p>
<p>医生给你做了检查，知道你的病症是什么，有什么原因引起的；同时医生非常了解有哪些药能治疗你的病痛，并且能根据你的自身情况进行筛选。只需要短短的十几分钟，你就能拿到对症下药的药品，即省时又省力。</p>
<p>在上面这个例子中，IOC起到的就是医生的作用，它收集你的需求要求，并且对症下药，直接把药开给你。你就是对象，药品就是你所需要的外部资源。通过医生，你不用再去找药品，而是通过医生把药品开给你。这就是整个IOC的精髓所在。</p>
<p>AOP：面向切面编程，往往被定义为促使软件系统实现关注点的分离的技术。系统是由许多不同的组件所组成的，每一个组件各负责一块特定功能。除了实现自身核心功能之外，这些组件还经常承担着额外的职责。例如日志、事务管理和安全这样的核心服务经常融入到自身具有核心业务逻辑的组件中去。这些系统服务经常被称为横切关注点，因为它们会跨越系统的多个组件。</p>
<p>AOP的概念不好像IOC一样实例化举例，现在我们以一个系统中的具体实现来讲讲AOP具体是个什么技术。</p>
<p>我们以系统中常用到的事务管控举例子。在系统操作数据库的过程中，不可避免地要考虑到事务相关的内容。如果在每一个方法中都新建一个事务管理器，那么无疑是对代码严重的耦合和侵入。为了简化我们的开发过程（实际上spring所做的一切实现都是为了简化开发过程），需要把事务相关的代码抽成出来做为一个独立的模块。通过AOP，确认每一个操作数据库方法为一个连接点，这些连接点组成了一个切面。当程序运行到其中某个一个切点时，我们将事务管理模块顺势织入对象中，通过通知功能，完成整个事务管控的实现。这样一来，所有的操作数据库的方法中不需要再单独关心事务管理的内容，只需要关注自身的业务代码的实现即可。所有的事务管控相关的内容都通过AOP的方式进行了实现。简化了代码的内容，将目标对象复杂的内容进行解耦，分离业务逻辑与横切关注点。</p>
<p>下面介绍一下AOP相关的术语：</p>
<ul>
<li>
<p>通知： 通知定义了切面是什么以及何时使用的概念。Spring 切面可以应用5种类型的通知：</p>
<pre><code>  * 前置通知（Before）：在目标方法被调用之前调用通知功能。

  * 后置通知（After）：在目标方法完成之后调用通知，此时不会关心方法的输出是什么。

  * 返回通知（After-returning）：在目标方法成功执行之后调用通知。

  * 异常通知（After-throwing）：在目标方法抛出异常后调用通知。

  * 环绕通知（Around）：通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为。

  * 连接点：是在应用执行过程中能够插入切面的一个点。
</code></pre>
</li>
</ul>
<p>*切点： 切点定义了切面在何处要织入的一个或者多个连接点。</p>
<p>*切面：是通知和切点的结合。通知和切点共同定义了切面的全部内容。</p>
<p>*引入：引入允许我们向现有类添加新方法或属性。</p>
<p>*织入：是把切面应用到目标对象，并创建新的代理对象的过程。切面在指定的连接点被织入到目标对象中。在目标对象的生命周期中有多个点可以进行织入：</p>
<pre><code>     * 编译期： 在目标类编译时，切面被织入。这种方式需要特殊的编译器。AspectJ的织入编译器就是以这种方式织入切面的。

    * 类加载期：切面在目标加载到JVM时被织入。这种方式需要特殊的类加载器(class loader)它可以在目标类被引入应用之前增强该目标类的字节码。

    * 运行期： 切面在应用运行到某个时刻时被织入。一般情况下，在织入切面时，AOP容器会为目标对象动态地创建一个代理对象。SpringAOP就是以这种方式织入切面的。
</code></pre>
<p>————————————————
版权声明：本文为CSDN博主「chenrui310」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/chenrui310/article/details/98086360</p>
]]></content>
		</item>
		
		<item>
			<title>SpringBoot 2: Spring_intro</title>
			<link>https://daiwei.dev/posts/spring/springboot2_intro/</link>
			<pubDate>Tue, 21 Dec 2021 16:57:23 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/spring/springboot2_intro/</guid>
			<description>什么是框架 framework？ 具有一定约束性和支撑性的半成品项目。框架+业务逻辑 = 一个完整的项目。
MVC 模式代表 Model-View-Controller（模型-视图-控制器） 模式。这种模式用于应用程序的分层开发。
 Model 负责存储系统的中心数据;
View 负责存储系统的中心数据;
Controller 处理用户输入的信息。负责从视图读取数据，控制用户输入，并向模型发送数据，是应用程序中处理用户交互的部分。负责管理与用户交互交互控制。
 表示层框架：struts1，struts2，springMVC
业务层框架，设计型框架：spring
持久层框架：hibernate(全自动), mybatis(半自动)
建议优先学习 Springboot 。
Spring Boot   Spring Boot 简介
 简化Spring应用开发的框架。
整个Spring技术栈的大整合。
J2EE开发的一站式解决方案。
   微服务
2014， Martin Fowler
微服务：架构风格（服务微化）
一个应用应该是一组小型服务，可以通过http方式互通；
每一个功能元素最终都是一个可独立替换可升级的软件单元；
microservices guide
  Spring Boot主要特性
 遵循“约定优于配置”的原则，简化配置 可以完全脱离XML配置文件,采用注解配置和java Config 内嵌Servlet容器，应用可用jar包执行：java -jar 快速完成项目搭建、整合第三方类库，方便易用 提供了starter POM, 能够非常方便的进行包管理, 简化包管理配置 与Spring cloud天然集成，spring boot是目前java体系内实现微服务最佳方案    Spring Boot集成第三方类库的步骤</description>
			<content type="html"><![CDATA[<h3 id="什么是框架-framework">什么是框架 <strong>framework</strong>？</h3>
<p>具有一定约束性和支撑性的半成品项目。框架+业务逻辑 = 一个完整的项目。</p>
<p>MVC 模式代表 Model-View-Controller（模型-视图-控制器） 模式。这种模式用于应用程序的分层开发。</p>
<blockquote>
<p>Model 负责存储系统的中心数据;</p>
<p>View 负责存储系统的中心数据;</p>
<p>Controller 处理用户输入的信息。负责从视图读取数据，控制用户输入，并向模型发送数据，是应用程序中处理用户交互的部分。负责管理与用户交互交互控制。</p>
</blockquote>
<p>表示层框架：struts1，struts2，springMVC</p>
<p>业务层框架，设计型框架：spring</p>
<p>持久层框架：hibernate(全自动), mybatis(半自动)</p>
<p>建议优先学习 Springboot 。</p>
<h3 id="spring-boot">Spring Boot</h3>
<ol>
<li>
<p>Spring Boot 简介</p>
<blockquote>
<p>简化Spring应用开发的框架。</p>
<p>整个Spring技术栈的大整合。</p>
<p>J2EE开发的一站式解决方案。</p>
</blockquote>
</li>
<li>
<p>微服务</p>
<p>2014， Martin Fowler</p>
<p>微服务：架构风格（服务微化）</p>
<p>一个应用应该是一组小型服务，可以通过http方式互通；</p>
<p>每一个功能元素最终都是一个可独立替换可升级的软件单元；</p>
<p><a href="https://martinfowler.com/microservices/">microservices guide</a></p>
</li>
<li>
<p>Spring Boot主要特性</p>
<ul>
<li>遵循“约定优于配置”的原则，简化配置</li>
<li>可以完全脱离XML配置文件,采用注解配置和java Config</li>
<li>内嵌Servlet容器，应用可用jar包执行：java -jar</li>
<li>快速完成项目搭建、整合第三方类库，方便易用</li>
<li>提供了starter POM, 能够非常方便的进行包管理, 简化包管理配置</li>
<li>与Spring cloud天然集成，spring boot是目前java体系内实现微服务最佳方案</li>
</ul>
</li>
<li>
<p>Spring Boot集成第三方类库的步骤</p>
<ol>
<li>通过maven引入springboot-XXXX-starter</li>
<li>修改ymal或properties全局统一配置文件</li>
<li>加入一个Java Config。这个属于个性化配置，如果使用通用配置，这一步不需要。</li>
</ol>
</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>SpringBoot 1: Hello world</title>
			<link>https://daiwei.dev/posts/spring/springboot1_helloword/</link>
			<pubDate>Mon, 20 Dec 2021 16:17:23 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/spring/springboot1_helloword/</guid>
			<description>  使用Spring Initializr 新建spring boot project
  在application.properties文件新建服务器端口
  新建HelloController class
  执行BootLunchApplication main class
  1@SpringBootApplication 2@RestController 3public class DemoApplication { 4 5	public static void main(String[] args) { 6	SpringApplication.run(DemoApplication.class, args); 7	} 8 9	@GetMapping 10	public String hello() { 11	return &amp;#34;Hello World&amp;#34;; 12	} 13 14} </description>
			<content type="html"><![CDATA[<ol>
<li>
<p>使用Spring Initializr 新建spring boot project</p>
<p><img src="https://github.com/daiweinus/blog_pictures/blob/master/springboot_helloworld1.png?raw=true" alt="springboot_helloworld1.png"></p>
</li>
<li>
<p>在application.properties文件新建服务器端口</p>
<p><img src="https://github.com/daiweinus/blog_pictures/blob/master/springboot_helloworld2.png?raw=true" alt="springboot_helloworld2.png"></p>
</li>
<li>
<p>新建HelloController class</p>
<p><img src="https://github.com/daiweinus/blog_pictures/blob/master/Screenshot%202021-12-07%20at%2018.44.45.png?raw=true" alt="Screenshot 2021-12-07 at 18.44.45.png"></p>
</li>
<li>
<p>执行BootLunchApplication main class</p>
<p><img src="https://github.com/daiweinus/blog_pictures/blob/master/Screenshot%202021-12-07%20at%2018.47.32.png?raw=true" alt="Screenshot 2021-12-07 at 18.47.32.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202112071909939.png" alt=""></p>
<p><img src="https://github.com/daiweinus/blog_pictures/blob/master/Screenshot%202021-12-07%20at%2018.47.49.png?raw=true" alt="Screenshot 2021-12-07 at 18.47.49.png"></p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="nd">@SpringBootApplication</span>
<span class="ln"> 2</span><span class="nd">@RestController</span>
<span class="ln"> 3</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoApplication</span> <span class="o">{</span>
<span class="ln"> 4</span>
<span class="ln"> 5</span>	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 6</span>		<span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">DemoApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
<span class="ln"> 7</span>	<span class="o">}</span>
<span class="ln"> 8</span>
<span class="ln"> 9</span>	<span class="nd">@GetMapping</span>
<span class="ln">10</span>	<span class="kd">public</span> <span class="n">String</span> <span class="nf">hello</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">11</span>		<span class="k">return</span> <span class="s">&#34;Hello World&#34;</span><span class="o">;</span>
<span class="ln">12</span>	<span class="o">}</span>
<span class="ln">13</span>
<span class="ln">14</span><span class="o">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Networking 4: IPv4 vs IPv6</title>
			<link>https://daiwei.dev/posts/networking/networking4_ipv4-vs-ipv6/</link>
			<pubDate>Mon, 13 Dec 2021 11:43:43 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/networking/networking4_ipv4-vs-ipv6/</guid>
			<description>IP 地址指定寻址和数据包方案的技术格式。一个IP（互联网协议）地址是分配给连接到每个设备的数值标签计算机网络使用IP协议进行通信。IP 地址充当特定网络上特定设备的标识符。
**IPv4 是一个 IP 版本，广泛用于使用寻址系统识别网络上的设备。它是 1983 年在 ARPANET 中部署用于生产的第一个 IP 版本。它使用 32 位地址方案来存储 2^32 个地址，超过 40 亿个地址。它被认为是主要的互联网协议，承载了 94% 的互联网流量。
IPv6 是 Internet 协议的最新版本。部署此新 IP 地址版本是为了满足对更多 Internet 地址的需求。它旨在解决与 IPv4 相关的问题。凭借 128 位地址空间，它允许 340 个十进制唯一地址空间。IPv6 也称为 IPng（下一代互联网协议）。
主要区别
 IPv4 是 32 位 IP 地址，而 IPv6 是 128 位 IP 地址。 IPv4 是一种数字寻址方法，而 IPv6 是一种字母数字寻址方法。 IPv4 二进制位由点 (.) 分隔，而 IPv6 二进制位由冒号 (:) 分隔。 IPv4 提供 12 个报头字段，而 IPv6 提供 8 个报头字段。 IPv4 支持广播，而 IPv6 不支持广播。 IPv4 有校验和字段，而 IPv6 没有校验和字段当我们比较 IPv4 和 IPv6 时， IPv4 支持 VLSM（可变长度子网掩码），而 IPv6 不支持 VLSM。 IPv4 使用 **ARP（地址解析协议）**映射到 MAC 地址，而 IPv6 使用 **NDP（邻居发现协议）**映射到 MAC 地址。 IPv4 和 IPv6 不能相互通信，但可以同时存在于同一网络中。这称为双堆栈 Dual Stack。  **DNS（Domain Name System）**是域名系统的英文缩写，是一种组织成域层次结构的计算机和网络服务命名系统，用于 TCP/IP 网络。</description>
			<content type="html"><![CDATA[<p><strong>IP</strong> 地址指定寻址和数据包方案的技术格式。一个IP（互联网协议）地址是分配给连接到每个设备的数值标签计算机网络使用IP协议进行通信。IP 地址充当特定网络上特定设备的标识符。</p>
<p>**<img src="https://lh5.googleusercontent.com/znd-u3cSUp_oEije9tcKq6k3qzNORFrs3UJENS9dd60OQB5u8GAdSjmjaoUaYtYCiQcEKAORc5mbIQB6EuGaZ9RzrX0vroMZkL0W7X3j8T80xo-HPGKlcZajzKfHqCKWZQ4JgVI" alt="img"></p>
<p><strong>IPv4</strong> 是一个 IP 版本，广泛用于使用寻址系统识别网络上的设备。它是 1983 年在 ARPANET 中部署用于生产的第一个 IP 版本。它使用 32 位地址方案来存储 2^32 个地址，超过 40 亿个地址。它被认为是主要的互联网协议，承载了 94% 的互联网流量。</p>
<p><strong>IPv6</strong> 是 Internet 协议的最新版本。部署此新 IP 地址版本是为了满足对更多 Internet 地址的需求。它旨在解决与 IPv4 相关的问题。凭借 128 位地址空间，它允许 340 个十进制唯一地址空间。IPv6 也称为 IPng（下一代互联网协议）。</p>
<p><strong>主要区别</strong></p>
<ol>
<li>IPv4 是 <strong>32</strong> <strong>位</strong> IP 地址，而 IPv6 是 <strong>128 位</strong> IP 地址。</li>
<li>IPv4 是一种<strong>数字寻址方法</strong>，而 IPv6 是一种<strong>字母数字寻址方法</strong>。</li>
<li>IPv4 二进制位由点 <strong>(.) 分隔</strong>，而 IPv6 二进制位<strong>由冒号 (:) 分隔</strong>。</li>
<li>IPv4 提供 <strong>12 个报头字段</strong>，而 IPv6 提供 <strong>8 个报头字段</strong>。</li>
<li>IPv4 <strong>支持广播</strong>，而 IPv6 <strong>不支持广播</strong>。</li>
<li>IPv4 <strong>有校验和字段</strong>，而 IPv6 <strong>没有校验和字段</strong>当我们比较 IPv4 和 IPv6 时，</li>
<li>IPv4 <strong>支持 VLSM（可变长度子网掩码</strong>），而 IPv6 不支持 VLSM。</li>
<li>IPv4 使用 **ARP（地址解析协议）**映射到 MAC 地址，而 IPv6 使用 **NDP（邻居发现协议）**映射到 MAC 地址。</li>
<li>IPv4 和 IPv6 <strong>不能相互通信</strong>，但可以同时<strong>存在于同一网络中</strong>。这称为<strong>双堆栈 Dual Stack</strong>。</li>
</ol>
<p>**DNS（Domain Name System）**是域名系统的英文缩写，是一种组织成域层次结构的计算机和网络服务命名系统，用于 TCP/IP 网络。</p>
<h3 id="网页解析全过程用户输入网址到显示对应页面的全过程"><strong>网页解析全过程【用户输入网址到显示对应页面的全过程</strong></h3>
<p>① DNS 解析：当用户输入一个网址并按下回车键的时候，浏览器获得一个域名，而在实际通信过程中，我们需要的是一个 IP 地址，因此我们需要先把域名转换成相应 IP 地址。
② TCP 连接：浏览器通过 DNS 获取到 Web 服务器真正的 IP 地址后，便向 Web 服务器发起 TCP 连接请求，通过 TCP 三次握手建立好连接后，浏览器便可以将 HTTP 请求数据发送给服务器了。
③ 发送 HTTP 请求：浏览器向 Web 服务器发起一个 HTTP 请求，HTTP 协议是建立在 TCP 协议之上的应用层协议，其本质是在建立起的TCP连接中，按照HTTP协议标准发送一个索要网页的请求。在这一过程中，会涉及到负载均衡等操作。
④ 处理请求并返回：服务器获取到客户端的 HTTP 请求后，会根据 HTTP 请求中的内容来决定如何获取相应的文件，并将文件发送给浏览器。
⑤ 浏览器渲染：浏览器根据响应开始显示页面，首先解析 HTML 文件构建 DOM 树，然后解析 CSS 文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。
⑥ 断开连接：客户端和服务器通过四次挥手终止 TCP 连接。</p>
]]></content>
		</item>
		
		<item>
			<title>Networking 3: Http vs Https</title>
			<link>https://daiwei.dev/posts/networking/networking3_http-vs-https/</link>
			<pubDate>Sun, 12 Dec 2021 11:43:43 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/networking/networking3_http-vs-https/</guid>
			<description>HTTP vs HTTPSHTTP is Hypertext Transfer Protocol,超文本传输协议,是建立在 TCP 之上的应用层网络协议。HTTP 使用超文本结构化文本,HTTP 为 Web 浏览器和服务器之间的通信提供了标准规则。
HTTPS is Hypertext Transfer Protocol Secure超文本传输​​协议安全。它是高度先进和安全的 HTTP 版本。它使用端口号。443 用于数据通信。它通过使用 SSL 加密整个通信来实现安全交易。它是 SSL/TLS 协议和 HTTP 的组合。它提供网络服务器的加密和安全标识。HTTP 还允许您在服务器和浏览器之间创建安全的加密连接。它提供数据的双向安全性。这有助于您保护潜在的敏感信息免遭窃取。在 HTTPS 协议中，SSL 事务是在基于密钥的加密算法的帮助下协商的。此密钥的强度通常为 40 或 128 位。与 HTTPS 一起使用的 SSL/TLS 证书类型现在，在本 HTTPS 和 HTTP 差异教程中，我们将介绍与 HTTPS 一起使用的 SSL/TLS 证书类型 域验证 Domain Validation:域验证验证申请证书的人是域名的所有者。这种类型的验证通常需要几分钟到几个小时。 组织验证 Organization Validation:证书颁发机构不仅验证域的所有权，还验证所有者的身份。这意味着可能会要求所有者提供个人身份证明文件以证明其身份。 扩展验证 Extended Validation:扩展验证是最高级别的验证。它包括验证域所有权、所有者身份以及业务注册证明。
主要区别：  HTTP 协议以明文方式发送内容，数据都是未加密的，安全性较差。HTTPS 数据传输过程是加密的，安全性较好。 HTTP 和 HTTPS 使用的是完全不同的连接方式，用的端口也不一样，前者是 80 端口，后者是 443 端口。 HTTPS 协议需要到数字认证机构（Certificate Authority, CA)申请证书，一般需要一定的费用。 HTTP 页面响应比 HTTPS 快，主要因为 HTTP 使用 3 次握手建立连接，客户端和服务器需要握手 3 次，而 HTTPS 除了 TCP 的 3 次握手，还需要经历一个 SSL 协商过程。  HTTP/3了解吗？ HTTP/3 是在 QUIC 基础上发展起来的，其底层使用 UDP 进行数据传输，上层仍然使用 HTTP/2。在 UDP 与 HTTP/2 之间存在一个 QUIC 层，其中 TLS 加密过程在该层进行处理。</description>
			<content type="html"><![CDATA[<p><a href="https://www.guru99.com/difference-http-vs-https.html">HTTP vs HTTPS</a><img src="https://lh4.googleusercontent.com/7yQxjAANYEPix4OvvtZieM8K62fc-bKvP8KArs9U2SVhV3Lb7RfdZrO4RO0W31n3yVOuNw1AVJjHiZkGdFhFUGPSI2lQDc90KicFqSIv9AgWRKBQrir6_D3Qs4S14DZiepFJVVw" alt="img"><strong>HTTP</strong> is Hypertext Transfer Protocol,超文本传输协议,是建立在 TCP 之上的应用层网络协议。HTTP 使用超文本结构化文本,HTTP 为 Web 浏览器和服务器之间的通信提供了标准规则。</p>
<p><strong>HTTPS</strong> is Hypertext Transfer Protocol Secure超文本传输​​协议安全。它是高度先进和安全的 HTTP 版本。它使用端口号。443 用于数据通信。它通过使用 SSL 加密整个通信来实现安全交易。它是 SSL/TLS 协议和 HTTP 的组合。它提供网络服务器的加密和安全标识。HTTP 还允许您在服务器和浏览器之间创建安全的加密连接。它提供数据的双向安全性。这有助于您保护潜在的敏感信息免遭窃取。在 HTTPS 协议中，SSL 事务是在基于密钥的加密算法的帮助下协商的。此密钥的强度通常为 40 或 128 位。与 HTTPS 一起使用的 SSL/TLS 证书类型现在，在本 HTTPS 和 HTTP 差异教程中，我们将介绍与 HTTPS 一起使用的 SSL/TLS 证书类型
域验证 Domain Validation:域验证验证申请证书的人是域名的所有者。这种类型的验证通常需要几分钟到几个小时。
组织验证 Organization Validation:证书颁发机构不仅验证域的所有权，还验证所有者的身份。这意味着可能会要求所有者提供个人身份证明文件以证明其身份。
扩展验证 Extended Validation:扩展验证是最高级别的验证。它包括验证域所有权、所有者身份以及业务注册证明。</p>
<h3 id="主要区别"><strong>主要区别：</strong></h3>
<ol>
<li>HTTP 协议以明文方式发送内容，数据都是未加密的，安全性较差。HTTPS 数据传输过程是加密的，安全性较好。</li>
<li>HTTP 和 HTTPS 使用的是完全不同的连接方式，用的端口也不一样，前者是 80 端口，后者是 443 端口。</li>
<li>HTTPS 协议需要到数字认证机构（Certificate Authority, CA)申请证书，一般需要一定的费用。</li>
<li>HTTP 页面响应比 HTTPS 快，主要因为 HTTP 使用 3 次握手建立连接，客户端和服务器需要握手 3 次，而 HTTPS 除了 TCP 的 3 次握手，还需要经历一个 SSL 协商过程。</li>
</ol>
<h3 id="http3了解吗"><strong>HTTP/3了解吗？</strong></h3>
<p>HTTP/3 是在 QUIC 基础上发展起来的，其底层使用 UDP 进行数据传输，上层仍然使用 HTTP/2。在 UDP 与 HTTP/2 之间存在一个 QUIC 层，其中 TLS 加密过程在该层进行处理。</p>
<h3 id="http-长连接短连接使用场景是什么"><strong>HTTP 长连接短连接使用场景是什么？</strong></h3>
<p><strong>长连接</strong>：多用于操作频繁，点对点的通讯，而且客户端连接数目较少的情况。例如<strong>即时通讯、网络游戏</strong>等。
<strong>短连接</strong>：用户数目较多的Web网站的 HTTP 服务一般用短连接。例如<strong>京东，淘宝这样的大型网站</strong>一般客户端数量达到千万级甚至上亿，若采用长连接势必会使得服务端大量的资源被无效占用，所以一般使用的是短连接。</p>
<h3 id="http-是不保存状态的协议如何保存用户状态"><strong>HTTP 是不保存状态的协议,如何保存用户状态？</strong></h3>
<p>基于 Session 实现的会话保持优点：安全性高，因为状态信息保存在服务器端。缺点：由于大型网站往往采用的是分布式服务器，
基于 Cookie 实现的会话保持， 若遇到 Cookie 被禁用的情况，则可以通过重写 URL 的方式将会话标识放在 URL 的参数里，也可以实现会话保持。优点：服务器不用保存状态信息， 减轻服务器存储压力，同时便于服务端做水平拓展。缺点：该方式不够安全，因为状态信息存储在客户端。</p>
<h3 id="describe-how-a-http-request-is-made-and-processed"><strong>Describe how a HTTP request is made and processed？</strong></h3>
<p>首先通过DNS服务器把域名解析成IP地址，通过IP和子网掩码判断是否属于同一个子网构造应用层请求http报文，传输层添加TCP/UDP头部，网络层添加IP头部，数据链路层添加以太网协议头部数据经过路由器、交换机转发，最终达到目标服务器，目标服务器同样解析数据，最终拿到http报文，按照对应的程序的逻辑响应回去。</p>
<h3 id="https-工作原理"><strong>HTTPS 工作原理？</strong></h3>
<p>用户通过浏览器请求https网站，服务器收到请求，选择浏览器支持的加密和hash算法，同时返回数字证书给浏览器，包含颁发机构、网址、公钥、证书有效期等信息。浏览器对证书的内容进行校验，如果有问题，则会有一个提示警告。否则，就生成一个随机数X，同时使用证书中的公钥进行加密，并且发送给服务器。服务器收到之后，使用私钥解密，得到随机数X，然后使用X对网页内容进行加密，返回给浏览器浏览器则使用X和之前约定的加密算法进行解密，得到最终的网页内容</p>
<h3 id="什么是中间人攻击数字签名证书rsa加密过程man-in-the-middle-attack"><strong>什么是中间人攻击数字签名证书RSA加密过程？man-in-the-middle attack</strong>.</h3>
<p>A man-in-the-middle attack is a type of eavesdropping attack, where attackers interrupt an existing conversation or data transfer. After inserting themselves in the &ldquo;middle&rdquo; of the transfer, the attackers pretend to be both legitimate participants. This enables an attacker to intercept information and data from either party while also sending malicious links or other information to both legitimate participants in a way that might not be detected until it is too late.
Successful MITM execution has two distinct phases: interception and decryption.
Interception, The most common (and simplest) way of doing this is a passive attack in which an attacker makes free, malicious WiFi hotspots available to the public. IP spoofing, ARP spoofing, DNS spoofing.After interception, any two-way SSL traffic needs to be decrypted without alerting the user or application. HTTPS spoofing, SSL BEAST, SSL Hijacking, SSL stripping.</p>
<p>中间人 (MitM) 攻击是指攻击者拦截两方之间的通信以秘密窃听或修改在两者之间传输的流量。攻击者可能会使用中间人攻击来窃取登录凭据或个人信息、监视受害者或破坏通信或损坏数据。 MITM 执行有两个不同的阶段：拦截和解密。
预防：身份验证和篡改检测，不要在公共场所使用开放式公共 Wi-Fi 或 Wi-Fi 产品，使用 VPN 来帮助确保安全连接。网站运营商而言，安全通信协议（包括 TLS 和 HTTPS）通过对传输数据进行稳健的加密和身份验证来帮助减轻欺骗攻击。</p>
<h3 id="对称加密和非对称的区别非对称加密有哪些"><strong>对称加密和非对称的区别，非对称加密有哪些？</strong></h3>
<p>加密和解密的过程不同：对称加密和解密过程使用同一个密钥；非对称加密中加密和解密采用公钥和私钥两个密钥，一般使用公钥进行加密，使用私钥进行解密。加密和解密的速度不同：对称加密和解密速度较快，当数据量比较大时适合使用；非对称加密和解密时间较长，速度相对较慢，适合少量数据传输的场景。传输的安全性不同：采用对称加密方式进行通信时，收发双方在数据传送前需要协定好密钥，而这个密钥还有可能被第三方窃听到的，一旦密钥泄漏，之后的通信就完全暴漏给攻击者了；非对称加密采用公钥加密和私钥解密的方式，其中私钥是基于不同的算法生成的随机数，公钥可以通过私钥通过一定的算法推导得出，并且私钥到公钥的推导过程是不可逆的，也就是说公钥无法反推导出私钥，即使攻击者窃听到传输的公钥，也无法正确解出数据，所以安全性较高。常见的非对称加密算法主要有：RSA、Elgamal、背包算法、Rabin、D-H 算法等等。</p>
<h3 id="ddos-有哪些如何防范"><strong>DDoS 有哪些，如何防范？</strong></h3>
<p>DDoS 为分布式拒绝服务攻击，是指处于不同位置的多个攻击者同时向一个或数个目标发动攻击，或者一个攻击者控制了不同位置上的多台机器并利用这些机器对受害者同时实施攻击。DDoS 攻击主要有两种形式：流量攻击和资源耗尽攻击。</p>
<h3 id="arp-攻击有哪些如何防范"><strong>ARP 攻击有哪些，如何防范？</strong></h3>
<p>在 ARP 的解析过程中，局域网上的任何一台主机如果接收到一个 ARP 应答报文，并不会去检测这个报文的真实性，而是直接记入自己的 ARP 缓存表中。并且这个 ARP 表是可以被更改的，当表中的某一列长时间不适使用，就会被删除。ARP 攻击就是利用了这一点，攻击者疯狂发送 ARP 报文，其源 MAC 地址为攻击者的 MAC 地址，而源 IP 地址为被攻击者的 IP 地址。通过不断发送这些伪造的 ARP 报文，让网络内部的所有主机和网关的 ARP 表中被攻击者的 IP 地址所对应的 MAC 地址为攻击者的 MAC 地址。这样所有发送给被攻击者的信息都会发送到攻击者的主机上，从而产生 ARP 欺骗。通常可以把 ARP 欺骗分为以下几种：
洪泛攻击，欺骗主机，欺骗网关，中间人攻击，IP 地址冲突</p>
]]></content>
		</item>
		
		<item>
			<title>Networking 2.2: TCP 4-way Handshake</title>
			<link>https://daiwei.dev/posts/networking/networking2.2_%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5/</link>
			<pubDate>Sat, 11 Dec 2021 11:43:43 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/networking/networking2.2_%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5/</guid>
			<description>TCP 4-Way Handshake (FIN, ACK,FIN,ACK)  client端向server发送FIN包，进入FIN_WAIT_1状态，这代表client端已经没有数据要发送了。 server端收到之后，返回一个ACK，进入CLOSE_WAIT等待关闭的状态，因为server端可能还有没有发送完成的数据。 等到server端数据都发送完毕之后，server端就向client发送FIN，进入LAST_ACK状态。 client收到ACK之后，进入TIME_WAIT的状态，同时回复ACK，server收到之后直接进入CLOSED状态，连接关闭。但是client要等待2MSL(报文最大生存时间)的时间，才会进入CLOSED状态。  为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？ 因为网络是不可靠的，有可以最后一个ACK丢失。所以TIME_WAIT状态就是用来重发可能丢失的ACK报文。在Client发送出最后的ACK回复，但该ACK可能丢失。Server如果没有收到ACK，将不断重复发送FIN片段。所以Client不能立即关闭，它必须确认Server接收到了该ACK。Client会在发送出ACK之后进入到TIME_WAIT状态。Client会设置一个计时器，等待2MSL的时间。如果在该时间内再次收到FIN，那么Client会重发ACK并再次等待2MSL。所谓的2MSL是两倍的MSL(Maximum Segment Lifetime)。MSL指一个片段在网络中最大的存活时间，2MSL就是一个发送和一个回复所需的最大时间。如果直到2MSL，Client都没有再次收到FIN，那么Client推断ACK已经被成功接收，则结束TCP连接。
Why need 4 ways handshake? 四次挥手的过程为什么server端ACK和FIN不在同一个请求里面发送？ 因为数据发送的截止时间不同，当client发送FIN给server后，只是表示client所有数据都已经发送完毕，client还可以接受数据。但是server的数据发送的数据可能还没有截止，所以server需要先发送一个ACK告诉client我收到你的FIN信息了，等到server端的数据全部发送完成，在发送FIN告知client我的信息也已经全部发送，现在可以关闭链接了。因此，己方ACK和FIN一般都会分开发送。</description>
			<content type="html"><![CDATA[<h3 id="tcp-4-way-handshake-fin-ackfinackhttpswwwgeeksforgeeksorgtcp-connection-termination"><a href="https://www.geeksforgeeks.org/tcp-connection-termination/">TCP 4-Way Handshake (FIN, ACK,FIN,ACK)</a></h3>
<p><img src="https://lh3.googleusercontent.com/A8Mf8oMVvrWZ4-zmf2kHcWQTd8f8X9yH2KPtkj0YkyNjm7L3M3--syXpPXGj-Mg9d2wVXYI00RGgi8F3dj__V4WLpgknPQsQocFpQefc8Qlr02LWMdheMNxXK_t7iDhJ0I0N-7Q" alt="img"></p>
<ol>
<li>client端向server发送FIN包，进入FIN_WAIT_1状态，这代表client端已经没有数据要发送了。</li>
<li>server端收到之后，返回一个ACK，进入CLOSE_WAIT等待关闭的状态，因为server端可能还有没有发送完成的数据。</li>
<li>等到server端数据都发送完毕之后，server端就向client发送FIN，进入LAST_ACK状态。</li>
<li>client收到ACK之后，进入TIME_WAIT的状态，同时回复ACK，server收到之后直接进入CLOSED状态，连接关闭。但是client要等待2MSL(报文最大生存时间)的时间，才会进入CLOSED状态。</li>
</ol>
<h3 id="为什么time_wait状态需要经过2msl最大报文段生存时间才能返回到close状态"><strong>为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？</strong></h3>
<p>因为网络是不可靠的，有可以最后一个ACK丢失。所以<strong>TIME_WAIT状态就是用来重发可能丢失的ACK报文</strong>。在Client发送出最后的ACK回复，但该ACK可能丢失。Server如果没有收到ACK，将不断重复发送FIN片段。所以Client不能立即关闭，它必须确认Server接收到了该ACK。Client会在发送出ACK之后进入到TIME_WAIT状态。Client会设置一个计时器，等待2MSL的时间。如果在该时间内再次收到FIN，那么Client会重发ACK并再次等待2MSL。所谓的<strong>2MSL是两倍的MSL(Maximum Segment Lifetime)</strong>。MSL指一个片段在网络中最大的存活时间，2MSL就是一个发送和一个回复所需的最大时间。如果<strong>直到2MSL，Client都没有再次收到FIN，那么Client推断ACK已经被成功接收，则结束TCP连接</strong>。</p>
<h3 id="why-need-4-ways-handshake-四次挥手的过程为什么server端ack和fin不在同一个请求里面发送"><strong>Why need 4 ways handshake? 四次挥手的过程为什么server端ACK和FIN不在同一个请求里面发送？</strong></h3>
<p>因为数据发送的截止时间不同，当client发送FIN给server后，只是表示client所有数据都已经发送完毕，client还可以接受数据。但是server的数据发送的数据可能还没有截止，所以server需要先发送一个ACK告诉client我收到你的FIN信息了，等到server端的数据全部发送完成，在发送FIN告知client我的信息也已经全部发送，现在可以关闭链接了。因此，己方ACK和FIN一般都会分开发送。</p>
]]></content>
		</item>
		
		<item>
			<title>Networking 2.1: TCP 3-Way Handskake</title>
			<link>https://daiwei.dev/posts/networking/networking2.1_%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E8%BF%9E%E6%8E%A5/</link>
			<pubDate>Fri, 10 Dec 2021 11:43:43 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/networking/networking2.1_%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E8%BF%9E%E6%8E%A5/</guid>
			<description>TCP 3-Way Handshake (SYN, SYN-ACK,ACK)    Message Description     SYNSynchronize [ˈsiŋ-krə-ˌnīz] Used to initiate and establish a connection. It also helps you to synchronize sequence numbers between devices.用于发起和建立连接。它还可以帮助您在设备之间同步序列号。   ACKAcknowledgement Helps to confirm to the other side that it has received the SYN.有助于向对方确认它已收到 SYN。   SYN-ACK SYN message from local device and ACK of the earlier packet.来自本地设备的 SYN 消息和较早数据包的 ACK。   FIN Used to terminate a connection.</description>
			<content type="html"><![CDATA[<h3 id="tcp-3-way-handshake-syn-syn-ackack">TCP 3-Way Handshake (SYN, SYN-ACK,ACK)</h3>
<table>
<thead>
<tr>
<th>Message</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>SYN<!-- raw HTML omitted -->Synchronize [ˈsiŋ-krə-ˌnīz]</td>
<td>Used to initiate and establish a connection. It also helps you to synchronize sequence numbers between devices.用于发起和建立连接。它还可以帮助您在设备之间同步序列号。</td>
</tr>
<tr>
<td>ACK<!-- raw HTML omitted -->Acknowledgement</td>
<td>Helps to confirm to the other side that it has received the SYN.有助于向对方确认它已收到 SYN。</td>
</tr>
<tr>
<td>SYN-ACK<!-- raw HTML omitted --></td>
<td>SYN message from local device and ACK of the earlier packet.来自本地设备的 SYN 消息和较早数据包的 ACK。</td>
</tr>
<tr>
<td>FIN</td>
<td>Used to terminate a connection.用于终止连接。</td>
</tr>
</tbody>
</table>
<p><img src="https://lh3.googleusercontent.com/VXn4OENswdtc0yZ6Bh19PovrKS5fJrbQFZJSIYzXRxKNpfdgfIE5oqL5tVaDbAmkCV2GNa0muQ-36wU0uOhWpMrlsKU3ZP2jRb-Eu5SqmAZx2Nqzu8CrWTgHc7jWG3PEB0E-LwM" alt="img"></p>
<h3 id="tcp-3-way-handshake-是在-tcpip-网络中用于在服务器和客户端之间建立连接的过程"><strong>TCP 3-way handshake</strong> 是在 TCP/IP 网络中用于在服务器和客户端之间建立连接的过程。</h3>
<p>第1步（SYN）：在第一步中，客户端希望与服务器建立连接，因此它发送一个SYN段，通知服务器，客户端可能开始通信，并以什么序列号开始段。Client进入SYN_SENT状态，等待Server确认。</p>
<p>第二步（SYN + ACK）: 服务器以SYN-ACK信号位的设置响应客户端的请求。确认(ACK)表示它收到的段的响应，SYN表示它可能以什么序列号开始段。Server进入SYN_RCVD状态。</p>
<p>第3步（ACK）：在最后一部分，客户端发送ACK信号确认服务器的响应，他们都建立了一个可靠的连接，并开始实际的数据传输。</p>
<h3 id="tcp连接握手为什么是三次而不是二次或者四次呢"><strong>TCP连接握手为什么是三次而不是二次或者四次呢？</strong></h3>
<p>原理:在不可靠信道上可靠地传输信息.可靠消息传输是基于我们的ack:确认号实现的，假如我们采用2次握手,client端发送建立连接请求后,server端收到消息之后,发送确认收到消息之后就分配资源等待client端发送数据，会存在在不可靠的网络通道下,client端发送了数据包A然后又发送了数据包B由于网络原因,后发送的数据包B先到达,然后server端收到数据包之后给其分配资源,准备接收数据,此时client跟server端就正常发送数据。</p>
<p>但是由于后面达到的数据包A又到达建立连接,此时server端就会再次分配资源。但是此时client端已经可以正常发送数据,已经进入了连接建立状态所以不再理会server端的资源分配，这样的话,在信道不可靠的情况下,多个请求发送时候会创建大量连接请求,服务端资源浪费。因为3次握手已经可以建立连接了不需要4次。三次握手不是TCP本身的要求, 而是为了满足&quot;在不可靠信道上可靠地传输信息&quot;这一需求所导致的。</p>
<h3 id="如果已经建立了连接但是客户端突然出现故障了怎么办"><strong>如果已经建立了连接，但是客户端突然出现故障了怎么办？</strong></h3>
<p>TCP设有一个保活计时器,客户端如果出现故障,服务器不能一直等下去白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p>
<h3 id="tcp-long-connection-vs-short-connection"><strong>TCP long connection vs short connection</strong></h3>
<p><strong>Long connection:</strong> the client and the server do not disconnect after establishing the connection. After that, when the client accesses the content on the server again, it will continue to use this connection channel. 客户端和服务器在建立连接后不会断开连接。之后，当客户端再次访问服务器上的内容时，它将继续使用这个连接通道。
<strong>Short connection:</strong> the client and server establish a connection and immediately disconnect after sending data. The next time you want to retrieve data, you need to establish a connection again.客户端和服务器建立一个连接，并在发送数据后立即断开连接。下次你想检索数据时，你需要再次建立连接。</p>
]]></content>
		</item>
		
		<item>
			<title>Networking 2: TCP VS UDP PROTOCAL</title>
			<link>https://daiwei.dev/posts/networking/networking2_tcp-vs-udp/</link>
			<pubDate>Thu, 09 Dec 2021 11:43:43 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/networking/networking2_tcp-vs-udp/</guid>
			<description>TCP（Transmission Control Protocol）又叫传输控制协议，TCP是面向连接的，并且是一种可靠的协议，在基于TCP进行通信时，通信双方需要建立TCP连接，建立连接需要经过三次握手，握手成功才可以通信。 UDP (Datagram oriented protocol) 是一种面向无连接，切不可靠的协议，在通信过程中，它并不像TCP那样需要先建立一个连接，只要目的地址，端口号，源地址，端口号确定了，就可以直接发送信息报文，并且不需要一定能收到或者完整的数据。它仅仅提供了校验和机制来保障报文是否完整，若校验失败，则直接将报文丢弃，不做任何处理。
区别：
 TCP协议是connection-oriented protoco面向连接的协议； UDP 是connectionless protocol无连接的协议. TCP 以字节流的形式读取数据，并将消息传输到段边界；UDP 消息包含一个一个发送的数据包。它还在到达时间检查完整性。 TCP 消息通过 Internet 从一台计算机传输到另一台计算机；UDP 一个程序可以向另一个程序发送大量数据包。 TCP 按特定顺序重新排列数据包；UDP 协议没有固定的顺序，所有的数据包都是相互独立的。 TCP 的速度较慢，header = 20 bytes; UDP 速度快， header = 8 bytes。 TCP 有多种检测错误的方法，进行错误检查并进行错误恢复；UDP 只有一个检查错误的方法checksums,执行错误检查，但它会丢弃错误的数据包。 TCP 使用握手协议是可靠的，因为它保证将数据传送到目标路由器； UDP 没有握手协议，不可靠，无法保证将数据传送到目的地。 TCP 可靠，稳定 用于计算机之间连接,例如HTTP, HTTPS,SMTP；UDP 传输数据速度快，用于语音，视频和在线游戏连接。 缺点：TCP 不能用于广播或多播传输, 速度慢，效率比较低，占用系统资源，容易被攻击。三次握手机制导致TCP容易被人利用，实现DOS，DDOS攻击。 UDP 不可靠，不稳定，在网络质量不好的时候容易丢包。  TCP怎么保证传输过程的可靠性？  校验和 checksums：发送方在发送数据之前计算校验和，接收方收到数据后同样计算，如果不一致，那么传输有误。
确认应答，序列号：TCP进行传输时数据都进行了编号，每次接收方返回ACK都有确认序列号。
超时重传：如果发送方发送数据一段时间后没有收到ACK，那么就重发数据。
连接管理：三次握手和四次挥手的过程。
流量控制：TCP协议报头包含16位的窗口大小，接收方会在返回ACK时同时把自己的即时窗口填入，发送方就根据报文中窗口的大小控制发送速度。
拥塞控制：刚开始发送数据的时候，拥塞窗口是1，以后每次收到ACK，则拥塞窗口+1，然后将拥塞窗口和收到的窗口取较小值作为实际发送的窗口，如果发生超时重传，拥塞窗口重置为1。这样做的目的就是为了保证传输过程的高效性和可靠性。
 </description>
			<content type="html"><![CDATA[<p><strong>TCP</strong>（Transmission Control Protocol）又叫传输控制协议，TCP是面向连接的，并且是一种可靠的协议，在基于TCP进行通信时，通信双方需要建立TCP连接，建立连接需要经过三次握手，握手成功才可以通信。
<strong>UDP</strong> (Datagram oriented protocol) 是一种面向无连接，切不可靠的协议，在通信过程中，它并不像TCP那样需要先建立一个连接，只要目的地址，端口号，源地址，端口号确定了，就可以直接发送信息报文，并且不需要一定能收到或者完整的数据。它仅仅提供了校验和机制来保障报文是否完整，若校验失败，则直接将报文丢弃，不做任何处理。</p>
<p>区别：</p>
<ol>
<li>TCP协议是connection-oriented protoco<strong>面向连接的协议</strong>； UDP 是connectionless protocol<strong>无连接的协议</strong>.</li>
<li>TCP 以<strong>字节流的形式读取数据</strong>，并将消息传输到段边界；UDP 消息包含一个一个<strong>发送的数据包</strong>。它还在到达时间检查完整性。</li>
<li>TCP 消息通过 Internet 从<strong>一台计算机传输到另一台计算机</strong>；UDP <strong>一个程序可以向另一个程序</strong>发送大量数据包。</li>
<li>TCP <strong>按特定顺序重新排列数据包</strong>；UDP 协议没有固定的顺序，所有的数据包都是<strong>相互独立的</strong>。</li>
<li>TCP 的<strong>速度较慢，header = 20 bytes</strong>; UDP <strong>速度快， header = 8 bytes</strong>。</li>
<li>TCP 有多种检测错误的方法，进行错误检查并进行错误恢复；UDP 只有一个检查错误的方法<strong>checksums</strong>,执行错误检查，但它会丢弃错误的数据包。</li>
<li>TCP 使用握手协议是<strong>可靠</strong>的，因为它保证将数据传送到目标路由器； UDP 没有握手协议，<strong>不可靠</strong>，无法保证将数据传送到目的地。</li>
<li>TCP 可靠，稳定 用于计算机之间连接,例如<strong>HTTP, HTTPS,SMTP</strong>；UDP 传输数据速度快，用于<strong>语音，视频和在线游戏连接</strong>。</li>
<li>缺点：TCP <strong>不能用于广播或多播传输</strong>, <strong>速度慢，效率比较低</strong>，<strong>占用系统资源</strong>，<strong>容易被攻击</strong>。三次握手机制导致TCP容易被人利用，实现<strong>DOS，DDOS攻击</strong>。      UDP <strong>不可靠，不稳定</strong>，在网络质量不好的时候<strong>容易丢包</strong>。</li>
</ol>
<h3 id="tcp怎么保证传输过程的可靠性"><strong>TCP怎么保证传输过程的可靠性？</strong></h3>
<blockquote>
<p><strong>校验和 checksums</strong>：发送方在发送数据之前计算校验和，接收方收到数据后同样计算，如果不一致，那么传输有误。</p>
<p><strong>确认应答，序列号</strong>：TCP进行传输时数据都进行了编号，每次接收方返回ACK都有确认序列号。</p>
<p><strong>超时重传</strong>：如果发送方发送数据一段时间后没有收到ACK，那么就重发数据。</p>
<p><strong>连接管理</strong>：三次握手和四次挥手的过程。</p>
<p><strong>流量控制</strong>：TCP协议报头包含16位的窗口大小，接收方会在返回ACK时同时把自己的即时窗口填入，发送方就根据报文中窗口的大小控制发送速度。</p>
<p><strong>拥塞控制</strong>：刚开始发送数据的时候，拥塞窗口是1，以后每次收到ACK，则拥塞窗口+1，然后将拥塞窗口和收到的窗口取较小值作为实际发送的窗口，如果发生超时重传，拥塞窗口重置为1。这样做的目的就是为了保证传输过程的高效性和可靠性。</p>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>Networking 1: OSI vs TCP/IP Model</title>
			<link>https://daiwei.dev/posts/networking/networking1_osi-vs-tcp_ip/</link>
			<pubDate>Wed, 08 Dec 2021 11:43:43 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/networking/networking1_osi-vs-tcp_ip/</guid>
			<description>TCP/IP (Transmission Control Protocol/Internet Protocol Model) 传输控制协议/互联网协议模型最早由美国国防部赞助研究，定义系统和系统之间 开放连接和通信所使用的通信网络。
OSI (Open System Interconnection Reference Model) 开放式系统互联通信参考模型 是国际标准组织 ISO 在 TCP/IP model的基础上制定的。定义系统和系统之间 开放连接和通信所使用的通信网络。
OSI vs TCP/IP Model   OSI 模型有7层；
TCP/IP模型只有4层，更加简洁，应用更加广泛。
  OSI header = 5 byte;
TCP/IP header = 20 byte.
  OSI 遵循垂直方法；
TCP/IP 遵循水平方法。
  OSI 模型 中 传输层 仅面向连接；
TCP/IP 模型 传输层 既面向连接又面向无连接。
  OSI 模型帮助您标准化路由器、交换机、主板和其他硬件；
TCP/IP 帮助您在不同类型的计算机之间建立连接。
  优缺点：OSI 没有定义任何特定的协议；层不能并行单独工作，因为每一层都需要等待从前一层获取数据；某些服务在传输层和数据链路层等许多层中是重复的。
TCP/IP 模型设置和管理负责，服务、接口和协议没有明确的分离。</description>
			<content type="html"><![CDATA[<p><strong>TCP/IP (Transmission Control Protocol/Internet Protocol Model)</strong> <strong>传输控制协议/互联网协议模型</strong>最早由美国国防部赞助研究，定义<strong>系统和系统之间</strong> 开放连接和通信所使用的通信网络。</p>
<p><strong>OSI (Open System Interconnection Reference Model) <strong>开放式系统互联通信参考模型 是国际标准组织 ISO 在 TCP/IP  model的基础上制定的。定义</strong>系统和系统之间</strong> 开放连接和通信所使用的通信网络。</p>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202112201432952.png" alt=""></p>
<h3 id="osi-vs-tcpip-model">OSI vs TCP/IP Model</h3>
<ol>
<li>
<p>OSI 模型有7层；</p>
<p>TCP/IP模型只有4层，更加简洁，应用更加广泛。</p>
</li>
<li>
<p>OSI header = <strong>5 byte</strong>;</p>
<p>TCP/IP header = <strong>20 byte</strong>.</p>
</li>
<li>
<p>OSI 遵循垂直方法；</p>
<p>TCP/IP 遵循水平方法。</p>
</li>
<li>
<p>OSI 模型 中 传输层 <strong>仅面向连接</strong>；</p>
<p>TCP/IP 模型 传输层 <strong>既面向连接又面向无连接</strong>。</p>
</li>
<li>
<p>OSI 模型帮助您<strong>标准化路由器、交换机、主板和其他硬件</strong>；</p>
<p>TCP/IP 帮助您在<strong>不同类型的计算机之间建立连接</strong>。</p>
</li>
<li>
<p>优缺点：OSI <strong>没有定义任何特定的协议</strong>；<strong>层不能并行单独工作</strong>，因为每一层都需要等待从前一层获取数据；某些服务在传输层和数据链路层等许多层中是<strong>重复</strong>的。</p>
<p>TCP/IP <strong>模型设置和管理负责，服务、接口和协议没有明确的分离</strong>。</p>
</li>
</ol>
<p><img src="https://media.fs.com/images/community/wp-content/uploads/2017/11/how-data-is-processed-in-OSI-and-TCPIP-models1.jpg" alt="how data is processed in OSI and TCPIP models"></p>
<p><img src="https://media.fs.com/images/community/upload/kindEditor/202107/29/original-seven-layers-of-osi-model-1627523878-JYjV8oybcC.png" alt="seven layers of OSI model"></p>
<p><img src="https://media.fs.com/images/community/wp-content/uploads/2017/11/comparison-of-OSI-and-TCPIP.jpg" alt="comparison of OSI and TCPIP"></p>
<p>————————————————</p>
<h2 id="物理层-physical-layer">物理层 Physical Layer</h2>
<p>字面意思解释：物理传输、硬件、物理特性。在深圳的你与北京的朋友聊天，你的电脑必须要能上网，物理体现是什么？是不是接一根网线，插个路由器，北京的朋友那边是不是也有根网线，也得插个路由器。也就是说计算机与计算机之间的通信，必须要有底层物理层方面的连通，就类似于你打电话，中间是不是必须得连电话线。</p>
<p>中间的物理链接可以是光缆、电缆、双绞线、无线电波。中间传的是电信号，即010101&hellip;这些二进制位。</p>
<p>要让这些010010101001&hellip;有意思，人为的分组再适合不过了，8位一组，发送及接收都按照8位一组来划分。接收到8位为一组的话，那么就可以按照这8位数来做运算。如果没有分组，对方接收的计算机根本就不知道从哪一位开始来做计算，也解析不了收到的数据。我发了16位你就按照16位来做计算吗？我发100位你就按照100位做计算吗？没什么意义是吧。因此要想让底层的电信号有意义，必须要把底层的电信号做分组。我做好8位一组，那么我收到数据，我就知道这几个8位做一组，这几个8位做一组。那么每个8位就可以得到一个确定的数。分组是谁干的活呢？物理层干不了，这个是数据链路层干的。</p>
<h2 id="数据链路层-data-link-layer">数据链路层 Data Link Layer</h2>
<p>早期的时候，数据链路层就是来对电信号来做分组的。以前每个公司都有自己的分组方式，非常的乱，后来形成了统一的标准（标准就是协议），即以太网协议Ethernet。</p>
<p>Ethernet规定</p>
<p>一组电信号称之为一个数据包，或者叫做一个“帧”</p>
<p>每一数据帧分成：报头head和数据data两部分
head包含：（固定18个字节）</p>
<p>发送者（源地址，6个字节）
接收者（目标地址，6个字节）
数据类型（6个字节）
data包含：（最短46字节，最长1500字节）</p>
<p><strong>数据包的具体内容</strong>
head长度+data长度=最短64字节，最长1518字节，超过最大限制就分片发送。</p>
<p>这就像写信，发送者的地址（源地址）就是你家的地址，接收者地址（目标地址）就是对方的收信地址，你家的路由器就相当于邮局。其实在计算机通信中的源地址和目标地址指的是mac地址。</p>
<p><strong>Mac地址的由来：</strong></p>
<p>head中包含的源和目标地址由来：Ethernet规定接入Internet的设备都必须具备网卡，发送端的和接收端的地址便是指网卡的地址，即Mac地址。</p>
<p>每块网卡出厂时都被烧录上一个实际上唯一的Mac地址，长度为48位2进制，通常由12位16进制数表示，（前六位是厂商编码，后六位是流水线号）</p>
<p><strong><code>Hardware (MAC) Address:	f0:18:98:99:0d:88</code></strong></p>
<p>有了mac地址以后，计算机就可以通信了，假设一个教室就是一个局域网（隔离的网络），这个教室里面有几台计算机，计算机的通信和人的通信是一个道理，把教室里面的人都比作一个个计算机，假设教室里面的人都是瞎子，其实计算机就是瞎子的，计算机通信基本靠吼，现在我要找教室里面的飞哥要战狼2的片，然后我就吼一声，说我要找飞哥要战狼2的片，战狼2的片就属于我的数据，但是我在发的时候我是不是要标识我是谁，我要找谁，我是谁就是我的mac地址，我要找谁就是飞哥的mac地址，这两个地址做数据包的头部，再加上数据战狼2的片就构成了一个数据帧。</p>
<p>这个数据包封装好以后就往外发，到物理层以后就全部转成二级制，往外发是怎么发的呢？就是靠吼。即“我是Edison，我找飞哥要战狼2的片”。这么吼了一嗓子以后，全屋子的人都能听到，这就是广播。</p>
<p>计算机底层，只要在一个教室里（一个局域网），都是靠广播的方式，吼。</p>
<p>局域网的理解：什么是互联网，互联网就是由一个个局域网组成，局域网内的计算机不管是对内还是对外都是靠吼，这就是数据链路层的工作方式&mdash;&ndash;广播。</p>
<p>广播出去以后，所有人都听得见，所有人都会拆开这个包，读发送者是谁，接收者是谁，只要接收者不是自己就丢弃掉。对计算机来说，它会看自己的Mac地址，飞哥收到以后，他就会把片发给我，发送回来同样采用广播的方式了，靠吼。</p>
<p>同一个教室（同一个局域网）的计算机靠吼来通信，那不同教室的计算机又如何？</p>
<p>比如说局域网1的pc1与局域网2的pc10如何通信？你在教室1（局域网1）吼，教室2（局域网2）的人肯定是听不见的。这就是跨网络进行通信，数据链路层就解决不了这个问题了，这就得靠网络层出面了。</p>
<p>在讲网络层之前，其实基于广播的这种通信就可以实现全世界通信了，你吼一声，如果全世界是一个局域网，全世界的计算机肯定可以听得见，从理论上似乎行得通，如果全世界的计算机都在吼，你想一想，这是不是一个灾难。因此，全世界不能是一个局域网。于是就有了网络层。</p>
<h2 id="网络层-network-layer">网络层 Network Layer</h2>
<p>网络层定义了一个<strong>IP协议</strong>，</p>
<p>你想，我是这个教室的一个学生，我想找隔壁教室一个叫老王的学生，我也不认识老王，那怎么办，我吼？老王在另外一个教室肯定是听不到的。找教室的负责人，这个教室的负责人就负责和隔壁教室的负责人说话，说我们教室的有个学生要找你们教室的老王。往外传的东西交给负责人就可以了，内部的话上面已经提到，通过广播的方式，对外的东西广播失效。教室的负责人就是网关，<strong>网关</strong>即网络关口的意思。</p>
<p>Mac地址是用来标识你这个教室的某个位置，IP地址是用来标识你在哪个教室（哪个局域网）。你要跨网络发包你是不是要知道对方的IP地址，比如你要访问百度，你肯定得知道百度服务器的IP地址。计算机在发包前，会判断你在哪个教室，对方在哪个教室，如果在一个教室，基于mac地址的广播发包就OK了；如果不在一个教室，即跨网络发包，那么就会把你的包交给教室负责人（网关）来转发。Mac地址及IP地址唯一标识了你在互联网中的位置。</p>
<p>数据链路层中会把网络层的数据包封装到数数据链路层的数据位置，然后再添加上自己的包头，再发给物理层，物理层发给网关，网关再发给对方教室的网关，对方教室的网关收到后在那个教室做广播。</p>
<p>在数据链路层看，数据封装了两层，跟玩俄罗斯套娃有点类似，一层套了一层
<img src="https://img-blog.csdn.net/20180802144026546?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhb3RvbmduaW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p>
<p>最终变成</p>
<p><img src="https://img-blog.csdn.net/20180802144225976?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhb3RvbmduaW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p>
<p>现在来看另一个问题，在吼之前怎么知道对方的Mac地址？这就得靠ARP协议。</p>
<p>ARP协议的由来：在你找飞哥要片之前，你的先干一件事，想办法知道飞哥的Mac地址。即你的机器必须先发一个ARP包出去，ARP也是靠广播的方式发，ARP发送广播包的方式如下：</p>
<p><img src="https://img-blog.csdn.net/20180802145027656?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhb3RvbmduaW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p>
<p>局域网中怎么获取对方的Mac地址：</p>
<p>肯定要知道对方的IP地址，这是最基本的，就像你要访问百度，肯定得知道百度的域名，域名就是百度的IP地址。自己的IP可以轻松获得，自己的Mac也轻松获取，目标Mac为12个F，我们叫广播地址，表达的意思是我想要获取这个目标IP地址172.16.10.11的机器的Mac地址。Mac为12个F代表的是一种功能，这个功能就是获取对方的MAC地址，计算机的Mac永远不可能是12个F。假设是在本教室广播，一嗓子吼出去了，所有人开始解包，只有IP地址是172.16.10.11的这个人才会返回他的Mac地址，其他人全部丢弃。发回来源Mac改成飞哥自己的Mac地址，同时把飞哥的Mac地址放在数据部分。</p>
<p>跨网络怎么获取对方的Mac地址：</p>
<p>通过IP地址区分，计算机运算判断出飞哥不在同一个教室，目标IP就变成了网关的IP了。网关的IP在计算机上配死了，可以轻松获取。</p>
<p><img src="https://img-blog.csdn.net/20180802145027656?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhb3RvbmduaW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p>
<p>这样网关就会把它的Mac地址返回给你，然后正常发包</p>
<p>网关帮你去找飞哥，但对用户来说，我们根本就感觉不到网关的存在。</p>
<h2 id="传输层">传输层</h2>
<p>传输层的由来：网络层的ip帮我们区分子网，以太网层的mac帮我们找到主机，然后大家使用的都是应用程序，你的电脑上可能同时开启qq，暴风影音，等多个应用程序，</p>
<p>那么我们通过ip和mac找到了一台特定的主机，如何标识这台主机上的应用程序，答案就是<strong>端口</strong>，<strong>端口即应用程序与网卡关联的编号</strong>。</p>
<p>传输层功能：<strong>建立端口到端口的通信</strong></p>
<p>补充：<strong>端口范围0-65535，0-1023为系统占用端口</strong>,例如<code>8080</code>为http服务的备用端口,</p>
<p>tcp协议：</p>
<p>可靠传输，TCP数据包没有长度限制，理论上可以无限长，但是为了保证网络的效率，通常TCP数据包的长度不会超过IP数据包的长度，以确保单个TCP数据包不必再分割。</p>
<p>以太网头	ip 头              	tcp头              	数据</p>
<p>udp协议：</p>
<p>不可靠传输，”报头”部分一共只有8个字节，总长度不超过65,535字节，正好放进一个IP数据包。</p>
<p>以太网头	ip头                 	    udp头                           	数据</p>
<h2 id="应用层">应用层</h2>
<p>应用层由来：用户使用的都是应用程序，均工作于应用层，互联网是开发的，大家都可以开发自己的应用程序，数据多种多样，必须规定好数据的组织形式 。</p>
<p>应用层功能：规定应用程序的数据格式。</p>
<p>例：TCP协议可以为各种各样的程序传递数据，比如Email、WWW、FTP等等。那么，必须有不同协议规定电子邮件、网页、FTP数据的格式，这些应用程序协议就构成了”应用层”。</p>
<p>原文链接：https://blog.csdn.net/taotongning/article/details/81352985</p>
<p>————————————————</p>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202112211343575" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202112211344693" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202112211344984" alt=""></p>
]]></content>
		</item>
		
		<item>
			<title>Java Threads 7: threadpool</title>
			<link>https://daiwei.dev/posts/java/thread7_javathreadpool/</link>
			<pubDate>Fri, 26 Nov 2021 11:18:55 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/java/thread7_javathreadpool/</guid>
			<description>What is the Thread Pool in Java? As the name suggests, the thread pool in Java is actually a pool of Threads. In a simple sense, it contains a group of worker threads that are waiting for the job to be granted. They are reused in the whole process.
In a Thread Pool, a group of fixed size threads is created. Whenever a task has to be granted, one of the threads is pulled out and assigned that task by the service provider, as soon as the job is completed the thread is returned back to the thread pool.</description>
			<content type="html"><![CDATA[<h2 id="what-is-the-thread-pool-in-java"><strong>What is the Thread Pool in Java?</strong></h2>
<p>As the name suggests, the thread pool in Java is actually a pool of <a href="https://www.edureka.co/blog/java-thread/">Threads</a>. In a simple sense, it contains a group of worker threads that are waiting for the job to be granted. They are reused in the whole process.</p>
<p>In a Thread Pool, a group of fixed size threads is created. Whenever a task has to be granted, one of the threads is pulled out and assigned that task by the service provider, as soon as the job is completed the thread is returned back to the thread pool. Thread pool is preferably used because active threads consume system resources, when is JVM creates too many threads at the same time, the system could run out of memory. Hence the number of threads to be created has to be limited. Therefore the concept of the thread pool is preferred!</p>
<p>线程池顾名思义就是一个包含很多线程的池子，这个池子里的线程都是可复用的，使用线程池是为了降低系统内存的消耗。</p>
<h2 id="advantages-of-a-thread-pool"><strong>Advantages of a Thread Pool</strong></h2>
<ul>
<li>
<p>Better performance</p>
</li>
<li>
<p>Saves time</p>
</li>
<li>
<p>No need to create a thread again and again</p>
</li>
<li>
<p>Easy to access</p>
</li>
<li>
<p>Real-time usage</p>
<p>使用线程池的优点：不用重复创造线程，节省时间，提高性能，方便访问和使用。</p>
</li>
</ul>
<h2 id="disadvantages-of-the-thread-pool"><strong>Disadvantages of the Thread Pool</strong></h2>
<ul>
<li>
<p>There is no control over the priority and state of the thread you are working with.</p>
</li>
<li>
<p>There is no stable identity given to the thread, no track can be kept.</p>
</li>
<li>
<p>When there is a high demand for the thread pool, the process may be deleted.</p>
</li>
<li>
<p>The thread pool can not work well when two threads are working in parallel.</p>
</li>
<li>
<p>There are several situations where the application code can be affected by another application code, despite robust application isolation.</p>
<p>线程池的缺点：无法控制线程的优先级，无法追踪线程，无法很好的执行并行线程工作。</p>
</li>
</ul>
<h2 id="risk-in-the-java-thread-pool"><strong>Risk in the Java Thread Pool</strong></h2>
<p>There are a few risks while you are dealing with the thread pool, like;</p>
<ul>
<li>
<p><strong>Thread Leakage:</strong> If a thread is removed from the pool to perform a task but not returned back to it when the task is completed, thread leakage occurs.</p>
<p>**线程泄漏：**如果线程从池中移除去执行任务但在任务完成时没有返回到它，则发生线程泄漏。</p>
</li>
<li>
<p><strong>Deadlock:</strong> In thread pool is executing thread is waiting for the output from the block the thread waiting in the queue due to unavailability of thread for execution, there’s a case of a deadlock.</p>
<p><strong>死锁：</strong> 在线程池里</p>
</li>
<li>
<p><strong>Resource Thrashing:</strong> More number of threads than the optimal number required can cause starvation problems leading to resource thrashing.</p>
<p>**资源抖动：**线程数超过所需的最佳数量会导致饥饿问题，从而导致资源抖动。</p>
</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Java Threads 6: Lock</title>
			<link>https://daiwei.dev/posts/java/thread6_lock/</link>
			<pubDate>Thu, 25 Nov 2021 10:10:07 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/java/thread6_lock/</guid>
			<description>1Module: java.base 2Package: java.util.concurrent.locks 3Interface Lock 4 5All Known Implementing Classes: 6ReentrantLock, ReentrantReadWriteLock.ReadLock, ReentrantReadWriteLock.WriteLock Lock实现提供了比使用synchronized方法和语句获得的更广泛的锁定操作。它们允许更灵活的结构，可能具有完全不同的属性，并且可能支持多个关联 Condition对象。
锁是用于控制多个线程对共享资源的访问的工具。通常，锁提供对共享资源的独占访问：一次只有一个线程可以获取锁，所有对共享资源的访问都需要先获取锁。但是，某些锁可能允许并发访问共享资源，例如ReadWriteLock.
synchronized方法或语句的使用提供对与每个对象关联的隐式监视器锁的访问，但强制所有锁的获取和释放以块结构的方式发生：当获取多个锁时，它们必须以相反的顺序释放，并且所有锁必须在获得它们的同一个词法范围内释放。
虽然synchronized方法和语句的作用域机制使使用监视器锁编程变得更加容易，并有助于避免许多涉及锁的常见编程错误，但在某些情况下，您需要以更灵活的方式使用锁。例如，一些遍历并发访问数据结构的算法需要使用“hand-over-hand”或“chainlocking”：你先获取节点A的锁，然后节点B，然后释放A，获取C，然后释放B并获得 D 等等。所述的实施方式中 Lock接口通过允许获得并在不同的范围释放的锁，并允许获得并以任何顺序释放多个锁使得能够使用这样的技术。
这种增加的灵活性带来了额外的责任。块结构锁的缺失消除了synchronized 方法和语句中发生的锁的自动释放。在大多数情况下，应使用以下习语：
1 Lock l = new Lock; 2 l.lock(); 3 try { 4 // access the resource protected by this lock 5 } finally { 6 l.unlock(); 7 } 当锁定和解锁发生在不同的作用域时，必须注意确保持有锁时执行的所有代码都受到 try-finally 或 try-catch 的保护，以确保在必要时释放锁。
1package lockTest; 2 3 4import java.util.concurrent.locks.ReentrantLock; 5 6/** 7* ConcurrentThread Safety 8* The solution 1: synchronized 9* The solution 2: lock 10*/ 11public class LockTest { 12 public static void main(String[] args) { 13 Window w = new Window(); 14 15 Thread t1 = new Thread(w); 16 Thread t2 = new Thread(w); 17 Thread t3 = new Thread(w); 18 19 t1.</description>
			<content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-apl" data-lang="apl"><span class="ln">1</span><span class="nv">Module</span><span class="bp">:</span> <span class="nv">java</span><span class="na">.</span><span class="nv">base</span>
<span class="ln">2</span><span class="nv">Package</span><span class="bp">:</span> <span class="nv">java</span><span class="na">.</span><span class="nv">util</span><span class="na">.</span><span class="nv">concurrent</span><span class="na">.</span><span class="nv">locks</span>
<span class="ln">3</span><span class="nv">Interface</span> <span class="nv">Lock</span>
<span class="ln">4</span>  
<span class="ln">5</span><span class="nv">All</span> <span class="nv">Known</span> <span class="nv">Implementing</span> <span class="nv">Classes</span><span class="bp">:</span>
<span class="ln">6</span><span class="nv">ReentrantLock</span><span class="o">,</span> <span class="nv">ReentrantReadWriteLock</span><span class="na">.</span><span class="nv">ReadLock</span><span class="o">,</span> <span class="nv">ReentrantReadWriteLock</span><span class="na">.</span><span class="nv">WriteLock</span>
</code></pre></div><p><code>Lock</code>实现提供了比使用<code>synchronized</code>方法和语句获得的更广泛的锁定操作。它们允许更灵活的结构，可能具有完全不同的属性，并且可能支持多个关联 <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/locks/Condition.html"><code>Condition</code></a>对象。</p>
<p>锁是用于控制多个线程对共享资源的访问的工具。通常，锁提供对共享资源的独占访问：一次只有一个线程可以获取锁，所有对共享资源的访问都需要先获取锁。但是，某些锁可能允许并发访问共享资源，例如<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/locks/ReadWriteLock.html"><code>ReadWriteLock</code></a>.</p>
<p><code>synchronized</code>方法或语句的使用提供对与每个对象关联的隐式监视器锁的访问，但强制所有锁的获取和释放以块结构的方式发生：当获取多个锁时，它们必须以相反的顺序释放，并且所有锁必须在获得它们的同一个词法范围内释放。</p>
<p>虽然<code>synchronized</code>方法和语句的作用域机制使使用监视器锁编程变得更加容易，并有助于避免许多涉及锁的常见编程错误，但在某些情况下，您需要以更灵活的方式使用锁。例如，一些遍历并发访问数据结构的算法需要使用“hand-over-hand”或“chainlocking”：你先获取节点A的锁，然后节点B，然后释放A，获取C，然后释放B并获得 D 等等。所述的实施方式中 <code>Lock</code>接口通过允许获得并在不同的范围释放的锁，并允许获得并以任何顺序释放多个锁使得能够使用这样的技术。</p>
<p>这种增加的灵活性带来了额外的责任。块结构锁的缺失消除了<code>synchronized</code> 方法和语句中发生的锁的自动释放。在大多数情况下，应使用以下习语：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span> <span class="n">Lock</span> <span class="n">l</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Lock</span><span class="o">;</span>
<span class="ln">2</span> <span class="n">l</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
<span class="ln">3</span> <span class="k">try</span> <span class="o">{</span>
<span class="ln">4</span>   <span class="c1">// access the resource protected by this lock
</span><span class="ln">5</span><span class="c1"></span> <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
<span class="ln">6</span>   <span class="n">l</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
<span class="ln">7</span> <span class="o">}</span>
</code></pre></div><p>当锁定和解锁发生在不同的作用域时，必须注意确保持有锁时执行的所有代码都受到 try-finally 或 try-catch 的保护，以确保在必要时释放锁。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kn">package</span> <span class="nn">lockTest</span><span class="o">;</span>
<span class="ln"> 2</span>
<span class="ln"> 3</span>
<span class="ln"> 4</span><span class="kn">import</span> <span class="nn">java.util.concurrent.locks.ReentrantLock</span><span class="o">;</span>
<span class="ln"> 5</span>
<span class="ln"> 6</span><span class="cm">/**
</span><span class="ln"> 7</span><span class="cm"> * ConcurrentThread Safety
</span><span class="ln"> 8</span><span class="cm"> * The solution 1: synchronized
</span><span class="ln"> 9</span><span class="cm"> * The solution 2: lock
</span><span class="ln">10</span><span class="cm"> */</span>
<span class="ln">11</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LockTest</span> <span class="o">{</span>
<span class="ln">12</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">13</span>        <span class="n">Window</span> <span class="n">w</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Window</span><span class="o">();</span>
<span class="ln">14</span>
<span class="ln">15</span>        <span class="n">Thread</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">w</span><span class="o">);</span>
<span class="ln">16</span>        <span class="n">Thread</span> <span class="n">t2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">w</span><span class="o">);</span>
<span class="ln">17</span>        <span class="n">Thread</span> <span class="n">t3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">w</span><span class="o">);</span>
<span class="ln">18</span>
<span class="ln">19</span>        <span class="n">t1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Window 1&#34;</span><span class="o">);</span>
<span class="ln">20</span>        <span class="n">t2</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Window 2&#34;</span><span class="o">);</span>
<span class="ln">21</span>        <span class="n">t3</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Window 3&#34;</span><span class="o">);</span>
<span class="ln">22</span>
<span class="ln">23</span>        <span class="n">t1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">24</span>        <span class="n">t2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">25</span>        <span class="n">t3</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">26</span>    <span class="o">}</span>
<span class="ln">27</span><span class="o">}</span>
<span class="ln">28</span>
<span class="ln">29</span>
<span class="ln">30</span><span class="kd">class</span> <span class="nc">Window</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
<span class="ln">31</span>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">tickets</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span>
<span class="ln">32</span>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ReentrantLock</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ReentrantLock</span><span class="o">();</span>
<span class="ln">33</span>
<span class="ln">34</span>    <span class="nd">@Override</span>
<span class="ln">35</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">36</span>        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">37</span>            <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
<span class="ln">38</span>            <span class="k">try</span> <span class="o">{</span>
<span class="ln">39</span>                <span class="k">if</span> <span class="o">(</span><span class="n">tickets</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">40</span>                    <span class="k">try</span> <span class="o">{</span>
<span class="ln">41</span>                        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">100</span><span class="o">);</span>
<span class="ln">42</span>                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">43</span>                        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">44</span>                    <span class="o">}</span>
<span class="ln">45</span>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34; sold ticket: &#34;</span> <span class="o">+</span> <span class="n">tickets</span><span class="o">);</span>
<span class="ln">46</span>                    <span class="n">tickets</span><span class="o">--;</span>
<span class="ln">47</span>                <span class="o">}</span> <span class="k">else</span> <span class="k">break</span><span class="o">;</span>
<span class="ln">48</span>            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
<span class="ln">49</span>                <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
<span class="ln">50</span>            <span class="o">}</span>
<span class="ln">51</span>        <span class="o">}</span>
<span class="ln">52</span>    <span class="o">}</span>
<span class="ln">53</span><span class="o">}</span>
</code></pre></div><h3 id="解决线程安全的方式有几种">解决线程安全的方式有几种？</h3>
<ol>
<li>synchronized
<ul>
<li>同步代码块 / 同步方法</li>
</ul>
</li>
<li>lock</li>
</ol>
<h3 id="sychronized-vs-lock">sychronized vs lock</h3>
<ul>
<li>
<p>sychonized 在执行完相应的同步代码块后，会自动释放同步监视器。</p>
<p>lock需要手动启动和停止同步锁<code>lock()/unlock()</code>。</p>
</li>
</ul>
<p>建议优先用lock，其实同步代码块，最后考虑同步方法。</p>
<h3 id="exercise">Exercise</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kn">package</span> <span class="nn">exercise</span><span class="o">;</span>
<span class="ln"> 2</span>
<span class="ln"> 3</span><span class="kn">import</span> <span class="nn">java.util.concurrent.locks.ReentrantLock</span><span class="o">;</span>
<span class="ln"> 4</span>
<span class="ln"> 5</span><span class="cm">/**
</span><span class="ln"> 6</span><span class="cm"> * 两位储户分别向同一银行账户存入3000，存3次，每次存1000并打印余额
</span><span class="ln"> 7</span><span class="cm"> * 1.是否是多线程问题？是，两位储户同时操作
</span><span class="ln"> 8</span><span class="cm"> * 2.是否共享数据？是，同一个银行账户
</span><span class="ln"> 9</span><span class="cm"> */</span>
<span class="ln">10</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AccountTest</span> <span class="o">{</span>
<span class="ln">11</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">12</span>        <span class="n">Account</span> <span class="n">acct</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Account</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>
<span class="ln">13</span>        <span class="n">Customer</span> <span class="n">c1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Customer</span><span class="o">(</span><span class="n">acct</span><span class="o">);</span>
<span class="ln">14</span>        <span class="n">Customer</span> <span class="n">c2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Customer</span><span class="o">(</span><span class="n">acct</span><span class="o">);</span>
<span class="ln">15</span>
<span class="ln">16</span>        <span class="n">c1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Jack&#34;</span><span class="o">);</span>
<span class="ln">17</span>        <span class="n">c2</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Rose&#34;</span><span class="o">);</span>
<span class="ln">18</span>
<span class="ln">19</span>        <span class="n">c1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">20</span>        <span class="n">c2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">21</span>    <span class="o">}</span>
<span class="ln">22</span><span class="o">}</span>
<span class="ln">23</span>
<span class="ln">24</span><span class="kd">class</span> <span class="nc">Account</span> <span class="o">{</span>
<span class="ln">25</span>    <span class="kd">private</span> <span class="kt">double</span> <span class="n">balance</span><span class="o">;</span>
<span class="ln">26</span>   
<span class="ln">27</span>    <span class="c1">//extend Thread 要用static 修饰 lock
</span><span class="ln">28</span><span class="c1"></span>    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">ReentrantLock</span> <span class="n">l</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ReentrantLock</span><span class="o">();</span>
<span class="ln">29</span>
<span class="ln">30</span>    <span class="kd">public</span> <span class="nf">Account</span> <span class="o">(</span><span class="kt">double</span> <span class="n">balance</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">31</span>        <span class="k">this</span><span class="o">.</span><span class="na">balance</span> <span class="o">=</span> <span class="n">balance</span><span class="o">;</span>
<span class="ln">32</span>    <span class="o">}</span>
<span class="ln">33</span>
<span class="ln">34</span>    <span class="c1">//同步方法 和 lock
</span><span class="ln">35</span><span class="c1"></span>    <span class="c1">//public synchronized void deposed (double amt) {
</span><span class="ln">36</span><span class="c1"></span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">deposed</span> <span class="o">(</span><span class="kt">double</span> <span class="n">amt</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">37</span>        <span class="k">if</span><span class="o">(</span><span class="n">amt</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">38</span>            <span class="n">l</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
<span class="ln">39</span>            <span class="k">try</span><span class="o">{</span>
<span class="ln">40</span>                <span class="n">balance</span><span class="o">+=</span><span class="n">amt</span><span class="o">;</span>
<span class="ln">41</span>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34; Deposed success, your balance: &#34;</span> <span class="o">+</span> <span class="n">balance</span><span class="o">);</span>
<span class="ln">42</span>
<span class="ln">43</span>                <span class="k">try</span> <span class="o">{</span>
<span class="ln">44</span>                    <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">1000</span><span class="o">);</span>
<span class="ln">45</span>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">46</span>                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">47</span>                <span class="o">}</span>
<span class="ln">48</span>            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
<span class="ln">49</span>                <span class="n">l</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
<span class="ln">50</span>            <span class="o">}</span>
<span class="ln">51</span>        <span class="o">}</span>
<span class="ln">52</span>    <span class="o">}</span>
<span class="ln">53</span><span class="o">}</span>
<span class="ln">54</span>
<span class="ln">55</span><span class="kd">class</span> <span class="nc">Customer</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
<span class="ln">56</span>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Account</span> <span class="n">acct</span><span class="o">;</span>
<span class="ln">57</span>
<span class="ln">58</span>    <span class="kd">public</span> <span class="nf">Customer</span><span class="o">(</span><span class="n">Account</span> <span class="n">acct</span><span class="o">){</span>
<span class="ln">59</span>        <span class="k">this</span><span class="o">.</span><span class="na">acct</span> <span class="o">=</span> <span class="n">acct</span><span class="o">;</span>
<span class="ln">60</span>    <span class="o">}</span>
<span class="ln">61</span>
<span class="ln">62</span>    <span class="nd">@Override</span>
<span class="ln">63</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(){</span>
<span class="ln">64</span>       <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">3</span><span class="o">;</span> <span class="n">i</span> <span class="o">++)</span>
<span class="ln">65</span>           <span class="n">acct</span><span class="o">.</span><span class="na">deposed</span><span class="o">(</span><span class="n">1000</span><span class="o">);</span>
<span class="ln">66</span>    <span class="o">}</span>
<span class="ln">67</span><span class="o">}</span>
</code></pre></div><h3 id="deadlock-vs-livelock-vs-starvation-死锁-vs-活锁-vs-饿死">Deadlock vs Livelock vs Starvation 死锁 VS 活锁 VS 饿死</h3>
<p><strong>Deadlock</strong> thread A waiting for thread B &amp;&amp; thread B also waiting for thread A, the dependence is a circular they are waiting each other. 死锁就像刚在一起的小情侣打电话，男生说：女生先挂电话，女生说：男生先挂电话，最后谁都不先挂电话，无解。。。</p>
<p><strong>死锁</strong> 是指两个或两个以上的线程在执行过程中，因争夺资源而造成的一种互相等待的现象，这些永远在互相等待的线程称为死锁。死锁就像是独木桥上的两人，互不相让，都想等对方退后，最后两个人都被困在桥上。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">synchronized</span> <span class="o">(</span><span class="n">objRef1</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 2</span>  <span class="kd">synchronized</span> <span class="o">(</span><span class="n">objRef2</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 3</span>    <span class="c1">//...
</span><span class="ln"> 4</span><span class="c1"></span>  <span class="o">}</span>
<span class="ln"> 5</span><span class="o">}</span>
<span class="ln"> 6</span>
<span class="ln"> 7</span><span class="kd">synchronized</span> <span class="o">(</span><span class="n">objRef2</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 8</span>  <span class="kd">synchronized</span> <span class="o">(</span><span class="n">objRef1</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 9</span>    <span class="c1">//...
</span><span class="ln">10</span><span class="c1"></span>  <span class="o">}</span>
<span class="ln">11</span><span class="o">}</span>
</code></pre></div><p><strong>Livelock</strong> thread are too busy to responding other threads to progress.</p>
<p><strong>活锁</strong> 线程没有被阻塞，由于某些条件没有满足，导致一直重复尝试，失败，尝试，失败。活锁就像是要过独木桥但还没上桥的两个人，相互礼让，都想让对方先过，最后两个人都过不了桥。</p>
<p><strong>Starvation</strong> 可运行的线程尽管可以执行，但被调度器无限期地忽视，而不能被调度执行一直处于等待状态的行为。饿死就像路人甲正要过独木桥回家吃饭，对面来了一群老大爷，路人甲让老人先过，接着又来一群小学生，路人甲有让小学生先过，最后天黑了路人甲还没能过桥饿死在桥边了。</p>
<p><strong>活锁和死锁的区别：</strong> 活锁的状态可以改变，有可能自行解开，死锁只能是等待状态，无法自行解开。</p>
<p><strong>产生死锁的必要条件</strong>：</p>
<ol>
<li>互斥使用（资源独占），一个资源每次只能给一个进程使用。</li>
<li>占有且等待，进程在申请新的资源的同时，保持对原有资源的占有。</li>
<li>不可抢占，资源申请者不能强行从资源占有者手中夺取资源，资源只能由占有者自愿释放。</li>
<li>循环等待，P1等待P2占有的资源，P2等待P3的资源，&hellip;Pn等待P1的资源，形成一个进程等待回路。</li>
</ol>
<p><strong>既然知道了出现死锁的必要条件，其实只要破坏其中一条就可避免死锁！</strong></p>
<p>其中，互斥这个条件我们没有办法破坏，因为我们用锁为的就是互斥。</p>
<p>对于<strong>占用且等待</strong>这个条件，我们可以<strong>一次性申请所有的资源</strong>，这样就不存在等待了。
对于<strong>不可抢占</strong>这个条件，占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源。
对于<strong>循环等待</strong>这个条件，可以按顺序申请资源来预防。所谓按序申请，是指资源是有线性顺序的，申请的时候可以先申请资源序号小的，再申请资源序号大的，这样线性化后自然就不存在循环了。</p>
<p><strong>如何解决活锁？</strong>  为线程增加一个随机等待时间，时间到了切换状态。</p>
<p><strong>如何解决饥饿？</strong></p>
<ol>
<li>增加供给，保证资源充足</li>
<li>公平地分配资源</li>
<li>避免持有锁的线程长时间执行</li>
</ol>
<h3 id="互斥锁">互斥锁</h3>
<p>当有一个线程要访问共享资源（临界资源）之前，会对线程访问的这段代码（临界区）进行加锁。如果在加锁之后没释放锁之前其他线程要对临界资源进行访问，则这些线程会被阻塞睡眠，直到解锁，如果解锁时有一个或者多个线程阻塞，那么这些锁上的线程就会变成就绪状态，然后第一个变为就绪状态的线程就会获取资源的使用权，并且再次加锁，其他线程继续阻塞等待。</p>
<h3 id="自旋锁">自旋锁</h3>
<p>自旋锁和互斥锁很像，唯一不同的是自旋锁访问加锁资源时，会一直循环的查看是否释放锁。这样要比互斥锁效率高很多，但是仍然需要占用CPU。如果线程竞争不激烈适合使用自旋锁。但是但当线程数不断增加时，性能下降明显，因为每个线程都需要执行，会占用大量CPU时间片，就不适用自旋锁了。</p>
<h3 id="悲观锁-pessimistic-lock">悲观锁 (Pessimistic Lock)</h3>
<ul>
<li>悲观锁认为自己在获取数据的时候一定有别的线程来修改数据，在获取数据的时候会先加锁，确保数据不会被别的线程修改</li>
<li>锁实现:Java中关键字synchronized、接口Lock的实现类</li>
<li>适用场景:写操作较多，先加锁可以保证写操作时数据正确</li>
</ul>
<h3 id="乐观锁-optimistic-lock">乐观锁 (Optimistic Lock)</h3>
<ul>
<li>乐观锁认为自已在获取数据时不会有别的线程修改数据，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据</li>
<li>锁实现: CAS算法， 例如AtomicInteger 类的原子自增是同过CAS自旋实现</li>
<li>适用场景:读操作较多，不加锁的特点能够使其读操作的性能大幅提升</li>
</ul>
<p><strong>乐观锁和悲观锁都是一种思想，并不是真实存在于数据库中的一种机制。</strong></p>
<h3 id="读写锁">读写锁</h3>
<p>也叫做共享互斥锁，读模式共享，写模式互斥。有点像数据库负载均衡的读写分离模式。它有三种模式：读加锁状态，写加锁状态和不加锁状态。简单来说就是只有一个线程可以占有写模式的读写锁，但是可以有多个线程占用读模式的读写锁。
当写加锁的模式下，任何线程对其进行加锁操作都会被阻塞，直到解锁。
当在读加锁的模式下，任何线程都可以对其进行读加锁的操作，但所有试图进行写加锁操作的线程都会被阻塞。直到所有读线程解锁。但是当读线程太多时，写线程一直被阻塞显然是不对的，所以一个线程想要对其进行写加锁时，就会阻塞读加锁，先让写加锁线程加锁</p>
<h3 id="公平锁fair-lock">公平锁(Fair Lock)</h3>
<p>加锁前检查是否有排队等待的线程，优先排队等待的线程，先来先得。</p>
<h3 id="非公平锁nonfair-lock">非公平锁(Nonfair Lock)</h3>
<p>加锁时不考虑排队等待问题，直接尝试获取锁，获取不到自动到队尾等待。</p>
]]></content>
		</item>
		
		<item>
			<title>Java Threads 5: Thread synchronized</title>
			<link>https://daiwei.dev/posts/java/thread5_synchronized/</link>
			<pubDate>Wed, 24 Nov 2021 13:16:20 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/java/thread5_synchronized/</guid>
			<description>1/** 2* 线程通信例子：两个线程交替打印 integer 1-10 3* 涉及3个方法： 4* wait(): 当前线程进入wait状态，并释放线程监视器。 5* notify(): 唤醒一个处于wait状态中优先级最高的线程。 6* notifyAll(): 唤醒所有处于wait状态的线程。 7* 8* 1. 3个方法都必须是用在同步代码块或者同步方法中。 9* 2. 3个方法的调用者必须是同步代码块或者同步方法中的同步监视器。 10* 3. 3个方法是定义在java.Lang.Object类中， 并不是 thread 类中。 11*/ 12public class CommunicationTest { 13 public static void main (String[] args) { 14 NumberPrinter n = new NumberPrinter(); 15 Thread t1 = new Thread(n); 16 Thread t2 = new Thread(n); 17 18 t1.start(); 19 t2.start(); 20 } 21} 22 23class NumberPrinter implements Runnable { 24 int i = 1; 25 26 @Override 27 public void run() { 28 while (true) { 29 synchronized (this) { 30 notify(); // 必须使用同步监视器this来调用，this.</description>
			<content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="cm">/**
</span><span class="ln"> 2</span><span class="cm"> * 线程通信例子：两个线程交替打印 integer 1-10
</span><span class="ln"> 3</span><span class="cm"> * 涉及3个方法：
</span><span class="ln"> 4</span><span class="cm"> * wait(): 当前线程进入wait状态，并释放线程监视器。
</span><span class="ln"> 5</span><span class="cm"> * notify(): 唤醒一个处于wait状态中优先级最高的线程。
</span><span class="ln"> 6</span><span class="cm"> * notifyAll(): 唤醒所有处于wait状态的线程。
</span><span class="ln"> 7</span><span class="cm"> *
</span><span class="ln"> 8</span><span class="cm"> * 1. 3个方法都必须是用在同步代码块或者同步方法中。
</span><span class="ln"> 9</span><span class="cm"> * 2. 3个方法的调用者必须是同步代码块或者同步方法中的同步监视器。
</span><span class="ln">10</span><span class="cm"> * 3. 3个方法是定义在java.Lang.Object类中， 并不是 thread 类中。
</span><span class="ln">11</span><span class="cm"> */</span>
<span class="ln">12</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CommunicationTest</span> <span class="o">{</span>
<span class="ln">13</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">14</span>        <span class="n">NumberPrinter</span> <span class="n">n</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NumberPrinter</span><span class="o">();</span>
<span class="ln">15</span>        <span class="n">Thread</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
<span class="ln">16</span>        <span class="n">Thread</span> <span class="n">t2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
<span class="ln">17</span>
<span class="ln">18</span>        <span class="n">t1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">19</span>        <span class="n">t2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">20</span>    <span class="o">}</span>
<span class="ln">21</span><span class="o">}</span>
<span class="ln">22</span>
<span class="ln">23</span><span class="kd">class</span> <span class="nc">NumberPrinter</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
<span class="ln">24</span>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
<span class="ln">25</span>  
<span class="ln">26</span>    <span class="nd">@Override</span>
<span class="ln">27</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">28</span>        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">29</span>            <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">30</span>                <span class="n">notify</span><span class="o">();</span> <span class="c1">// 必须使用同步监视器this来调用，this.notify = notify
</span><span class="ln">31</span><span class="c1"></span>                <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">10</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">32</span>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;: &#34;</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
<span class="ln">33</span>                    <span class="n">i</span><span class="o">++;</span>
<span class="ln">34</span>
<span class="ln">35</span>                    <span class="k">try</span> <span class="o">{</span>
<span class="ln">36</span>                        <span class="n">wait</span><span class="o">();</span> <span class="c1">//this.wait
</span><span class="ln">37</span><span class="c1"></span>                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">38</span>                        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">39</span>                    <span class="o">}</span>
<span class="ln">40</span>                <span class="o">}</span><span class="k">else</span> <span class="k">break</span><span class="o">;</span>
<span class="ln">41</span>            <span class="o">}</span>
<span class="ln">42</span>        <span class="o">}</span>
<span class="ln">43</span>    <span class="o">}</span>
<span class="ln">44</span><span class="o">}</span>
</code></pre></div><h2 id="sleep-vs-wait"><code>sleep()</code> vs <code>wait()</code></h2>
<p>**相同点：**都可以让线程进入block状态。</p>
<p><strong>不同点：</strong></p>
<ol>
<li>声明位置不同：thread类中声明<code>sleep()</code>, object类中声明<code>wait()</code>;</li>
<li>调用要求不同：<code>sleep()</code>可在任何地方调用，<code>wait()</code>只能在同步代码块或方法中调用；</li>
<li><code>sleep()</code>不会释放同步监视器，<code>wait()</code>会释放同步监视器。</li>
</ol>
<h2 id="生产者-消费者问题">生产者-消费者问题</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kn">package</span> <span class="nn">communicationTest</span><span class="o">;</span>
<span class="ln"> 2</span>
<span class="ln"> 3</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductTest</span> <span class="o">{</span>
<span class="ln"> 4</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 5</span>        <span class="n">Clerk</span> <span class="n">clerk</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Clerk</span><span class="o">();</span>
<span class="ln"> 6</span>        <span class="n">Producer</span> <span class="n">p1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Producer</span><span class="o">(</span><span class="n">clerk</span><span class="o">);</span>
<span class="ln"> 7</span>        <span class="n">Consumer</span> <span class="n">c1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Consumer</span><span class="o">(</span><span class="n">clerk</span><span class="o">);</span>
<span class="ln"> 8</span>        <span class="n">Consumer</span> <span class="n">c2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Consumer</span><span class="o">(</span><span class="n">clerk</span><span class="o">);</span>
<span class="ln"> 9</span>
<span class="ln">10</span>        <span class="n">p1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;p1&#34;</span><span class="o">);</span>
<span class="ln">11</span>        <span class="n">c1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;c1&#34;</span><span class="o">);</span>
<span class="ln">12</span>        <span class="n">c2</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;c2&#34;</span><span class="o">);</span>
<span class="ln">13</span>
<span class="ln">14</span>        <span class="n">p1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">15</span>        <span class="n">c1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">16</span>        <span class="n">c2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">17</span>    <span class="o">}</span>
<span class="ln">18</span><span class="o">}</span>
<span class="ln">19</span>
<span class="ln">20</span><span class="kd">class</span> <span class="nc">Clerk</span> <span class="o">{</span>
<span class="ln">21</span>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">production</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
<span class="ln">22</span>
<span class="ln">23</span>    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">produceProduct</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">24</span>        <span class="k">if</span><span class="o">(</span><span class="n">production</span> <span class="o">&lt;</span> <span class="n">20</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">25</span>            <span class="n">production</span><span class="o">++;</span>
<span class="ln">26</span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;: START PRODUCE&#34;</span> <span class="o">+</span> <span class="n">production</span><span class="o">);</span>
<span class="ln">27</span>            <span class="n">notify</span><span class="o">();</span>
<span class="ln">28</span>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="ln">29</span>            <span class="k">try</span> <span class="o">{</span>
<span class="ln">30</span>                <span class="n">wait</span><span class="o">();</span>
<span class="ln">31</span>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">32</span>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">33</span>            <span class="o">}</span>
<span class="ln">34</span>        <span class="o">}</span>
<span class="ln">35</span>    <span class="o">}</span>
<span class="ln">36</span>
<span class="ln">37</span>    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">consumeProduct</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">38</span>        <span class="k">if</span><span class="o">(</span><span class="n">production</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">39</span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;: START consume&#34;</span> <span class="o">+</span> <span class="n">production</span><span class="o">);</span>
<span class="ln">40</span>            <span class="n">production</span><span class="o">--;</span>
<span class="ln">41</span>            <span class="n">notify</span><span class="o">();</span>
<span class="ln">42</span>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="ln">43</span>            <span class="k">try</span> <span class="o">{</span>
<span class="ln">44</span>                <span class="n">wait</span><span class="o">();</span>
<span class="ln">45</span>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">46</span>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">47</span>            <span class="o">}</span>
<span class="ln">48</span>        <span class="o">}</span>
<span class="ln">49</span>    <span class="o">}</span>
<span class="ln">50</span><span class="o">}</span>
<span class="ln">51</span>
<span class="ln">52</span><span class="kd">class</span> <span class="nc">Producer</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
<span class="ln">53</span>    <span class="kd">private</span> <span class="n">Clerk</span> <span class="n">clerk</span><span class="o">;</span>
<span class="ln">54</span>
<span class="ln">55</span>    <span class="kd">public</span> <span class="nf">Producer</span> <span class="o">(</span><span class="n">Clerk</span> <span class="n">clerk</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">56</span>        <span class="k">this</span><span class="o">.</span><span class="na">clerk</span> <span class="o">=</span> <span class="n">clerk</span><span class="o">;</span>
<span class="ln">57</span>    <span class="o">}</span>
<span class="ln">58</span>
<span class="ln">59</span>    <span class="nd">@Override</span>
<span class="ln">60</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">61</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;Start produce...&#34;</span><span class="o">);</span>
<span class="ln">62</span>
<span class="ln">63</span>        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">64</span>            <span class="n">clerk</span><span class="o">.</span><span class="na">produceProduct</span><span class="o">();</span>
<span class="ln">65</span>        <span class="o">}</span>
<span class="ln">66</span>    <span class="o">}</span>
<span class="ln">67</span>
<span class="ln">68</span><span class="o">}</span>
<span class="ln">69</span>
<span class="ln">70</span><span class="kd">class</span> <span class="nc">Consumer</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
<span class="ln">71</span>    <span class="kd">private</span> <span class="n">Clerk</span> <span class="n">clerk</span><span class="o">;</span>
<span class="ln">72</span>
<span class="ln">73</span>    <span class="kd">public</span> <span class="nf">Consumer</span> <span class="o">(</span><span class="n">Clerk</span> <span class="n">clerk</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">74</span>        <span class="k">this</span><span class="o">.</span><span class="na">clerk</span> <span class="o">=</span> <span class="n">clerk</span><span class="o">;</span>
<span class="ln">75</span>    <span class="o">}</span>
<span class="ln">76</span>
<span class="ln">77</span>    <span class="nd">@Override</span>
<span class="ln">78</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">79</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;Start consume...&#34;</span><span class="o">);</span>
<span class="ln">80</span>
<span class="ln">81</span>        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">82</span>            <span class="n">clerk</span><span class="o">.</span><span class="na">consumeProduct</span><span class="o">();</span>
<span class="ln">83</span>        <span class="o">}</span>
<span class="ln">84</span>    <span class="o">}</span>
<span class="ln">85</span><span class="o">}</span>
</code></pre></div><h3 id="notify-vs-notifyall"><code>notify()</code> vs <code>notifyAll()</code></h3>
<ul>
<li>notify(): 唤醒 <strong>一个</strong> 处于wait状态中<strong>优先级最高</strong>的线程。</li>
<li>notifyAll(): 唤醒 <strong>所有</strong> 处于wait状态的线程。</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Java Threads 4:Threads Safety</title>
			<link>https://daiwei.dev/posts/java/thread4_safety/</link>
			<pubDate>Tue, 23 Nov 2021 12:08:57 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/java/thread4_safety/</guid>
			<description>Unsafe threads in tickets system 不安全线程:
1public class WindowTest2 { 2 public static void main (String[] args) { 3 Window2 w = new Window2(); 4 5 Thread t1 = new Thread (w); 6 Thread t2 = new Thread (w); 7 Thread t3 = new Thread (w); 8 9 t1.setName(&amp;#34;Window_1&amp;#34;); 10 t2.setName(&amp;#34;Window_2&amp;#34;); 11 t3.setName(&amp;#34;Window_3&amp;#34;); 12 13 t1.start(); 14 t2.start(); 15 t3.start(); 16 } 17} 18 19class Window2 implements Runnable { 20 private int tickets = 100; 21 22 @Override 23 public void run() { 24 while(true) { 25 if(tickets &amp;gt; 0) { 26 try { 27 Thread.</description>
			<content type="html"><![CDATA[<p>Unsafe threads in tickets system 不安全线程:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WindowTest2</span> <span class="o">{</span>
<span class="ln"> 2</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 3</span>        <span class="n">Window2</span> <span class="n">w</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Window2</span><span class="o">();</span>
<span class="ln"> 4</span>
<span class="ln"> 5</span>        <span class="n">Thread</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span> <span class="o">(</span><span class="n">w</span><span class="o">);</span>
<span class="ln"> 6</span>        <span class="n">Thread</span> <span class="n">t2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span> <span class="o">(</span><span class="n">w</span><span class="o">);</span>
<span class="ln"> 7</span>        <span class="n">Thread</span> <span class="n">t3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span> <span class="o">(</span><span class="n">w</span><span class="o">);</span>
<span class="ln"> 8</span>
<span class="ln"> 9</span>        <span class="n">t1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Window_1&#34;</span><span class="o">);</span>
<span class="ln">10</span>        <span class="n">t2</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Window_2&#34;</span><span class="o">);</span>
<span class="ln">11</span>        <span class="n">t3</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Window_3&#34;</span><span class="o">);</span>
<span class="ln">12</span>
<span class="ln">13</span>        <span class="n">t1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">14</span>        <span class="n">t2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">15</span>        <span class="n">t3</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">16</span>    <span class="o">}</span>
<span class="ln">17</span><span class="o">}</span>
<span class="ln">18</span>
<span class="ln">19</span><span class="kd">class</span> <span class="nc">Window2</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
<span class="ln">20</span>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">tickets</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span>
<span class="ln">21</span>
<span class="ln">22</span>    <span class="nd">@Override</span>
<span class="ln">23</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">24</span>        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">25</span>            <span class="k">if</span><span class="o">(</span><span class="n">tickets</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">26</span>                <span class="k">try</span> <span class="o">{</span>
<span class="ln">27</span>                    <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">100</span><span class="o">);</span> <span class="c1">// sleep for amplified the threads bug
</span><span class="ln">28</span><span class="c1"></span>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">29</span>                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">30</span>                <span class="o">}</span>
<span class="ln">31</span>              
<span class="ln">32</span>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34; has sold ticket No : &#34;</span> <span class="o">+</span> <span class="n">tickets</span><span class="o">);</span>
<span class="ln">33</span>                <span class="n">tickets</span><span class="o">--;</span>
<span class="ln">34</span>            <span class="o">}</span> <span class="k">else</span> <span class="k">break</span><span class="o">;</span>
<span class="ln">35</span>        <span class="o">}</span>
<span class="ln">36</span>    <span class="o">}</span>
<span class="ln">37</span><span class="o">}</span>
</code></pre></div><p>运行结果：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="o">&gt;</span> <span class="n">Task</span> <span class="o">:</span><span class="n">WindowTest2</span><span class="o">.</span><span class="na">main</span><span class="o">()</span>
<span class="ln"> 2</span><span class="n">Window_3</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">100</span> <span class="c1">// duplicate ticket
</span><span class="ln"> 3</span><span class="c1"></span><span class="n">Window_2</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">100</span> <span class="c1">// duplicate ticket
</span><span class="ln"> 4</span><span class="c1"></span><span class="n">Window_1</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">100</span> <span class="c1">// duplicate ticket
</span><span class="ln"> 5</span><span class="c1"></span><span class="n">Window_2</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">98</span>
<span class="ln"> 6</span><span class="n">Window_3</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">99</span>
<span class="ln"> 7</span><span class="n">Window_2</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">96</span>
<span class="ln"> 8</span>  <span class="o">...</span>
<span class="ln"> 9</span><span class="n">Window_2</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">3</span>
<span class="ln">10</span><span class="n">Window_3</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">2</span>
<span class="ln">11</span><span class="n">Window_1</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">1</span> <span class="c1">// duplicate ticket
</span><span class="ln">12</span><span class="c1"></span><span class="n">Window_2</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">1</span> <span class="c1">// duplicate ticket
</span><span class="ln">13</span><span class="c1"></span><span class="n">Window_3</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="o">-</span><span class="n">1</span> <span class="c1">// illegal ticket
</span></code></pre></div><ul>
<li>Problem: in ticket sysytem appear duplicate &amp; illegal ticket.</li>
<li>Reason: During 1 thread havn&rsquo;t finish job other threads access and working also.</li>
<li>Solution: When 1 thread havn&rsquo;t finish  job other threads will be block.</li>
</ul>
<p>Java有两种方法解决线程安全问题：</p>
<h4 id="同步代码块-synchronize同步监视器俗称锁">同步代码块 <strong>synchronize</strong>(同步监视器：俗称锁🔒)</h4>
<ul>
<li>
<p>需要被同步的代码，操作共享数据的代码即为需要被同步的代码。</p>
</li>
<li>
<p>任何object都可以充当锁，所有线程必须使用同样的锁。</p>
</li>
</ul>
<p>缺点： 只可以单线程执行，其他线程等待，效率低。</p>
<p><strong>extends Threads 同步代码块</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">class</span> <span class="nc">Window1</span> <span class="kd">extends</span> <span class="n">Threads</span> <span class="o">{</span>
<span class="ln"> 2</span>  <span class="o">...</span>
<span class="ln"> 3</span>    <span class="c1">// private static Object = new Object;
</span><span class="ln"> 4</span><span class="c1"></span>    <span class="n">pulic</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln"> 5</span>        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 6</span>          <span class="c1">//synchronized (obj) 新建一个静态对象来充当锁
</span><span class="ln"> 7</span><span class="c1"></span>            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">Window1</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span> <span class="c1">//同步代码块监视器：Window1.class
</span><span class="ln"> 8</span><span class="c1"></span>              <span class="c1">//类也是一种对象，直接用类来充当锁，只会加载一次。
</span><span class="ln"> 9</span><span class="c1"></span>              <span class="o">....</span>
<span class="ln">10</span>            <span class="o">}</span>
<span class="ln">11</span>        <span class="o">}</span>
<span class="ln">12</span>  <span class="o">}</span>
</code></pre></div><p><strong>implements Runnable 同步代码块</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">class</span> <span class="nc">Window2</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
<span class="ln"> 2</span>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">tickets</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span>
<span class="ln"> 3</span>
<span class="ln"> 4</span>    <span class="nd">@Override</span>
<span class="ln"> 5</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln"> 6</span>        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 7</span>            <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span> <span class="c1">//同步代码块监视器：this 表示使用当前对象Window2 充当线程锁
</span><span class="ln"> 8</span><span class="c1"></span>                <span class="k">if</span> <span class="o">(</span><span class="n">tickets</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 9</span>                    <span class="k">try</span> <span class="o">{</span>
<span class="ln">10</span>                        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">100</span><span class="o">);</span>
<span class="ln">11</span>                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">12</span>                        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">13</span>                    <span class="o">}</span>
<span class="ln">14</span>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34; has sold ticket No : &#34;</span> <span class="o">+</span> <span class="n">tickets</span><span class="o">);</span>
<span class="ln">15</span>                    <span class="n">tickets</span><span class="o">--;</span>
<span class="ln">16</span>                <span class="o">}</span> <span class="k">else</span> <span class="k">break</span><span class="o">;</span>
<span class="ln">17</span>            <span class="o">}</span>
<span class="ln">18</span>        <span class="o">}</span>
<span class="ln">19</span>    <span class="o">}</span>
<span class="ln">20</span><span class="o">}</span>
</code></pre></div><p>Result:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">Window_1</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">100</span>
<span class="ln">2</span><span class="n">Window_1</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">99</span>
<span class="ln">3</span><span class="n">Window_1</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">98</span>
<span class="ln">4</span>  <span class="o">...</span>
<span class="ln">5</span><span class="n">Window_1</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">2</span>
<span class="ln">6</span><span class="n">Window_1</span> <span class="n">has</span> <span class="n">sold</span> <span class="n">ticket</span> <span class="n">No</span> <span class="o">:</span> <span class="n">1</span>
</code></pre></div><h4 id="同步方法">同步方法</h4>
<p><strong>extends Thread 同步方法</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">class</span> <span class="nc">Window3</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
<span class="ln"> 2</span>    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">tickets</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span>
<span class="ln"> 3</span>
<span class="ln"> 4</span>    <span class="nd">@Override</span>
<span class="ln"> 5</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln"> 6</span>        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 7</span>            <span class="n">show</span><span class="o">();</span> <span class="c1">// 调用静态方法
</span><span class="ln"> 8</span><span class="c1"></span>            <span class="o">}</span>
<span class="ln"> 9</span>        <span class="o">}</span>
<span class="ln">10</span>
<span class="ln">11</span>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">show</span><span class="o">()</span> <span class="o">{</span> <span class="c1">// 同步方法监视器：this
</span><span class="ln">12</span><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">tickets</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">13</span>            <span class="k">try</span> <span class="o">{</span>
<span class="ln">14</span>                <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">100</span><span class="o">);</span>
<span class="ln">15</span>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">16</span>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">17</span>            <span class="o">}</span>
<span class="ln">18</span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34; has sold ticket No : &#34;</span> <span class="o">+</span> <span class="n">tickets</span><span class="o">);</span>
<span class="ln">19</span>            <span class="n">tickets</span><span class="o">--;</span>
<span class="ln">20</span>        <span class="o">}</span>
<span class="ln">21</span>    <span class="o">}</span>
<span class="ln">22</span><span class="o">}</span>
</code></pre></div><p><strong>implements Runnable 同步方法</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">class</span> <span class="nc">Window4</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
<span class="ln"> 2</span>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">tickets</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span>
<span class="ln"> 3</span>
<span class="ln"> 4</span>    <span class="nd">@Override</span>
<span class="ln"> 5</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln"> 6</span>        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 7</span>            <span class="n">show</span><span class="o">();</span> <span class="c1">// 调用方法
</span><span class="ln"> 8</span><span class="c1"></span>        <span class="o">}</span>
<span class="ln"> 9</span>    <span class="o">}</span>
<span class="ln">10</span>
<span class="ln">11</span>    <span class="kd">private</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">show</span><span class="o">()</span> <span class="o">{</span> <span class="c1">//同步方法监视器：Window4.class
</span><span class="ln">12</span><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">tickets</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">13</span>            <span class="k">try</span> <span class="o">{</span>
<span class="ln">14</span>                <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">100</span><span class="o">);</span>
<span class="ln">15</span>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">16</span>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">17</span>            <span class="o">}</span>
<span class="ln">18</span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34; has sold ticket No : &#34;</span> <span class="o">+</span> <span class="n">tickets</span><span class="o">);</span>
<span class="ln">19</span>            <span class="n">tickets</span><span class="o">--;</span>
<span class="ln">20</span>        <span class="o">}</span>
<span class="ln">21</span>    <span class="o">}</span>
<span class="ln">22</span><span class="o">}</span>
</code></pre></div><p>懒汉式线程安全</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kn">package</span> <span class="nn">BankTest</span><span class="o">;</span>
<span class="ln"> 2</span>
<span class="ln"> 3</span><span class="c1">//懒汉式线程安全
</span><span class="ln"> 4</span><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BankTest1</span> <span class="o">{</span>
<span class="ln"> 5</span><span class="o">}</span>
<span class="ln"> 6</span>
<span class="ln"> 7</span><span class="kd">class</span> <span class="nc">Bank</span> <span class="o">{</span>
<span class="ln"> 8</span>    <span class="kd">private</span> <span class="nf">Bank</span><span class="o">(){}</span>
<span class="ln"> 9</span>
<span class="ln">10</span>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Bank</span> <span class="n">instance</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="ln">11</span>
<span class="ln">12</span>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">Bank</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">13</span>      <span class="c1">//先判断instance 是否等于 null，可以减少多线程重复判断问题，提升效率
</span><span class="ln">14</span><span class="c1"></span>        <span class="k">if</span><span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> 
<span class="ln">15</span>            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">Bank</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">16</span>                <span class="k">if</span><span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bank</span><span class="o">();</span>
<span class="ln">17</span>            <span class="o">}</span>
<span class="ln">18</span>        <span class="o">}</span>
<span class="ln">19</span>        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
<span class="ln">20</span>    <span class="o">}</span>
<span class="ln">21</span><span class="o">}</span>
</code></pre></div><h3 id="deadlock-死锁">Deadlock 死锁</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kn">package</span> <span class="nn">BankTest</span><span class="o">;</span>
<span class="ln"> 2</span>
<span class="ln"> 3</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadTest</span> <span class="o">{</span>
<span class="ln"> 4</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 5</span>        <span class="n">StringBuffer</span> <span class="n">s1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>
<span class="ln"> 6</span>        <span class="n">StringBuffer</span> <span class="n">s2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>
<span class="ln"> 7</span>
<span class="ln"> 8</span>      <span class="c1">// thread1先拿锁s1然后sleep 0.1s，然后换锁s2 
</span><span class="ln"> 9</span><span class="c1"></span>        <span class="k">new</span> <span class="n">Thread</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">10</span>            <span class="nd">@Override</span>
<span class="ln">11</span>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">12</span>                <span class="kd">synchronized</span> <span class="o">(</span><span class="n">s1</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">13</span>                    <span class="n">s1</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">);</span>
<span class="ln">14</span>                    <span class="n">s2</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;1&#34;</span><span class="o">);</span>
<span class="ln">15</span>
<span class="ln">16</span>                    <span class="k">try</span> <span class="o">{</span>
<span class="ln">17</span>                        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">100</span><span class="o">);</span>
<span class="ln">18</span>                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">19</span>                        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">20</span>                    <span class="o">}</span>
<span class="ln">21</span>
<span class="ln">22</span>                    <span class="kd">synchronized</span> <span class="o">(</span><span class="n">s2</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">23</span>                        <span class="n">s1</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;b&#34;</span><span class="o">);</span>
<span class="ln">24</span>                        <span class="n">s2</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;2&#34;</span><span class="o">);</span>
<span class="ln">25</span>
<span class="ln">26</span>                        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span><span class="o">);</span>
<span class="ln">27</span>                        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s2</span><span class="o">);</span>
<span class="ln">28</span>                    <span class="o">}</span>
<span class="ln">29</span>                <span class="o">}</span>
<span class="ln">30</span>            <span class="o">}</span>
<span class="ln">31</span>        <span class="o">}.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">32</span>      <span class="c1">// thread2 先拿锁s2 然后sleep 0.1s 然后换锁s1
</span><span class="ln">33</span><span class="c1"></span>      <span class="c1">// 等两个线程苏醒后，都拿不到彼此想要的锁，就变成了死锁
</span><span class="ln">34</span><span class="c1"></span>        <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">35</span>            <span class="nd">@Override</span>
<span class="ln">36</span>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">37</span>                <span class="kd">synchronized</span> <span class="o">(</span><span class="n">s2</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">38</span>                    <span class="n">s1</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;c&#34;</span><span class="o">);</span>
<span class="ln">39</span>                    <span class="n">s2</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;3&#34;</span><span class="o">);</span>
<span class="ln">40</span>
<span class="ln">41</span>                    <span class="k">try</span> <span class="o">{</span>
<span class="ln">42</span>                        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">100</span><span class="o">);</span>
<span class="ln">43</span>                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">44</span>                        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">45</span>                    <span class="o">}</span>
<span class="ln">46</span>
<span class="ln">47</span>                    <span class="kd">synchronized</span> <span class="o">(</span><span class="n">s1</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">48</span>                        <span class="n">s1</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;d&#34;</span><span class="o">);</span>
<span class="ln">49</span>                        <span class="n">s2</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;4&#34;</span><span class="o">);</span>
<span class="ln">50</span>
<span class="ln">51</span>                        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span><span class="o">);</span>
<span class="ln">52</span>                        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s2</span><span class="o">);</span>
<span class="ln">53</span>                    <span class="o">}</span>
<span class="ln">54</span>                <span class="o">}</span>
<span class="ln">55</span>            <span class="o">}</span>
<span class="ln">56</span>        <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
<span class="ln">57</span>    <span class="o">}</span>
<span class="ln">58</span><span class="o">}</span>
<span class="ln">59</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Java Threads 3: threadpool</title>
			<link>https://daiwei.dev/posts/java/thread3_threadpool/</link>
			<pubDate>Mon, 22 Nov 2021 15:57:02 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/java/thread3_threadpool/</guid>
			<description>提前建好多个线程放入线程池中，使用时直接获取。避免频繁创建销毁线程，实现线程重复利用。
线程池类似公交车🚌，每个人都可以按自己的需选择乘坐任何一辆公交车。
好处：
 建好线程创建时间，提高程序相应速度。 线程可重复利用，降低系统资源消耗。 便于线程管理，提高编程效率。  线程池API:
 ExecutorService 线程池接口，常见子类 ThreadPoolExecutor Executor 工具类，线程池工厂类，用于创建并返回不同类型的线程。  1package threadpool; 2 3import java.util.concurrent.ExecutorService; 4import java.util.concurrent.Executors; 5import java.util.concurrent.ThreadPoolExecutor; 6import java.util.concurrent.TimeUnit; 7 8/** 9* 线程创建方式4： ThreadPool 10*/ 11public class ThreadPool { 12 public static void main(String[] args) { 13 ExecutorService service = Executors.newScheduledThreadPool(10); 14 15 //设置线程池属性，先把ExecutorService 转换成 ThreadPoolExecutor 16 //ThreadPoolExecutor service1 = (ThreadPoolExecutor) service; 17 //service1.setCorePoolSize(5); 18 //service1.setKeepAliveTime(100, TimeUnit.MILLISECONDS); 19 20 //service.submit(Callable callable);//适合适用于Callable 21 service.</description>
			<content type="html"><![CDATA[<p>提前建好多个线程放入线程池中，使用时直接获取。避免频繁创建销毁线程，实现线程重复利用。</p>
<p>线程池类似公交车🚌，每个人都可以按自己的需选择乘坐任何一辆公交车。</p>
<p>好处：</p>
<ol>
<li>建好线程创建时间，提高程序相应速度。</li>
<li>线程可重复利用，降低系统资源消耗。</li>
<li>便于线程管理，提高编程效率。</li>
</ol>
<p>线程池API:</p>
<ol>
<li>ExecutorService 线程池接口，常见子类 ThreadPoolExecutor</li>
<li>Executor 工具类，线程池工厂类，用于创建并返回不同类型的线程。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kn">package</span> <span class="nn">threadpool</span><span class="o">;</span>
<span class="ln"> 2</span>
<span class="ln"> 3</span><span class="kn">import</span> <span class="nn">java.util.concurrent.ExecutorService</span><span class="o">;</span>
<span class="ln"> 4</span><span class="kn">import</span> <span class="nn">java.util.concurrent.Executors</span><span class="o">;</span>
<span class="ln"> 5</span><span class="kn">import</span> <span class="nn">java.util.concurrent.ThreadPoolExecutor</span><span class="o">;</span>
<span class="ln"> 6</span><span class="kn">import</span> <span class="nn">java.util.concurrent.TimeUnit</span><span class="o">;</span>
<span class="ln"> 7</span>
<span class="ln"> 8</span><span class="cm">/**
</span><span class="ln"> 9</span><span class="cm"> * 线程创建方式4： ThreadPool
</span><span class="ln">10</span><span class="cm"> */</span>
<span class="ln">11</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadPool</span> <span class="o">{</span>
<span class="ln">12</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">13</span>        <span class="n">ExecutorService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newScheduledThreadPool</span><span class="o">(</span><span class="n">10</span><span class="o">);</span>
<span class="ln">14</span>
<span class="ln">15</span>        <span class="c1">//设置线程池属性，先把ExecutorService 转换成 ThreadPoolExecutor
</span><span class="ln">16</span><span class="c1"></span>        <span class="c1">//ThreadPoolExecutor service1 = (ThreadPoolExecutor) service;
</span><span class="ln">17</span><span class="c1"></span>        <span class="c1">//service1.setCorePoolSize(5);
</span><span class="ln">18</span><span class="c1"></span>        <span class="c1">//service1.setKeepAliveTime(100, TimeUnit.MILLISECONDS);
</span><span class="ln">19</span><span class="c1"></span>
<span class="ln">20</span>        <span class="c1">//service.submit(Callable callable);//适合适用于Callable
</span><span class="ln">21</span><span class="c1"></span>        <span class="n">service</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">NumberThread1</span><span class="o">());</span><span class="c1">//适合使用于Runnable
</span><span class="ln">22</span><span class="c1"></span>        <span class="n">service</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">NumberThread2</span><span class="o">());</span>
<span class="ln">23</span>
<span class="ln">24</span>        <span class="n">service</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span><span class="c1">//关闭线程池
</span><span class="ln">25</span><span class="c1"></span>    <span class="o">}</span>
<span class="ln">26</span><span class="o">}</span>
<span class="ln">27</span>
<span class="ln">28</span><span class="kd">class</span> <span class="nc">NumberThread1</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
<span class="ln">29</span>
<span class="ln">30</span>    <span class="nd">@Override</span>
<span class="ln">31</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">32</span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
<span class="ln">33</span>            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">2</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">34</span>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;: &#34;</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
<span class="ln">35</span>            <span class="o">}</span>
<span class="ln">36</span>        <span class="o">}</span>
<span class="ln">37</span>    <span class="o">}</span>
<span class="ln">38</span><span class="o">}</span>
<span class="ln">39</span>
<span class="ln">40</span><span class="kd">class</span> <span class="nc">NumberThread2</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
<span class="ln">41</span>
<span class="ln">42</span>    <span class="nd">@Override</span>
<span class="ln">43</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">44</span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
<span class="ln">45</span>            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">2</span> <span class="o">!=</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">46</span>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;: &#34;</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
<span class="ln">47</span>            <span class="o">}</span>
<span class="ln">48</span>        <span class="o">}</span>
<span class="ln">49</span>    <span class="o">}</span>
<span class="ln">50</span><span class="o">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Java Threads 2: Callable</title>
			<link>https://daiwei.dev/posts/java/thread2_callable/</link>
			<pubDate>Sun, 21 Nov 2021 15:39:23 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/java/thread2_callable/</guid>
			<description>1package callableTest; 2 3import java.util.concurrent.Callable; 4import java.util.concurrent.ExecutionException; 5import java.util.concurrent.FutureTask; 6 7/** 8* 创建线程方式3：实现 callable 接口。-----JDK5.0新增 9*/ 10public class ThreadNew { 11 public static void main (String[] arg) { 12 NumThread num = new NumThread(); 13 14 // Future接口可以对Runnable, callable的执行结果进行取消，查询和获取。 15 // FutureTask 同时实现了Runnable &amp;amp; Future接口， 16 // 既可作为线程被Runnable执行，又可以作为Future得到Callable的返回值。 17 FutureTask&amp;lt;Integer&amp;gt; futureTask = new FutureTask&amp;lt;&amp;gt;(num); 18 19 new Thread(futureTask).start(); 20 21 try { 22 //get()返回值即callable实现类override call() 返回值 23 Integer sum = futureTask.</description>
			<content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kn">package</span> <span class="nn">callableTest</span><span class="o">;</span>
<span class="ln"> 2</span>
<span class="ln"> 3</span><span class="kn">import</span> <span class="nn">java.util.concurrent.Callable</span><span class="o">;</span>
<span class="ln"> 4</span><span class="kn">import</span> <span class="nn">java.util.concurrent.ExecutionException</span><span class="o">;</span>
<span class="ln"> 5</span><span class="kn">import</span> <span class="nn">java.util.concurrent.FutureTask</span><span class="o">;</span>
<span class="ln"> 6</span>
<span class="ln"> 7</span><span class="cm">/**
</span><span class="ln"> 8</span><span class="cm"> * 创建线程方式3：实现 callable 接口。-----JDK5.0新增
</span><span class="ln"> 9</span><span class="cm"> */</span>
<span class="ln">10</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadNew</span> <span class="o">{</span>
<span class="ln">11</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">arg</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">12</span>        <span class="n">NumThread</span> <span class="n">num</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NumThread</span><span class="o">();</span>
<span class="ln">13</span>
<span class="ln">14</span>        <span class="c1">// Future接口可以对Runnable, callable的执行结果进行取消，查询和获取。
</span><span class="ln">15</span><span class="c1"></span>        <span class="c1">// FutureTask 同时实现了Runnable &amp; Future接口，
</span><span class="ln">16</span><span class="c1"></span>        <span class="c1">// 既可作为线程被Runnable执行，又可以作为Future得到Callable的返回值。
</span><span class="ln">17</span><span class="c1"></span>        <span class="n">FutureTask</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">futureTask</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FutureTask</span><span class="o">&lt;&gt;(</span><span class="n">num</span><span class="o">);</span>
<span class="ln">18</span>
<span class="ln">19</span>        <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">futureTask</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
<span class="ln">20</span>
<span class="ln">21</span>        <span class="k">try</span> <span class="o">{</span>
<span class="ln">22</span>            <span class="c1">//get()返回值即callable实现类override call() 返回值
</span><span class="ln">23</span><span class="c1"></span>            <span class="n">Integer</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">futureTask</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
<span class="ln">24</span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;sum: &#34;</span> <span class="o">+</span> <span class="n">sum</span><span class="o">);</span>
<span class="ln">25</span>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="o">|</span> <span class="n">ExecutionException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">26</span>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">27</span>        <span class="o">}</span>
<span class="ln">28</span>    <span class="o">}</span>
<span class="ln">29</span><span class="o">}</span>
<span class="ln">30</span>
<span class="ln">31</span><span class="kd">class</span> <span class="nc">NumThread</span> <span class="kd">implements</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="o">{</span>
<span class="ln">32</span>
<span class="ln">33</span>    <span class="nd">@Override</span>
<span class="ln">34</span>    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
<span class="ln">35</span>        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
<span class="ln">36</span>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
<span class="ln">37</span>            <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">2</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">38</span>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
<span class="ln">39</span>                <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span><span class="o">;</span>
<span class="ln">40</span>            <span class="o">}</span>
<span class="ln">41</span>        <span class="o">}</span>
<span class="ln">42</span>        <span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
<span class="ln">43</span>    <span class="o">}</span>
<span class="ln">44</span><span class="o">}</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="nl">result:</span>
<span class="ln">2</span><span class="n">2</span>
<span class="ln">3</span><span class="n">4</span>
<span class="ln">4</span><span class="n">6</span>
<span class="ln">5</span><span class="n">8</span>
<span class="ln">6</span><span class="n">10</span>
<span class="ln">7</span><span class="nl">sum:</span> <span class="n">30</span>
</code></pre></div><h2 id="runnable-vs-callable"><code>Runnable()</code> vs <code>Callable()</code></h2>
<ol>
<li><code>call()</code> 可以 return 有返回值。</li>
<li><code>call()</code> 可以抛出异常。</li>
<li><code>Callable()</code>支持泛型。</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>Java Threads 1: Introduction</title>
			<link>https://daiwei.dev/posts/java/thread1/</link>
			<pubDate>Sat, 20 Nov 2021 11:37:08 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/java/thread1/</guid>
			<description>1Module java.base 2Package java.lang 3 4java.lang.Object 5java.lang.Thread 6 7public class Thread 8extends Object 9implements Runnable What are Threads in Java? A thread, in the context of Java, is the path followed when executing a program. All Java programs have at least one thread, known as the main thread, which is created by the Java Virtual Machine (JVM) at the program’s start, when the main() method is invoked with the main thread.</description>
			<content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">Module</span> <span class="n">java</span><span class="o">.</span><span class="na">base</span>
<span class="ln">2</span><span class="n">Package</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span>
<span class="ln">3</span>
<span class="ln">4</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Object</span>
<span class="ln">5</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span>
<span class="ln">6</span>  
<span class="ln">7</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Thread</span>
<span class="ln">8</span><span class="kd">extends</span> <span class="n">Object</span>
<span class="ln">9</span><span class="kd">implements</span> <span class="n">Runnable</span>
</code></pre></div><h2 id="what-are-threads-in-java"><strong>What are Threads in Java?</strong></h2>
<p>A thread, in the context of Java, is the path followed when executing a program. All Java programs have at least one thread, known as the <strong>main thread</strong>, which is created by the Java Virtual Machine (JVM) at the program’s start, when the <strong><code>main()</code></strong> method is invoked with the main thread.</p>
<ul>
<li>
<p><strong>Program</strong> 程序是指为了完成特定任务，用某一种言语编写的静态代码指令集合。例: 360安全卫士。</p>
</li>
<li>
<p><strong>Process</strong> 进程是指程序的一次执行的动态过程，它有自己的开始，运行，停止生命周期。系统会为每个进程分配不一样的内存区域。 例: 打开运行360安全卫士，系统就会360卫士的运行进程分配内存空间。</p>
</li>
<li>
<p><strong>Thread</strong> 线程是程序的最小执行单位，是程序内部的一条执行路径。在 Java 里所有program 都至少有一个 thread，比如 <code>main()</code> thread 它是 JVM 在所有程序开始时创建的。</p>
<ul>
<li>实际上一个Java.exe程序至少有三个线程：<strong><code>main()</code>主线程</strong>，<strong><code>gc</code>垃圾回收线程</strong> 和 <strong>异常处理线程</strong>。</li>
<li>线程作为调度和执行单位，每个线程都有独立的运行stack 和 pc (程序计数器)。一个进程可以同时执行多个线. 程，就是多线程，多线程之间可以共享相同的内存单元和地址。</li>
<li>例: 迅雷就是程序，正在运行的迅雷就是进程，下载一部电影就是单线程，同时下载多部电影就是多线程。</li>
</ul>
<p><strong>简单的说：程序是静态代码指令集合，进程是动态正在运行的程序，线程是进程的最小执行单位。</strong></p>
</li>
</ul>
<p>In Java, creating a thread is accomplished by **implementing an interface **and <strong>extending a class</strong>. Every Java thread is created and controlled by the <strong><code>java.lang.Thread</code></strong> class.</p>
<ul>
<li>
<p><strong>并行</strong> 多个CPU同时执行多个任务。</p>
</li>
<li>
<p><strong>并发</strong> 一个CPU同时（时间片）执行多个任务。</p>
</li>
</ul>
<p><img src="https://lh4.googleusercontent.com/oR0_liUxjMnfgFS-fSuc0x2vCCPLQ0Vdw6w2rBVGloaE_84tRNprqNJEJiyI1unMY8Vpj2CDK9GiQGy03_RmteRz-aM31iIQcZsVZhIH2cLrne_5nY9miXKDmQqEHdY60_WopC0" alt="JavaMadeSoEasy.com (JMSE): Thread states/ Thread life cycle in java"></p>
<h3 id="there-are-actually-total-4-ways-to-create-thread-in-java-">There are actually total 4 ways to create thread in java :</h3>
<ol>
<li>
<p>By extending <strong><code>java.lang.Thread</code></strong> class</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">class</span> <span class="nc">SampleThread</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
<span class="ln"> 2</span>
<span class="ln"> 3</span>    <span class="c1">//method where the thread execution will start 
</span><span class="ln"> 4</span><span class="c1"></span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(){</span>
<span class="ln"> 5</span>        <span class="c1">//logic to execute in a thread    
</span><span class="ln"> 6</span><span class="c1"></span>    <span class="o">}</span>
<span class="ln"> 7</span>
<span class="ln"> 8</span>    <span class="c1">//let’s see how to start the threads
</span><span class="ln"> 9</span><span class="c1"></span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
<span class="ln">10</span>       <span class="n">Thread</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SampleThread</span><span class="o">();</span>
<span class="ln">11</span>       <span class="n">Thread</span> <span class="n">t2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SampleThread</span><span class="o">();</span>
<span class="ln">12</span>       <span class="n">t1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>  <span class="c1">//start the first thread. This calls the run() method.
</span><span class="ln">13</span><span class="c1"></span>       <span class="n">t2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span> <span class="c1">//this starts the 2nd thread. This calls the run() method.  
</span><span class="ln">14</span><span class="c1"></span>    <span class="o">}</span>
<span class="ln">15</span><span class="o">}</span> 
</code></pre></div></li>
<li>
<p>By implementing <strong><code>java.lang.Runnable</code></strong> interface</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">class</span> <span class="nc">A</span> <span class="kd">implements</span> <span class="n">Runnable</span><span class="o">{</span>
<span class="ln"> 2</span>
<span class="ln"> 3</span>    <span class="nd">@Override</span>
<span class="ln"> 4</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln"> 5</span>
<span class="ln"> 6</span>        <span class="c1">// implement run method here 
</span><span class="ln"> 7</span><span class="c1"></span>    <span class="o">}</span>
<span class="ln"> 8</span>
<span class="ln"> 9</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">10</span>        <span class="kd">final</span> <span class="n">A</span> <span class="n">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="n">A</span><span class="o">();</span>
<span class="ln">11</span>
<span class="ln">12</span>        <span class="n">Thread</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">A</span><span class="o">());</span>
<span class="ln">13</span>
<span class="ln">14</span>        <span class="n">t1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">15</span>    <span class="o">}</span>
<span class="ln">16</span><span class="o">}</span>
</code></pre></div></li>
<li>
<p>By implementing <strong><code>java.util.concurrent.Callable</code></strong>  interface.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">class</span> <span class="nc">Counter</span> <span class="kd">implements</span> <span class="n">Callable</span> <span class="o">{</span>
<span class="ln"> 2</span>
<span class="ln"> 3</span>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">THREAD_POOL_SIZE</span> <span class="o">=</span> <span class="n">2</span><span class="o">;</span>
<span class="ln"> 4</span>
<span class="ln"> 5</span>    <span class="c1">// method where the thread execution takes place
</span><span class="ln"> 6</span><span class="c1"></span>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">call</span><span class="o">()</span> <span class="o">{</span>
<span class="ln"> 7</span>        <span class="k">return</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34; executing ...&#34;</span><span class="o">;</span>
<span class="ln"> 8</span>    <span class="o">}</span>
<span class="ln"> 9</span>
<span class="ln">10</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span><span class="o">,</span>
<span class="ln">11</span>            <span class="n">ExecutionException</span> <span class="o">{</span>
<span class="ln">12</span>        <span class="c1">// create a pool of 2 threads
</span><span class="ln">13</span><span class="c1"></span>        <span class="n">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span>
<span class="ln">14</span>                <span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="n">THREAD_POOL_SIZE</span><span class="o">);</span>
<span class="ln">15</span>
<span class="ln">16</span>        <span class="n">Future</span> <span class="n">future1</span> <span class="o">=</span> <span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="k">new</span> <span class="n">Counter</span><span class="o">());</span>
<span class="ln">17</span>        <span class="n">Future</span> <span class="n">future2</span> <span class="o">=</span> <span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="k">new</span> <span class="n">Counter</span><span class="o">());</span>
<span class="ln">18</span>
<span class="ln">19</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34; executing ...&#34;</span><span class="o">);</span>
<span class="ln">20</span>
<span class="ln">21</span>        <span class="c1">//asynchronously get from the worker threads
</span><span class="ln">22</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">future1</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
<span class="ln">23</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">future2</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
<span class="ln">24</span>
<span class="ln">25</span>    <span class="o">}</span>
<span class="ln">26</span><span class="o">}</span>
</code></pre></div><p><strong>Callable 接口支持与 Executor 框架用于线程池。</strong></p>
<p><strong>Runnable 或 Callable 接口优于extends Thread class。</strong></p>
</li>
</ol>
<h3 id="there-are-two-ways-to-create-a-thread-in-java">There are two ways to create a thread in Java:</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="c1">// Method 1: Thread creation by extending Thread class
</span><span class="ln"> 2</span><span class="c1"></span><span class="kd">class</span> <span class="nc">MultithreadingDemo</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
<span class="ln"> 3</span>    <span class="nd">@Override</span>
<span class="ln"> 4</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(){</span>
<span class="ln"> 5</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span><span class="c1">//显示当前线程name
</span><span class="ln"> 6</span><span class="c1"></span>    <span class="o">}</span>
<span class="ln"> 7</span>  
<span class="ln"> 8</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 9</span>        <span class="n">MultithreadingDemo</span> <span class="n">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MultithreadingDemo</span><span class="o">();</span>
<span class="ln">10</span>        <span class="n">obj</span><span class="o">.</span><span class="na">start</span><span class="o">();</span> <span class="c1">// 如果调用obj.run()不行启用新的线程，只会在main线程执行run()方法.
</span><span class="ln">11</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
<span class="ln">12</span>    <span class="o">}</span>
<span class="ln">13</span><span class="o">}</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="c1">// Method 2: Thread creation by implementing Runnable Interface
</span><span class="ln"> 2</span><span class="c1"></span><span class="kd">class</span> <span class="nc">MultithreadingDemo</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span> 
<span class="ln"> 3</span>    <span class="nd">@Override</span>
<span class="ln"> 4</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(){</span>  
<span class="ln"> 5</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span> <span class="c1">//显示当前线程name
</span><span class="ln"> 6</span><span class="c1"></span>    <span class="o">}</span>   
<span class="ln"> 7</span>  
<span class="ln"> 8</span>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>  
<span class="ln"> 9</span>     <span class="n">MultithreadingDemo</span> <span class="n">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MultithreadingDemo</span><span class="o">();</span>  
<span class="ln">10</span>     <span class="n">Thread</span> <span class="n">tobj</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>  
<span class="ln">11</span>     <span class="n">tobj</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>  
<span class="ln">12</span>     <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
<span class="ln">13</span>    <span class="o">}</span>  
<span class="ln">14</span><span class="o">}</span>
</code></pre></div><h3 id="extends-threads-vs-implements-runnable">extends Threads vs implements Runnable</h3>
<p><img src="https://i.stack.imgur.com/vLRdp.gif" alt="enter image description here"></p>
<ul>
<li>Something that can run inside a Thread (Runnable).</li>
<li>Something That can start a new Thread (Thread).</li>
</ul>
<p><strong><code>implements Runnable</code></strong> is the preferred way, it means you can <code>implement Runnable</code> and extend from another class as well.</p>
<p>使用 <strong>Runable</strong> 接口的同时，你还可以继承其他类。但是使用<strong>extends Threads</strong>就无法再继承其他类了。</p>
<p><strong>Inherit less, interface more,</strong> only use inherit when you need override some behavior.</p>
<p>少继承，多接口。只有在你需要重写某些行为时才使用继承。</p>
<p>Multi-threads Ticket system 多线程卖票案例</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WindowTest1</span> <span class="o">{</span>
<span class="ln"> 2</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 3</span>        <span class="n">Window1</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Window1</span><span class="o">();</span>
<span class="ln"> 4</span>        <span class="n">Window1</span> <span class="n">t2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Window1</span><span class="o">();</span>
<span class="ln"> 5</span>        <span class="n">Window1</span> <span class="n">t3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Window1</span><span class="o">();</span>
<span class="ln"> 6</span>
<span class="ln"> 7</span>        <span class="n">t1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Window_1&#34;</span><span class="o">);</span>
<span class="ln"> 8</span>        <span class="n">t2</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Window_2&#34;</span><span class="o">);</span>
<span class="ln"> 9</span>        <span class="n">t3</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Window_3&#34;</span><span class="o">);</span>
<span class="ln">10</span>
<span class="ln">11</span>        <span class="n">t1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">12</span>        <span class="n">t2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">13</span>        <span class="n">t3</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">14</span>    <span class="o">}</span>
<span class="ln">15</span><span class="o">}</span>
<span class="ln">16</span>
<span class="ln">17</span><span class="kd">class</span> <span class="nc">Window1</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
<span class="ln">18</span>  <span class="c1">//if not use static, all 3 every threads will have their own 100 tickets.
</span><span class="ln">19</span><span class="c1"></span>    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">tickets</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span> 
<span class="ln">20</span>  
<span class="ln">21</span>    <span class="nd">@Override</span>
<span class="ln">22</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">23</span>        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">24</span>            <span class="k">if</span><span class="o">(</span><span class="n">tickets</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">25</span>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">getName</span><span class="o">()+</span> <span class="s">&#34; Sold ticket No: &#34;</span> <span class="o">+</span> <span class="n">tickets</span><span class="o">);</span>
<span class="ln">26</span>                <span class="n">tickets</span><span class="o">--;</span>
<span class="ln">27</span>            <span class="o">}</span> <span class="k">else</span> <span class="k">break</span><span class="o">;</span>
<span class="ln">28</span>        <span class="o">}</span>
<span class="ln">29</span>    <span class="o">}</span>
<span class="ln">30</span><span class="o">}</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WindowTest2</span> <span class="o">{</span>
<span class="ln"> 2</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 3</span>        <span class="n">Window2</span> <span class="n">w</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Window2</span><span class="o">();</span>
<span class="ln"> 4</span>
<span class="ln"> 5</span>        <span class="n">Thread</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span> <span class="o">(</span><span class="n">w</span><span class="o">);</span>
<span class="ln"> 6</span>        <span class="n">Thread</span> <span class="n">t2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span> <span class="o">(</span><span class="n">w</span><span class="o">);</span>
<span class="ln"> 7</span>        <span class="n">Thread</span> <span class="n">t3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span> <span class="o">(</span><span class="n">w</span><span class="o">);</span>
<span class="ln"> 8</span>
<span class="ln"> 9</span>        <span class="n">t1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Window_1&#34;</span><span class="o">);</span>
<span class="ln">10</span>        <span class="n">t2</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Window_2&#34;</span><span class="o">);</span>
<span class="ln">11</span>        <span class="n">t3</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Window_3&#34;</span><span class="o">);</span>
<span class="ln">12</span>
<span class="ln">13</span>        <span class="n">t1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">14</span>        <span class="n">t2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">15</span>        <span class="n">t3</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="ln">16</span>    <span class="o">}</span>
<span class="ln">17</span><span class="o">}</span>
<span class="ln">18</span>
<span class="ln">19</span><span class="kd">class</span> <span class="nc">Window2</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
<span class="ln">20</span>  <span class="c1">// implenments Runnable means all 3 threads are inherit from 1 object
</span><span class="ln">21</span><span class="c1"></span>  <span class="c1">// so they will share the 100 tickets, no need use modifier static
</span><span class="ln">22</span><span class="c1"></span>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">tickets</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span>
<span class="ln">23</span>
<span class="ln">24</span>    <span class="nd">@Override</span>
<span class="ln">25</span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">26</span>        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">27</span>            <span class="k">if</span><span class="o">(</span><span class="n">tickets</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">28</span>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34; has sold ticket No : &#34;</span> <span class="o">+</span> <span class="n">tickets</span><span class="o">);</span>
<span class="ln">29</span>                <span class="n">tickets</span><span class="o">--;</span>
<span class="ln">30</span>            <span class="o">}</span> <span class="k">else</span> <span class="k">break</span><span class="o">;</span>
<span class="ln">31</span>        <span class="o">}</span>
<span class="ln">32</span>    <span class="o">}</span>
<span class="ln">33</span><span class="o">}</span>
</code></pre></div><h3 id="为什么要调用start不直接调用run方法">为什么要调用<code>start()</code>不直接调用<code>run()</code>方法?</h3>
<p>如果直接调用这些线程的 run() 方法，则所有线程的执行都由同一个当前线程处理，不会发生多线程. 当通过 start() 方法调用 <code>run()</code> 方法时，就会分配一个新的单独线程来执行 <code>run()</code> 方法，因此如果有多个线程调用 start() 方法，多线程就行同时运行。</p>
<p><strong>直接调用<code>run()</code>方法</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RunMethodExample</span> <span class="kd">implements</span> <span class="n">Runnable</span><span class="o">{</span>
<span class="ln"> 2</span>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(){</span>  
<span class="ln"> 3</span>      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">3</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>  
<span class="ln"> 4</span>	<span class="k">try</span><span class="o">{</span>
<span class="ln"> 5</span>              <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">1000</span><span class="o">);</span>
<span class="ln"> 6</span>	   <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">InterruptedException</span> <span class="n">ie</span><span class="o">){</span>
<span class="ln"> 7</span>		<span class="n">ie</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln"> 8</span>	    <span class="o">}</span>  
<span class="ln"> 9</span>	 <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>  
<span class="ln">10</span>      <span class="o">}</span>  
<span class="ln">11</span>   <span class="o">}</span>  
<span class="ln">12</span>   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[]){</span>  
<span class="ln">13</span>      <span class="n">Thread</span> <span class="n">th1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">RunMethodExample</span><span class="o">(),</span> <span class="s">&#34;th1&#34;</span><span class="o">);</span>
<span class="ln">14</span>      <span class="n">Thread</span> <span class="n">th2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">RunMethodExample</span><span class="o">(),</span> <span class="s">&#34;th2&#34;</span><span class="o">);</span> 
<span class="ln">15</span>      <span class="n">th1</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>  
<span class="ln">16</span>      <span class="n">th2</span><span class="o">.</span><span class="na">run</span><span class="o">();</span> 
<span class="ln">17</span>   <span class="o">}</span>
<span class="ln">18</span><span class="o">}</span>
</code></pre></div><p>output</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">1</span>
<span class="ln">2</span><span class="n">2</span>
<span class="ln">3</span><span class="n">3</span>
<span class="ln">4</span><span class="n">1</span>
<span class="ln">5</span><span class="n">2</span>
<span class="ln">6</span><span class="n">3</span>
</code></pre></div><p><strong>调用<code>start()</code>方法</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RunMethodExample2</span> <span class="o">{</span>
<span class="ln"> 2</span>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(){</span>  
<span class="ln"> 3</span>     <span class="o">...</span>
<span class="ln"> 4</span>   <span class="o">}</span>  
<span class="ln"> 5</span>   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[]){</span>  
<span class="ln"> 6</span>      <span class="n">Thread</span> <span class="n">th1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">RunMethodExample</span><span class="o">(),</span> <span class="s">&#34;th1&#34;</span><span class="o">);</span>
<span class="ln"> 7</span>      <span class="n">Thread</span> <span class="n">th2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">RunMethodExample</span><span class="o">(),</span> <span class="s">&#34;th2&#34;</span><span class="o">);</span> 
<span class="ln"> 8</span>      <span class="n">th1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>  
<span class="ln"> 9</span>      <span class="n">th2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span> 
<span class="ln">10</span>   <span class="o">}</span>
<span class="ln">11</span><span class="o">}</span>
</code></pre></div><p>output</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">1</span>
<span class="ln">2</span><span class="n">1</span>
<span class="ln">3</span><span class="n">2</span>
<span class="ln">4</span><span class="n">2</span>
<span class="ln">5</span><span class="n">3</span>
<span class="ln">6</span><span class="n">3</span>
</code></pre></div><h3 id="可以在-java-中启动一个线程两次吗">可以在 Java 中启动一个线程两次吗？</h3>
<p>不可以，线程一旦启动，就不能再启动。这样做会抛出一个<code>IllegalThreadStateException</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>  
<span class="ln">2</span>	<span class="n">Thread</span> <span class="n">th1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">ThreadTwiceExample</span><span class="o">(),</span> <span class="s">&#34;th1&#34;</span><span class="o">);</span> 
<span class="ln">3</span>	<span class="n">th1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>  
<span class="ln">4</span>	<span class="n">th1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>  
<span class="ln">5</span><span class="o">}</span>
</code></pre></div><p>ouput:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">Exception</span> <span class="n">in</span> <span class="n">thread</span> <span class="s">&#34;main&#34;</span> <span class="n">th1</span> <span class="n">is</span> <span class="n">executing</span><span class="o">.</span>
<span class="ln">2</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">IllegalThreadStateException</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>git : Changes not staged for commit</title>
			<link>https://daiwei.dev/posts/git/git_bug1/</link>
			<pubDate>Tue, 16 Nov 2021 17:19:26 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/git/git_bug1/</guid>
			<description>1Changes not staged for commit: 2	modified: themes/hermit (modified content, untracked content) 3 4no changes added to commit 出现此问题是因为该路径内有文件已修改但是没被提交到本地仓库，可以尝试 cd 到子文件路径，add &amp;amp; commit, 然后返回原工作区路径，再add &amp;amp; commit一次。
1$ cd themes/hermit 2hermit $ git add . 3hermit $ git git commit -m &amp;#39;message&amp;#39; 4 5hermit $ cd ../.. 6$ git add . 7$ git git commit -m &amp;#39;message&amp;#39; </description>
			<content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="ln">1</span>Changes not staged for commit:
<span class="ln">2</span>	modified:   themes/hermit (modified content, untracked content)
<span class="ln">3</span>
<span class="ln">4</span>no changes added to commit
</code></pre></div><p>出现此问题是因为该路径内有文件已修改但是没被提交到本地仓库，可以尝试 cd 到子文件路径，add &amp; commit, 然后返回原工作区路径，再add &amp; commit一次。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">$</span> <span class="n">cd</span> <span class="n">themes</span><span class="o">/</span><span class="n">hermit</span>
<span class="ln">2</span><span class="n">hermit</span> <span class="n">$</span> <span class="n">git</span> <span class="n">add</span> <span class="o">.</span>
<span class="ln">3</span><span class="n">hermit</span> <span class="n">$</span> <span class="n">git</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">message</span><span class="err">&#39;</span>
<span class="ln">4</span>
<span class="ln">5</span><span class="n">hermit</span> <span class="n">$</span> <span class="n">cd</span> <span class="o">../..</span>
<span class="ln">6</span><span class="n">$</span> <span class="n">git</span> <span class="n">add</span> <span class="o">.</span>
<span class="ln">7</span><span class="n">$</span> <span class="n">git</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">message</span><span class="err">&#39;</span>  
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>fatal: Authentication failed for &#39;https://github.com/yourusername/githubtest.git/&#39; </title>
			<link>https://daiwei.dev/posts/git/git_authentication/</link>
			<pubDate>Mon, 15 Nov 2021 12:02:42 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/git/git_authentication/</guid>
			<description>fatal: Authentication failed for &amp;lsquo;https:/githubtest.git/&amp;rsquo; 这是因为github开启了Two Factor Authentication (2FA）验证，所以当你使用这些 git clone, git fetch, git pull or git push命令的时候就会需要输入你的 PAT (Personal Access Token).
在github settings 打开 Developer settings, 创建PAT, 创建完成后copy 你的PAT 再 使用之前的 git push 命令就可以输入用户名和你的PAT了（注意输入PAT,不是你的github密码）. 请参考 GitHub　Creating a personal access token.
1$ git clone https://github.com/username/repo.git 2Username: your_username 3Password: your_token </description>
			<content type="html"><![CDATA[<h3 id="fatal-authentication-failed-for-httpsgithubtestgit">fatal: Authentication failed for &lsquo;https:/githubtest.git/&rsquo;</h3>
<p>这是因为github开启了Two Factor Authentication (2FA）验证，所以当你使用这些 <code>git clone</code>, <code>git fetch</code>, <code>git pull</code> or <code>git push</code>命令的时候就会需要输入你的 PAT (Personal Access Token).</p>
<p>在github settings 打开 Developer settings, 创建PAT, 创建完成后copy 你的PAT 再 使用之前的 git push 命令就可以输入用户名和你的PAT了（注意输入PAT,不是你的github密码）. 请参考 GitHub　<a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token">Creating a personal access token</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">$</span> <span class="n">git</span> <span class="n">clone</span> <span class="n">https</span><span class="o">:</span><span class="c1">//github.com/username/repo.git
</span><span class="ln">2</span><span class="c1"></span><span class="nl">Username:</span> <span class="n">your_username</span>
<span class="ln">3</span><span class="nl">Password:</span> <span class="n">your_token</span>
</code></pre></div><p><img src="https://docs.github.com/assets/images/help/settings/developer-settings.png" alt="Developer settings"></p>
<p><img src="https://docs.github.com/assets/images/help/settings/personal_access_tokens_tab.png" alt="Personal access tokens"></p>
<p><img src="https://docs.github.com/assets/images/help/settings/generate_new_token.png" alt="Generate new token button"></p>
<p><img src="https://docs.github.com/assets/images/help/settings/generate_token.png" alt="Generate token button"></p>
<p><img src="https://docs.github.com/assets/images/help/settings/personal_access_tokens.png" alt="Newly created token"></p>
]]></content>
		</item>
		
		<item>
			<title>git,github &amp; gitlab</title>
			<link>https://daiwei.dev/posts/git/git/</link>
			<pubDate>Sun, 14 Nov 2021 16:24:04 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/git/git/</guid>
			<description>Git 诞生于2005年，由大神 Linus Torvalds 开发的免费开源的分布式版本控制系统,可让你管理和跟踪源代码历史记录。Git 安装和维护在您的本地系统上，不需要internet联网。
github，和gitlab都是基于git开发的管理托管服务。其他 Git 存储库托管服务还有：BitBucket， SourceForge.
Github 发布于2008年，是一种基于云的git仓库托管服务。提供免费的公共仓库(代码会被所有人看到)和收费的私有仓库(代码仅自己可见)。通常用于托管开源项目。
GitLab 发布于2013年，是一个基于 Web 的DevOps生命周期工具，它提供Git 存储库管理器。和GitHub相比gitlab允许免费创建私有仓库。 另外 gitlab还可以部署到本地服务器上，让开发团队对他们的代码仓库拥有更多的控制。多用于企业或者个人的代码托管库。
 Git 常用command： git init 初始化，在本地仓库创建 .git 文档
1$ git init 2Initialized empty Git repository in /gittest/.git/ 3 4// 查看.git隐藏目录里的本地库管理文件 5$ ls -lA .git/ 6total 24 7-rw-r--r-- 1 user staff 23 9 Nov 17:38 HEAD 8-rw-r--r-- 1 user staff 137 9 Nov 17:38 config 9-rw-r--r-- 1 user staff 73 9 Nov 17:38 description 10drwxr-xr-x 13 user staff 416 9 Nov 17:38 hooks 11drwxr-xr-x 3 user staff 96 9 Nov 17:38 info 12drwxr-xr-x 4 user staff 128 9 Nov 17:38 objects 13drwxr-xr-x 4 user staff 128 9 Nov 17:38 refs git config 设置用户签名（通常只需要设置本地系统签名就足够了）</description>
			<content type="html"><![CDATA[<p><strong><a href="https://git-scm.com/">Git</a></strong> 诞生于2005年，由大神 <a href="https://en.wikipedia.org/wiki/Linus_Torvalds">Linus Torvalds</a> 开发的免费开源的分布式版本控制系统,可让你管理和跟踪源代码历史记录。Git 安装和维护在您的本地系统上，不需要internet联网。</p>
<p>github，和gitlab都是基于git开发的管理托管服务。其他 Git 存储库托管服务还有：BitBucket， SourceForge.</p>
<p><strong><a href="https://github.com/">Github</a></strong> 发布于2008年，是一种基于云的git仓库托管服务。提供免费的公共仓库(代码会被所有人看到)和收费的私有仓库(代码仅自己可见)。<strong>通常用于托管开源项目</strong>。</p>
<p><strong><a href="https://about.gitlab.com/">GitLab</a></strong> 发布于2013年，是一个基于 Web 的DevOps生命周期工具，它提供Git 存储库管理器。和GitHub相比gitlab允许免费创建私有仓库。 另外 gitlab还可以部署到本地服务器上，让开发团队对他们的代码仓库拥有更多的控制。<strong>多用于企业或者个人的代码托管库</strong>。</p>
<p><img src="https://support.nesi.org.nz/hc/article_attachments/360004194235/Git_Diagram.svg" alt="Git: Reference Sheet – NeSI Support"></p>
<hr>
<h3 id="git-常用command">Git 常用command：</h3>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9naW1nL2Fzc2V0LzIwMTUvYmcyMDE1MTIwOTAxLnBuZw?x-oss-process=image/format,png" alt="img"></p>
<p><strong><code>git init</code> 初始化，在本地仓库创建 .git 文档</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">git</span> <span class="n">init</span>
<span class="ln"> 2</span><span class="n">Initialized</span> <span class="n">empty</span> <span class="n">Git</span> <span class="n">repository</span> <span class="n">in</span> <span class="o">/</span><span class="n">gittest</span><span class="o">/.</span><span class="na">git</span><span class="o">/</span>
<span class="ln"> 3</span>
<span class="ln"> 4</span><span class="c1">// 查看.git隐藏目录里的本地库管理文件
</span><span class="ln"> 5</span><span class="c1"></span><span class="n">$</span> <span class="n">ls</span> <span class="o">-</span><span class="n">lA</span> <span class="o">.</span><span class="na">git</span><span class="o">/</span>
<span class="ln"> 6</span><span class="n">total</span> <span class="n">24</span>
<span class="ln"> 7</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span><span class="n">r</span><span class="o">--</span>   <span class="n">1</span> <span class="n">user</span>  <span class="n">staff</span>   <span class="n">23</span>  <span class="n">9</span> <span class="n">Nov</span> <span class="n">17</span><span class="o">:</span><span class="n">38</span> <span class="n">HEAD</span>
<span class="ln"> 8</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span><span class="n">r</span><span class="o">--</span>   <span class="n">1</span> <span class="n">user</span>  <span class="n">staff</span>  <span class="n">137</span>  <span class="n">9</span> <span class="n">Nov</span> <span class="n">17</span><span class="o">:</span><span class="n">38</span> <span class="n">config</span>
<span class="ln"> 9</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span><span class="n">r</span><span class="o">--</span>   <span class="n">1</span> <span class="n">user</span>  <span class="n">staff</span>   <span class="n">73</span>  <span class="n">9</span> <span class="n">Nov</span> <span class="n">17</span><span class="o">:</span><span class="n">38</span> <span class="n">description</span>
<span class="ln">10</span><span class="n">drwxr</span><span class="o">-</span><span class="n">xr</span><span class="o">-</span><span class="n">x</span>  <span class="n">13</span> <span class="n">user</span>  <span class="n">staff</span>  <span class="n">416</span>  <span class="n">9</span> <span class="n">Nov</span> <span class="n">17</span><span class="o">:</span><span class="n">38</span> <span class="n">hooks</span>
<span class="ln">11</span><span class="n">drwxr</span><span class="o">-</span><span class="n">xr</span><span class="o">-</span><span class="n">x</span>   <span class="n">3</span> <span class="n">user</span>  <span class="n">staff</span>   <span class="n">96</span>  <span class="n">9</span> <span class="n">Nov</span> <span class="n">17</span><span class="o">:</span><span class="n">38</span> <span class="n">info</span>
<span class="ln">12</span><span class="n">drwxr</span><span class="o">-</span><span class="n">xr</span><span class="o">-</span><span class="n">x</span>   <span class="n">4</span> <span class="n">user</span>  <span class="n">staff</span>  <span class="n">128</span>  <span class="n">9</span> <span class="n">Nov</span> <span class="n">17</span><span class="o">:</span><span class="n">38</span> <span class="n">objects</span>
<span class="ln">13</span><span class="n">drwxr</span><span class="o">-</span><span class="n">xr</span><span class="o">-</span><span class="n">x</span>   <span class="n">4</span> <span class="n">user</span>  <span class="n">staff</span>  <span class="n">128</span>  <span class="n">9</span> <span class="n">Nov</span> <span class="n">17</span><span class="o">:</span><span class="n">38</span> <span class="n">refs</span>
</code></pre></div><p><strong><code>git config</code> 设置用户签名（通常只需要设置本地系统签名就足够了）</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">git</span> <span class="n">config</span> <span class="n">user</span><span class="o">.</span><span class="na">name</span> <span class="n">dai</span> <span class="c1">//设置本地仓库签名
</span><span class="ln"> 2</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">config</span> <span class="n">user</span><span class="o">.</span><span class="na">email</span> <span class="n">wdai</span><span class="nd">@mail.com</span>
<span class="ln"> 3</span><span class="n">$</span> <span class="n">cat</span> <span class="o">.</span><span class="na">git</span><span class="o">/</span><span class="n">config</span> <span class="c1">//打开配置文件
</span><span class="ln"> 4</span><span class="c1"></span><span class="o">[</span><span class="n">user</span><span class="o">]</span>
<span class="ln"> 5</span>	<span class="n">name</span> <span class="o">=</span> <span class="n">dai</span>
<span class="ln"> 6</span>	<span class="n">email</span> <span class="o">=</span> <span class="n">wdai</span><span class="nd">@mail.com</span>
<span class="ln"> 7</span><span class="n">$</span> <span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="n">global</span> <span class="n">user</span><span class="o">.</span><span class="na">name</span> <span class="n">dai_glb</span> <span class="c1">//设置本地系统系统签名  
</span><span class="ln"> 8</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="n">global</span> <span class="n">user</span><span class="o">.</span><span class="na">email</span> <span class="n">wdai_glb</span><span class="nd">@mail.com</span>
<span class="ln"> 9</span><span class="n">$</span> <span class="n">cd</span> <span class="o">~</span> <span class="c1">//返回根目录
</span><span class="ln">10</span><span class="c1"></span><span class="n">$</span> <span class="n">pwd</span> <span class="c1">//显示路径
</span><span class="ln">11</span><span class="c1"></span><span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">daiwei</span>
<span class="ln">12</span><span class="n">$</span> <span class="n">cat</span> <span class="o">.</span><span class="na">gitconfig</span>
<span class="ln">13</span><span class="o">[</span><span class="n">user</span><span class="o">]</span>
<span class="ln">14</span>	<span class="n">name</span> <span class="o">=</span> <span class="n">dai_glb</span>
<span class="ln">15</span>	<span class="n">email</span> <span class="o">=</span> <span class="n">wdai_glb</span><span class="nd">@mail.com</span>
</code></pre></div><p><strong><code>git status</code> 查看当前本地仓库状态</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span> 
<span class="ln"> 2</span><span class="n">On</span> <span class="n">branch</span> <span class="n">master</span> <span class="c1">// 位于master branch
</span><span class="ln"> 3</span><span class="c1"></span>
<span class="ln"> 4</span><span class="n">No</span> <span class="n">commits</span> <span class="n">yet</span> <span class="c1">// 本地仓库无提交记录
</span><span class="ln"> 5</span><span class="c1"></span>
<span class="ln"> 6</span><span class="n">nothing</span> <span class="n">to</span> <span class="nf">commit</span> <span class="o">(</span><span class="n">create</span><span class="o">/</span><span class="n">copy</span> <span class="n">files</span> <span class="n">and</span> <span class="n">use</span> <span class="s">&#34;git add&#34;</span> <span class="n">to</span> <span class="n">track</span><span class="o">)</span> <span class="c1">// 暂存区也无可提交记录
</span><span class="ln"> 7</span><span class="c1"></span>
<span class="ln"> 8</span><span class="n">$</span> <span class="n">cat</span> <span class="o">&gt;</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// 创建新txt文件，也可以用 $ touch test.txt
</span><span class="ln"> 9</span><span class="c1"></span>  <span class="n">test</span> <span class="c1">//输入文本 ctrl + D 保存并退出文本输入
</span><span class="ln">10</span><span class="c1"></span>
<span class="ln">11</span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span>
<span class="ln">12</span><span class="n">On</span> <span class="n">branch</span> <span class="n">master</span>
<span class="ln">13</span>
<span class="ln">14</span><span class="n">No</span> <span class="n">commits</span> <span class="n">yet</span>
<span class="ln">15</span>
<span class="ln">16</span><span class="n">Untracked</span> <span class="n">files</span><span class="o">:</span> <span class="c1">// 未被git追踪文件
</span><span class="ln">17</span><span class="c1"></span>  <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git add &lt;file&gt;...&#34;</span> <span class="n">to</span> <span class="n">include</span> <span class="n">in</span> <span class="n">what</span> <span class="n">will</span> <span class="n">be</span> <span class="n">committed</span><span class="o">)</span>
<span class="ln">18</span>
<span class="ln">19</span>	<span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">20</span>
<span class="ln">21</span><span class="n">nothing</span> <span class="n">added</span> <span class="n">to</span> <span class="n">commit</span> <span class="n">but</span> <span class="n">untracked</span> <span class="n">files</span> <span class="nf">present</span> <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git add&#34;</span> <span class="n">to</span> <span class="n">track</span><span class="o">)</span>
</code></pre></div><p><strong><code>git add</code> 添加需要提交的文件</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">git</span> <span class="n">add</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// $ git add . 添加所有被修改过的文件
</span><span class="ln"> 2</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span>
<span class="ln"> 3</span><span class="n">On</span> <span class="n">branch</span> <span class="n">master</span>
<span class="ln"> 4</span>
<span class="ln"> 5</span><span class="n">No</span> <span class="n">commits</span> <span class="n">yet</span>
<span class="ln"> 6</span>
<span class="ln"> 7</span><span class="n">Changes</span> <span class="n">to</span> <span class="n">be</span> <span class="n">committed</span><span class="o">:</span> <span class="c1">// 追踪到已新committed文件
</span><span class="ln"> 8</span><span class="c1"></span>  <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git rm --cached &lt;file&gt;...&#34;</span> <span class="n">to</span> <span class="n">unstage</span><span class="o">)</span> <span class="c1">// git rm --cached &lt;file&gt; 可撤回当前操作
</span><span class="ln"> 9</span><span class="c1"></span>
<span class="ln">10</span>	<span class="k">new</span> <span class="n">file</span><span class="o">:</span>   <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// 新 added 文件
</span></code></pre></div><p><strong><code>git rm --cached &lt;file&gt;</code>  撤回之前添加的文件</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">git</span> <span class="n">rm</span> <span class="o">--</span><span class="n">cached</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> 
<span class="ln"> 2</span><span class="n">rm</span> <span class="err">&#39;</span><span class="n">test</span><span class="o">.</span><span class="na">txt</span><span class="err">&#39;</span>
<span class="ln"> 3</span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span> 
<span class="ln"> 4</span><span class="n">On</span> <span class="n">branch</span> <span class="n">master</span>
<span class="ln"> 5</span>
<span class="ln"> 6</span><span class="n">No</span> <span class="n">commits</span> <span class="n">yet</span>
<span class="ln"> 7</span>
<span class="ln"> 8</span><span class="n">Untracked</span> <span class="n">files</span><span class="o">:</span> <span class="c1">// test.txt 回复为未被git追踪文件
</span><span class="ln"> 9</span><span class="c1"></span>  <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git add &lt;file&gt;...&#34;</span> <span class="n">to</span> <span class="n">include</span> <span class="n">in</span> <span class="n">what</span> <span class="n">will</span> <span class="n">be</span> <span class="n">committed</span><span class="o">)</span>
<span class="ln">10</span>
<span class="ln">11</span>	<span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">12</span>
<span class="ln">13</span><span class="n">nothing</span> <span class="n">added</span> <span class="n">to</span> <span class="n">commit</span> <span class="n">but</span> <span class="n">untracked</span> <span class="n">files</span> <span class="nf">present</span> <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git add&#34;</span> <span class="n">to</span> <span class="n">track</span><span class="o">)</span>
</code></pre></div><p><strong><code>git commit -m [message]</code> 提交添加的文件和备注信息</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">$</span> <span class="n">git</span> <span class="n">add</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">2</span><span class="n">$</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">my</span> <span class="n">first</span> <span class="n">commit</span><span class="err">&#39;</span>
<span class="ln">3</span><span class="o">[</span><span class="n">master</span> <span class="o">(</span><span class="n">root</span><span class="o">-</span><span class="n">commit</span><span class="o">)</span> <span class="n">91151c2</span><span class="o">]</span> <span class="n">my</span> <span class="n">first</span> <span class="n">commit</span>
<span class="ln">4</span> <span class="n">1</span> <span class="n">file</span> <span class="n">changed</span><span class="o">,</span> <span class="n">1</span> <span class="nf">insertion</span><span class="o">(+)</span> <span class="c1">//一个文件被改变，新增一行代码
</span><span class="ln">5</span><span class="c1"></span> <span class="n">create</span> <span class="n">mode</span> <span class="n">100644</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">6</span>  
<span class="ln">7</span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span> <span class="c1">// 查看本地仓库状态
</span><span class="ln">8</span><span class="c1"></span><span class="n">On</span> <span class="n">branch</span> <span class="n">master</span>
<span class="ln">9</span><span class="n">nothing</span> <span class="n">to</span> <span class="n">commit</span><span class="o">,</span> <span class="n">working</span> <span class="n">tree</span> <span class="n">clean</span> <span class="c1">// 无文件需要提交，工作区是干净的
</span></code></pre></div><p><strong>nano 修改test.txt文件内容</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">nano</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// 用nano editor 修改文件内容， ctrl + X 保存并退出
</span><span class="ln"> 2</span><span class="c1"></span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// 查看文件内容
</span><span class="ln"> 3</span><span class="c1"></span><span class="n">test</span> <span class="n">hello</span> <span class="n">world</span>  
<span class="ln"> 4</span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span> <span class="c1">// 查看文件被修改后在本地仓库的状态
</span><span class="ln"> 5</span><span class="c1"></span><span class="n">On</span> <span class="n">branch</span> <span class="n">master</span> <span class="c1">//位于master branch
</span><span class="ln"> 6</span><span class="c1"></span><span class="n">Changes</span> <span class="n">not</span> <span class="n">staged</span> <span class="k">for</span> <span class="n">commit</span><span class="o">:</span> <span class="c1">// 有改变但为commit
</span><span class="ln"> 7</span><span class="c1"></span>  <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git add &lt;file&gt;...&#34;</span> <span class="n">to</span> <span class="n">update</span> <span class="n">what</span> <span class="n">will</span> <span class="n">be</span> <span class="n">committed</span><span class="o">)</span>
<span class="ln"> 8</span>  <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git checkout -- &lt;file&gt;...&#34;</span> <span class="n">to</span> <span class="n">discard</span> <span class="n">changes</span> <span class="n">in</span> <span class="n">working</span> <span class="n">directory</span><span class="o">)</span>
<span class="ln"> 9</span><span class="nl">
</span><span class="ln">10</span><span class="nl">	modified:</span>   <span class="n">test</span><span class="o">.</span><span class="na">txt</span>  <span class="c1">//修改过的的文件：file—name
</span><span class="ln">11</span><span class="c1">// 已added过，又被修改的文件可以直接 commit -a
</span><span class="ln">12</span><span class="c1"></span><span class="n">no</span> <span class="n">changes</span> <span class="n">added</span> <span class="n">to</span> <span class="nf">commit</span> <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git add&#34;</span> <span class="n">and</span><span class="o">/</span><span class="n">or</span> <span class="s">&#34;git commit -a&#34;</span><span class="o">)</span>  
<span class="ln">13</span>    
<span class="ln">14</span><span class="n">$</span> <span class="n">git</span> <span class="n">add</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// add 被修改过的文件
</span><span class="ln">15</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">first</span> <span class="n">time</span> <span class="n">edit</span><span class="err">&#39;</span> <span class="c1">// 提交 commit
</span><span class="ln">16</span><span class="c1"></span><span class="o">[</span><span class="n">master</span> <span class="n">014b9c9</span><span class="o">]</span> <span class="n">first</span> <span class="n">time</span> <span class="n">edit</span>
<span class="ln">17</span> <span class="n">1</span> <span class="n">file</span> <span class="n">changed</span><span class="o">,</span> <span class="n">1</span> <span class="nf">insertion</span><span class="o">(+),</span> <span class="n">1</span> <span class="nf">deletion</span><span class="o">(-)</span> <span class="c1">// 1个文件被修改过
</span><span class="ln">18</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span>
<span class="ln">19</span><span class="n">On</span> <span class="n">branch</span> <span class="n">master</span>
<span class="ln">20</span><span class="n">nothing</span> <span class="n">to</span> <span class="n">commit</span><span class="o">,</span> <span class="n">working</span> <span class="n">tree</span> <span class="n">clean</span> <span class="c1">// working tree OK
</span></code></pre></div><p><strong><code>git log</code> 版本提交日志</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">git</span> <span class="n">log</span>
<span class="ln"> 2</span><span class="n">commit</span> <span class="nf">d77465cc8824b3f312740676c93f75f4be4370a9</span> <span class="o">(</span><span class="n">HEAD</span> <span class="o">-&gt;</span> <span class="n">master</span><span class="o">)</span> 
<span class="ln"> 3</span>  <span class="c1">//HEAD相当于一个指针，指向当前版本。我们切换版本相当于移动 HEAD指针
</span><span class="ln"> 4</span><span class="c1"></span><span class="nl">Author:</span> <span class="n">dai</span> <span class="o">&lt;</span><span class="n">wdai</span><span class="nd">@mail.com</span><span class="o">&gt;</span>
<span class="ln"> 5</span><span class="nl">Date:</span>   <span class="n">Wed</span> <span class="n">Nov</span> <span class="n">10</span> <span class="n">12</span><span class="o">:</span><span class="n">21</span><span class="o">:</span><span class="n">17</span> <span class="n">2021</span> <span class="o">+</span><span class="n">0800</span>
<span class="ln"> 6</span>
<span class="ln"> 7</span>    <span class="n">add</span> <span class="n">more</span> <span class="n">text</span>
<span class="ln"> 8</span>
<span class="ln"> 9</span><span class="n">commit</span> <span class="n">014b9c9d8287da50bd521950c889c147205610a2</span>
<span class="ln">10</span><span class="nl">Author:</span> <span class="n">dai</span> <span class="o">&lt;</span><span class="n">wdai</span><span class="nd">@mail.com</span><span class="o">&gt;</span>
<span class="ln">11</span><span class="nl">Date:</span>   <span class="n">Tue</span> <span class="n">Nov</span> <span class="n">9</span> <span class="n">19</span><span class="o">:</span><span class="n">43</span><span class="o">:</span><span class="n">25</span> <span class="n">2021</span> <span class="o">+</span><span class="n">0800</span>
<span class="ln">12</span>
<span class="ln">13</span>    <span class="n">first</span> <span class="n">time</span> <span class="n">edit</span>
<span class="ln">14</span>  
<span class="ln">15</span><span class="n">$</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">pretty</span><span class="o">=</span><span class="n">oneline</span> <span class="c1">// 当日志太多可以使用参数每次commit只显示一行
</span><span class="ln">16</span><span class="c1"></span><span class="n">b963c9146d3fac75a6488c1885431dce0d60717d</span> <span class="o">(</span><span class="n">HEAD</span> <span class="o">-&gt;</span> <span class="n">master</span><span class="o">)</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">3</span>
<span class="ln">17</span><span class="n">219dc6b24eb17613bf6cd7621421e1e9e5975027</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">2</span>
<span class="ln">18</span><span class="n">46a3927da53bfdcc8a7730fb042605b650be52f2</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">1</span>
<span class="ln">19</span><span class="n">d77465cc8824b3f312740676c93f75f4be4370a9</span> <span class="n">add</span> <span class="n">more</span> <span class="n">text</span>
<span class="ln">20</span><span class="n">014b9c9d8287da50bd521950c889c147205610a2</span> <span class="n">first</span> <span class="n">time</span> <span class="n">edit</span>
<span class="ln">21</span><span class="n">91151c2bc99fb6184ed82bf7b8b5fc32d7118909</span> <span class="n">my</span> <span class="n">first</span> <span class="n">commit</span>
<span class="ln">22</span>
<span class="ln">23</span><span class="n">$</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">oneline</span> <span class="c1">// 只显示当前版本以及之后的版本，不显示前面的版本。哈希值只显示尾部，更加简短。     
</span><span class="ln">24</span><span class="c1"></span><span class="n">b963c91</span> <span class="o">(</span><span class="n">HEAD</span> <span class="o">-&gt;</span> <span class="n">master</span><span class="o">)</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">3</span>
<span class="ln">25</span><span class="n">219dc6b</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">2</span>
<span class="ln">26</span><span class="n">46a3927</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">1</span>
<span class="ln">27</span><span class="n">d77465c</span> <span class="n">add</span> <span class="n">more</span> <span class="n">text</span>
<span class="ln">28</span><span class="n">014b9c9</span> <span class="n">first</span> <span class="n">time</span> <span class="n">edit</span>
<span class="ln">29</span><span class="n">91151c2</span> <span class="n">my</span> <span class="n">first</span> <span class="n">commit</span>
<span class="ln">30</span>  
<span class="ln">31</span><span class="n">$</span> <span class="n">git</span> <span class="n">reflog</span>  <span class="c1">// 显示所有版本，推荐使用
</span><span class="ln">32</span><span class="c1"></span><span class="n">b963c91</span> <span class="o">(</span><span class="n">HEAD</span> <span class="o">-&gt;</span> <span class="n">master</span><span class="o">)</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">0</span><span class="o">}:</span> <span class="n">commit</span><span class="o">:</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">3</span> <span class="c1">// HEAD 0 当前版本
</span><span class="ln">33</span><span class="c1"></span><span class="n">219dc6b</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">1</span><span class="o">}:</span> <span class="n">commit</span><span class="o">:</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">2</span> <span class="c1">// HEAD 1，到此版本需要移动指针一次
</span><span class="ln">34</span><span class="c1"></span><span class="n">46a3927</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">2</span><span class="o">}:</span> <span class="n">commit</span><span class="o">:</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">1</span>
<span class="ln">35</span><span class="n">d77465c</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">3</span><span class="o">}:</span> <span class="n">commit</span><span class="o">:</span> <span class="n">add</span> <span class="n">more</span> <span class="n">text</span>
<span class="ln">36</span><span class="n">014b9c9</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">4</span><span class="o">}:</span> <span class="n">commit</span><span class="o">:</span> <span class="n">first</span> <span class="n">time</span> <span class="n">edit</span>
<span class="ln">37</span><span class="n">91151c2</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">5</span><span class="o">}:</span> <span class="n">commit</span> <span class="o">(</span><span class="n">initial</span><span class="o">):</span> <span class="n">my</span> <span class="n">first</span> <span class="n">commit</span>
</code></pre></div><p><strong><code>git-reset</code> : Reset current HEAD to the specified state  重置当前HEAD指针到指定版本</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">soft</span> <span class="o">:</span> <span class="n">not</span> <span class="n">touch</span> <span class="n">the</span> <span class="n">index</span> <span class="n">file</span> <span class="n">or</span> <span class="n">the</span> <span class="n">working</span> <span class="n">tree</span> <span class="n">at</span> <span class="n">all</span><span class="o">.</span><span class="c1">//仅重置本地库。
</span><span class="ln">2</span><span class="c1"></span><span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">mix</span> <span class="o">:</span> <span class="n">resets</span> <span class="n">the</span> <span class="n">index</span> <span class="n">but</span> <span class="n">not</span> <span class="n">the</span> <span class="n">working</span> <span class="n">tree</span><span class="o">.</span><span class="c1">//重置本地库和暂存库。
</span><span class="ln">3</span><span class="c1"></span><span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">hard</span> <span class="o">:</span> <span class="n">resets</span> <span class="n">the</span> <span class="n">index</span> <span class="n">and</span> <span class="n">working</span> <span class="n">tree</span><span class="o">.</span><span class="c1">//重置本地库，暂存区，工作库。
</span><span class="ln">4</span><span class="c1"></span><span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">merge</span> <span class="o">:</span>
<span class="ln">5</span><span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">keep</span> <span class="o">:</span> 
<span class="ln">6</span><span class="n">git</span><span class="o">-</span><span class="n">revert</span><span class="o">(</span><span class="n">1</span><span class="o">)</span> <span class="o">:</span> <span class="c1">//重置最新版本，返回上一个版本
</span></code></pre></div><p><strong><code>git reset --hard [hash_valve]</code> 基于索引值前进后退版本，推荐使用</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">git</span> <span class="n">reflog</span> <span class="c1">// 显示各版本信息
</span><span class="ln"> 2</span><span class="c1"></span><span class="n">a6070ce</span> <span class="o">(</span><span class="n">HEAD</span> <span class="o">-&gt;</span> <span class="n">master</span><span class="o">)</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">0</span><span class="o">}:</span> <span class="n">reset</span><span class="o">:</span> <span class="n">moving</span> <span class="n">to</span> <span class="n">a6070ce</span>
<span class="ln"> 3</span><span class="n">4a34a05</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">1</span><span class="o">}:</span> <span class="n">reset</span><span class="o">:</span> <span class="n">moving</span> <span class="n">to</span> <span class="n">4a34a05</span>
<span class="ln"> 4</span><span class="nf">a6070ce</span> <span class="o">(</span><span class="n">HEAD</span> <span class="o">-&gt;</span> <span class="n">master</span><span class="o">)</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">2</span><span class="o">}:</span> <span class="n">commit</span><span class="o">:</span> <span class="n">add</span> <span class="n">333</span>
<span class="ln"> 5</span><span class="n">9143841</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">3</span><span class="o">}:</span> <span class="n">commit</span><span class="o">:</span> <span class="n">add</span> <span class="n">222</span>
<span class="ln"> 6</span><span class="n">4a34a05</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">4</span><span class="o">}:</span> <span class="n">commit</span><span class="o">:</span> <span class="n">add</span> <span class="n">111</span>
<span class="ln"> 7</span><span class="n">b963c91</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">5</span><span class="o">}:</span> <span class="n">commit</span><span class="o">:</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">3</span>
<span class="ln"> 8</span><span class="n">219dc6b</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">6</span><span class="o">}:</span> <span class="n">commit</span><span class="o">:</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">2</span>
<span class="ln"> 9</span><span class="n">46a3927</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">7</span><span class="o">}:</span> <span class="n">commit</span><span class="o">:</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">1</span> <span class="c1">// 目标版本索引值 46a3927
</span><span class="ln">10</span><span class="c1"></span><span class="n">d77465c</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">8</span><span class="o">}:</span> <span class="n">commit</span><span class="o">:</span> <span class="n">add</span> <span class="n">more</span> <span class="n">text</span>
<span class="ln">11</span><span class="n">014b9c9</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">9</span><span class="o">}:</span> <span class="n">commit</span><span class="o">:</span> <span class="n">first</span> <span class="n">time</span> <span class="n">edit</span>
<span class="ln">12</span><span class="n">91151c2</span> <span class="n">HEAD</span><span class="err">@</span><span class="o">{</span><span class="n">10</span><span class="o">}:</span> <span class="n">commit</span> <span class="o">(</span><span class="n">initial</span><span class="o">):</span> <span class="n">my</span> <span class="n">first</span> <span class="n">commit</span>
<span class="ln">13</span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//显示当前版本内容
</span><span class="ln">14</span><span class="c1"></span><span class="n">111</span>
<span class="ln">15</span><span class="n">222</span>
<span class="ln">16</span><span class="n">333</span>
<span class="ln">17</span><span class="n">$</span> <span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">hard</span> <span class="n">46a3927</span> <span class="c1">// 基于索引值退回到目标版本
</span><span class="ln">18</span><span class="c1"></span><span class="n">HEAD</span> <span class="n">is</span> <span class="n">now</span> <span class="n">at</span> <span class="n">46a3927</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">1</span> <span class="c1">//版本回退成功
</span><span class="ln">19</span><span class="c1"></span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//显示目标版本内容
</span><span class="ln">20</span><span class="c1"></span><span class="n">test</span> <span class="n">hello</span> <span class="n">world</span>
<span class="ln">21</span><span class="n">1111dwd</span> <span class="n">dwdd</span>
<span class="ln">22</span><span class="n">adad</span>
<span class="ln">23</span><span class="n">add</span> <span class="n">more1</span>
</code></pre></div><p><strong><code>git reset --hard HEAD^</code> 基于 ^ 异或符号的 版本回退， 只可以回退，不可以前进，不推荐</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">oneline</span>  <span class="c1">// 单行显示log
</span><span class="ln"> 2</span><span class="c1"></span><span class="n">a6070ce</span> <span class="o">(</span><span class="n">HEAD</span> <span class="o">-&gt;</span> <span class="n">master</span><span class="o">)</span> <span class="n">add</span> <span class="n">333</span>
<span class="ln"> 3</span><span class="n">9143841</span> <span class="n">add</span> <span class="n">222</span>
<span class="ln"> 4</span><span class="n">4a34a05</span> <span class="n">add</span> <span class="n">111</span>
<span class="ln"> 5</span><span class="n">b963c91</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">3</span>
<span class="ln"> 6</span><span class="n">219dc6b</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">2</span>
<span class="ln"> 7</span><span class="n">46a3927</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">1</span>
<span class="ln"> 8</span><span class="n">d77465c</span> <span class="n">add</span> <span class="n">more</span> <span class="n">text</span>
<span class="ln"> 9</span><span class="n">014b9c9</span> <span class="n">first</span> <span class="n">time</span> <span class="n">edit</span>
<span class="ln">10</span><span class="n">91151c2</span> <span class="n">my</span> <span class="n">first</span> <span class="n">commit</span>
<span class="ln">11</span><span class="n">$</span> <span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">hard</span> <span class="n">HEAD</span><span class="o">^</span>  <span class="c1">//一个 ^ 回退一个版本
</span><span class="ln">12</span><span class="c1"></span><span class="n">HEAD</span> <span class="n">is</span> <span class="n">now</span> <span class="n">at</span> <span class="n">9143841</span> <span class="n">add</span> <span class="n">222</span>
<span class="ln">13</span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>          
<span class="ln">14</span><span class="n">111</span>
<span class="ln">15</span><span class="n">222</span>
<span class="ln">16</span><span class="c1">// $ git reset --hard HEAD^^^^ //四个^^^^ 回退四个版本
</span><span class="ln">17</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">hard</span> <span class="n">HEAD</span><span class="o">~</span><span class="n">4</span>  <span class="c1">// HEAD~4 == HEAD^^^^
</span><span class="ln">18</span><span class="c1"></span><span class="n">HEAD</span> <span class="n">is</span> <span class="n">now</span> <span class="n">at</span> <span class="n">46a3927</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">1</span>
<span class="ln">19</span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>             
<span class="ln">20</span><span class="n">test</span> <span class="n">hello</span> <span class="n">world</span>
<span class="ln">21</span><span class="n">1111dwd</span> <span class="n">dwdd</span>
<span class="ln">22</span><span class="n">adad</span>
<span class="ln">23</span><span class="n">add</span> <span class="n">more1</span>
</code></pre></div><p><strong>恢复已删除文件</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">nano</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// 工作区新建文件aaa.txt
</span><span class="ln"> 2</span><span class="c1"></span><span class="n">$</span> <span class="n">ls</span>
<span class="ln"> 3</span><span class="n">aaa</span><span class="o">.</span><span class="na">txt</span>		<span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 4</span>  
<span class="ln"> 5</span><span class="n">$</span> <span class="n">git</span> <span class="n">add</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// 添加并提交新建文件到本地仓库
</span><span class="ln"> 6</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">add</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span><span class="err">&#39;</span>
<span class="ln"> 7</span><span class="o">[</span><span class="n">master</span> <span class="n">e377c41</span><span class="o">]</span> <span class="n">add</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 8</span> <span class="n">1</span> <span class="n">file</span> <span class="n">changed</span><span class="o">,</span> <span class="n">1</span> <span class="nf">insertion</span><span class="o">(+)</span>
<span class="ln"> 9</span> <span class="n">create</span> <span class="n">mode</span> <span class="n">100644</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">10</span><span class="n">$</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">oneline</span> <span class="c1">// 查看log
</span><span class="ln">11</span><span class="c1"></span><span class="n">e377c41</span> <span class="o">(</span><span class="n">HEAD</span> <span class="o">-&gt;</span> <span class="n">master</span><span class="o">)</span> <span class="n">add</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// 当前版本已添加新文件
</span><span class="ln">12</span><span class="c1"></span><span class="n">a6070ce</span> <span class="n">add</span> <span class="n">333</span>
<span class="ln">13</span><span class="n">9143841</span> <span class="n">add</span> <span class="n">222</span>
<span class="ln">14</span><span class="n">4a34a05</span> <span class="n">add</span> <span class="n">111</span>
<span class="ln">15</span><span class="n">b963c91</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">3</span>
<span class="ln">16</span><span class="n">219dc6b</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">2</span>
<span class="ln">17</span><span class="n">46a3927</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">1</span>
<span class="ln">18</span><span class="n">d77465c</span> <span class="n">add</span> <span class="n">more</span> <span class="n">text</span>
<span class="ln">19</span><span class="n">014b9c9</span> <span class="n">first</span> <span class="n">time</span> <span class="n">edit</span>
<span class="ln">20</span><span class="n">91151c2</span> <span class="n">my</span> <span class="n">first</span> <span class="n">commit</span>
<span class="ln">21</span>  
<span class="ln">22</span><span class="n">$</span> <span class="n">rm</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// remove 工作区新建的文件
</span><span class="ln">23</span><span class="c1"></span><span class="n">$</span> <span class="n">ls</span> 
<span class="ln">24</span><span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">25</span>  
<span class="ln">26</span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span> <span class="c1">//查看 git 暂存区当前状态
</span><span class="ln">27</span><span class="c1"></span><span class="n">On</span> <span class="n">branch</span> <span class="n">master</span>
<span class="ln">28</span><span class="n">Changes</span> <span class="n">not</span> <span class="n">staged</span> <span class="k">for</span> <span class="n">commit</span><span class="o">:</span>
<span class="ln">29</span>  <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git add/rm &lt;file&gt;...&#34;</span> <span class="n">to</span> <span class="n">update</span> <span class="n">what</span> <span class="n">will</span> <span class="n">be</span> <span class="n">committed</span><span class="o">)</span>
<span class="ln">30</span>  <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git checkout -- &lt;file&gt;...&#34;</span> <span class="n">to</span> <span class="n">discard</span> <span class="n">changes</span> <span class="n">in</span> <span class="n">working</span> <span class="n">directory</span><span class="o">)</span>
<span class="ln">31</span><span class="nl">
</span><span class="ln">32</span><span class="nl">	deleted:</span>    <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// 显示已删除但还未提交本地仓库
</span><span class="ln">33</span><span class="c1"></span>
<span class="ln">34</span><span class="n">no</span> <span class="n">changes</span> <span class="n">added</span> <span class="n">to</span> <span class="nf">commit</span> <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git add&#34;</span> <span class="n">and</span><span class="o">/</span><span class="n">or</span> <span class="s">&#34;git commit -a&#34;</span><span class="o">)</span>
<span class="ln">35</span>   
<span class="ln">36</span><span class="n">$</span> <span class="n">git</span> <span class="n">add</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//添加删除请求
</span><span class="ln">37</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span>
<span class="ln">38</span><span class="n">On</span> <span class="n">branch</span> <span class="n">master</span>
<span class="ln">39</span><span class="n">Changes</span> <span class="n">to</span> <span class="n">be</span> <span class="n">committed</span><span class="o">:</span>
<span class="ln">40</span>  <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git reset HEAD &lt;file&gt;...&#34;</span> <span class="n">to</span> <span class="n">unstage</span><span class="o">)</span> <span class="c1">// reset 可返回删除前版本
</span><span class="ln">41</span><span class="c1"></span><span class="nl">
</span><span class="ln">42</span><span class="nl">	deleted:</span>    <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span> 
<span class="ln">43</span>
<span class="ln">44</span><span class="n">$</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">delete</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span><span class="err">&#39;</span> <span class="c1">// 提交删除请求
</span><span class="ln">45</span><span class="c1"></span><span class="o">[</span><span class="n">master</span> <span class="n">a3c257a</span><span class="o">]</span> <span class="n">delete</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">46</span> <span class="n">1</span> <span class="n">file</span> <span class="n">changed</span><span class="o">,</span> <span class="n">1</span> <span class="nf">deletion</span><span class="o">(-)</span>
<span class="ln">47</span> <span class="n">delete</span> <span class="n">mode</span> <span class="n">100644</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">48</span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span> <span class="c1">// 查看暂存区状态，clean
</span><span class="ln">49</span><span class="c1"></span><span class="n">On</span> <span class="n">branch</span> <span class="n">master</span>
<span class="ln">50</span><span class="n">nothing</span> <span class="n">to</span> <span class="n">commit</span><span class="o">,</span> <span class="n">working</span> <span class="n">tree</span> <span class="n">clean</span>
<span class="ln">51</span>    
<span class="ln">52</span><span class="n">$</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">oneline</span> <span class="c1">//查看日志
</span><span class="ln">53</span><span class="c1"></span><span class="n">a3c257a</span> <span class="o">(</span><span class="n">HEAD</span> <span class="o">-&gt;</span> <span class="n">master</span><span class="o">)</span> <span class="n">delete</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//当前版本
</span><span class="ln">54</span><span class="c1"></span><span class="n">e377c41</span> <span class="n">add</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//新建文件版本
</span><span class="ln">55</span><span class="c1"></span><span class="n">a6070ce</span> <span class="n">add</span> <span class="n">333</span>
<span class="ln">56</span><span class="n">9143841</span> <span class="n">add</span> <span class="n">222</span>
<span class="ln">57</span><span class="n">4a34a05</span> <span class="n">add</span> <span class="n">111</span>
<span class="ln">58</span><span class="n">b963c91</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">3</span>
<span class="ln">59</span><span class="n">219dc6b</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">2</span>
<span class="ln">60</span><span class="n">46a3927</span> <span class="n">add</span> <span class="n">more</span> <span class="n">test</span> <span class="n">1</span>
<span class="ln">61</span><span class="n">d77465c</span> <span class="n">add</span> <span class="n">more</span> <span class="n">text</span>
<span class="ln">62</span><span class="n">014b9c9</span> <span class="n">first</span> <span class="n">time</span> <span class="n">edit</span>
<span class="ln">63</span><span class="n">91151c2</span> <span class="n">my</span> <span class="n">first</span> <span class="n">commit</span>
<span class="ln">64</span><span class="n">$</span> <span class="n">ls</span> <span class="c1">// ls -l 可查看文件信息
</span><span class="ln">65</span><span class="c1"></span><span class="n">test</span><span class="o">.</span><span class="na">txt</span>   
<span class="ln">66</span>
<span class="ln">67</span><span class="n">$</span> <span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">hard</span> <span class="n">e377c41</span> <span class="c1">//恢复删除之前版本
</span><span class="ln">68</span><span class="c1"></span><span class="n">HEAD</span> <span class="n">is</span> <span class="n">now</span> <span class="n">at</span> <span class="n">e377c41</span> <span class="n">add</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">69</span><span class="err">¥</span> <span class="n">ls</span> <span class="c1">// 查看文件aaa.txt 已恢复
</span><span class="ln">70</span><span class="c1"></span><span class="n">aaa</span><span class="o">.</span><span class="na">txt</span>		<span class="n">test</span><span class="o">.</span><span class="na">txt</span>
</code></pre></div><p><strong><code>git diff [file]</code> 比较文件差异</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="c1">// diff 不仅可以和工作区文件进行比较，还可以和暂存区，本地库之前各文件进行比较
</span><span class="ln"> 2</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">diff</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span> 
<span class="ln"> 3</span><span class="n">diff</span> <span class="o">--</span><span class="n">git</span> <span class="n">a</span><span class="o">/</span><span class="n">aaa</span><span class="o">.</span><span class="na">txt</span> <span class="n">b</span><span class="o">/</span><span class="n">aaa</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 4</span><span class="n">index</span> <span class="n">41cfa54</span><span class="o">..</span><span class="na">e452369</span> <span class="n">100644</span>
<span class="ln"> 5</span><span class="o">---</span> <span class="n">a</span><span class="o">/</span><span class="n">aaa</span><span class="o">.</span><span class="na">txt</span> 
<span class="ln"> 6</span><span class="o">+++</span> <span class="n">b</span><span class="o">/</span><span class="n">aaa</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 7</span><span class="err">@@</span> <span class="o">-</span><span class="n">1</span> <span class="o">+</span><span class="n">1</span><span class="o">,</span><span class="n">3</span> <span class="err">@@</span>
<span class="ln"> 8</span> <span class="n">crated</span> <span class="k">for</span> <span class="n">delete</span> <span class="n">testing</span>
<span class="ln"> 9</span><span class="o">+</span><span class="n">addd</span> <span class="c1">// +表示新增行
</span><span class="ln">10</span><span class="c1"></span><span class="o">+</span><span class="n">addd</span> <span class="c1">// +表示新增行
</span></code></pre></div><h2 id="git-branch"><code>git branch</code></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">  1</span><span class="n">$</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">v</span> <span class="c1">// 产看全部分支
</span><span class="ln">  2</span><span class="c1"></span><span class="o">*</span> <span class="n">master</span> <span class="n">01c9112</span> <span class="n">edit</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">  3</span>  
<span class="ln">  4</span><span class="n">$</span> <span class="n">git</span> <span class="n">branch</span> <span class="n">hot_fix</span> <span class="c1">// 创建新的分支
</span><span class="ln">  5</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">v</span>
<span class="ln">  6</span>  <span class="c1">// 此时版本hash值是一样的 01c9112，说明分支和master处于同一个版本
</span><span class="ln">  7</span><span class="c1"></span>  <span class="n">hot_fix</span> <span class="n">01c9112</span> <span class="n">edit</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span> 
<span class="ln">  8</span><span class="o">*</span> <span class="n">master</span>  <span class="n">01c9112</span> <span class="n">edit</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// * 表示现在目前坐在分支
</span><span class="ln">  9</span><span class="c1"></span>  
<span class="ln"> 10</span><span class="n">$</span> <span class="n">git</span> <span class="n">checkout</span> <span class="n">hot_fix</span> <span class="c1">// 切换分支
</span><span class="ln"> 11</span><span class="c1"></span><span class="n">Switched</span> <span class="n">to</span> <span class="n">branch</span> <span class="err">&#39;</span><span class="n">hot_fix</span><span class="err">&#39;</span>
<span class="ln"> 12</span><span class="n">$</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">v</span>       
<span class="ln"> 13</span><span class="o">*</span> <span class="n">hot_fix</span> <span class="n">01c9112</span> <span class="n">edit</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span>  <span class="c1">// 分支切换到 * hot_fix
</span><span class="ln"> 14</span><span class="c1"></span>  <span class="n">master</span>  <span class="n">01c9112</span> <span class="n">edit</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 15</span>  
<span class="ln"> 16</span><span class="n">$</span> <span class="n">nano</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// 在 hot_fix分支上修改 test.txt文件
</span><span class="ln"> 17</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">add</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//提交修改
</span><span class="ln"> 18</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">edit</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="n">by</span> <span class="n">hot_fix</span><span class="err">&#39;</span>
<span class="ln"> 19</span><span class="o">[</span><span class="n">hot_fix</span> <span class="n">e2b708c</span><span class="o">]</span> <span class="n">edit</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="n">by</span> <span class="n">hot_fix</span>
<span class="ln"> 20</span> <span class="n">1</span> <span class="n">file</span> <span class="n">changed</span><span class="o">,</span> <span class="n">1</span> <span class="nf">insertion</span><span class="o">(+)</span>
<span class="ln"> 21</span><span class="n">$</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">v</span> 
<span class="ln"> 22</span>  <span class="c1">//查看分支发现新分支和master的 hash值 已经不一样了，说明分支版本已跟新
</span><span class="ln"> 23</span><span class="c1"></span><span class="o">*</span> <span class="n">hot_fix</span> <span class="n">e2b708c</span> <span class="n">edit</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="n">by</span> <span class="n">hot_fix</span>
<span class="ln"> 24</span>  <span class="n">master</span>  <span class="n">01c9112</span> <span class="n">edit</span> <span class="n">aaa</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 25</span>  
<span class="ln"> 26</span><span class="c1">// 合并分支前，要先切换到你想要跟新的分支上，比如你想把hot_fix分支合并到master分支，就需要先切换到master分支，再把hot_fix分支合并进来。 
</span><span class="ln"> 27</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">checkout</span> <span class="n">master</span>
<span class="ln"> 28</span><span class="n">Switched</span> <span class="n">to</span> <span class="n">branch</span> <span class="err">&#39;</span><span class="n">master</span><span class="err">&#39;</span>
<span class="ln"> 29</span><span class="n">$</span> <span class="n">git</span> <span class="n">branch</span>
<span class="ln"> 30</span>  <span class="n">hot_fix</span>
<span class="ln"> 31</span><span class="o">*</span> <span class="n">master</span>  <span class="c1">// 切换到meter分支
</span><span class="ln"> 32</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">merge</span> <span class="n">hot_fix</span> <span class="c1">// 把hot_fix分支 合并到 master分支
</span><span class="ln"> 33</span><span class="c1"></span><span class="n">Updating</span> <span class="n">01c9112</span><span class="o">..</span><span class="na">e2b708c</span>
<span class="ln"> 34</span><span class="n">Fast</span><span class="o">-</span><span class="n">forward</span>
<span class="ln"> 35</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="o">|</span> <span class="n">1</span> <span class="o">+</span>
<span class="ln"> 36</span> <span class="n">1</span> <span class="n">file</span> <span class="n">changed</span><span class="o">,</span> <span class="n">1</span> <span class="nf">insertion</span><span class="o">(+)</span>
<span class="ln"> 37</span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//查看文件，合并成功
</span><span class="ln"> 38</span><span class="c1"></span><span class="n">111</span>
<span class="ln"> 39</span><span class="n">222</span>
<span class="ln"> 40</span><span class="n">333</span>
<span class="ln"> 41</span><span class="n">444</span> <span class="n">add</span> <span class="n">by</span> <span class="n">hot_fix</span> <span class="c1">//这一行是hot_fix分支修改后合并到master的
</span><span class="ln"> 42</span><span class="c1"></span>
<span class="ln"> 43</span><span class="n">$</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">v</span> <span class="c1">//合并完成后分支和master hash值一样 e2b708c
</span><span class="ln"> 44</span><span class="c1"></span>  <span class="n">hot_fix</span> <span class="n">e2b708c</span> <span class="n">edit</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="n">by</span> <span class="n">hot_fix</span>
<span class="ln"> 45</span><span class="o">*</span> <span class="n">master</span>  <span class="n">e2b708c</span> <span class="n">edit</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="n">by</span> <span class="n">hot_fix</span>
<span class="ln"> 46</span>
<span class="ln"> 47</span><span class="c1">//处理合并冲突conflict
</span><span class="ln"> 48</span><span class="c1"></span><span class="n">$</span> <span class="n">nano</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//在master修改文件
</span><span class="ln"> 49</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">add</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 50</span><span class="n">$</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">add</span> <span class="n">555</span> <span class="n">by</span> <span class="n">master</span><span class="err">&#39;</span>
<span class="ln"> 51</span><span class="o">[</span><span class="n">master</span> <span class="n">154943a</span><span class="o">]</span> <span class="n">add</span> <span class="n">555</span> <span class="n">by</span> <span class="n">master</span>
<span class="ln"> 52</span> <span class="n">1</span> <span class="n">file</span> <span class="n">changed</span><span class="o">,</span> <span class="n">2</span> <span class="nf">insertions</span><span class="o">(+),</span> <span class="n">1</span> <span class="nf">deletion</span><span class="o">(-)</span>
<span class="ln"> 53</span><span class="n">$</span> <span class="n">git</span> <span class="n">checkout</span> <span class="n">hot_fix</span> <span class="c1">//切换到hot分支再修改文件
</span><span class="ln"> 54</span><span class="c1"></span><span class="n">Switched</span> <span class="n">to</span> <span class="n">branch</span> <span class="err">&#39;</span><span class="n">hot_fix</span><span class="err">&#39;</span>
<span class="ln"> 55</span><span class="n">$</span> <span class="n">nano</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 56</span><span class="n">$</span> <span class="n">git</span> <span class="n">add</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 57</span><span class="n">$</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">add</span> <span class="n">666</span> <span class="n">by</span> <span class="n">hot_fix</span><span class="err">&#39;</span>
<span class="ln"> 58</span><span class="o">[</span><span class="n">hot_fix</span> <span class="n">f22571f</span><span class="o">]</span> <span class="n">add</span> <span class="n">666</span> <span class="n">by</span> <span class="n">hot_fix</span>
<span class="ln"> 59</span> <span class="n">1</span> <span class="n">file</span> <span class="n">changed</span><span class="o">,</span> <span class="n">1</span> <span class="nf">insertion</span><span class="o">(+)</span>
<span class="ln"> 60</span><span class="n">$</span> <span class="n">git</span> <span class="n">merge</span> <span class="n">master</span> <span class="c1">// 合并冲突
</span><span class="ln"> 61</span><span class="c1"></span><span class="n">Auto</span><span class="o">-</span><span class="n">merging</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 62</span><span class="nf">CONFLICT</span> <span class="o">(</span><span class="n">content</span><span class="o">):</span> <span class="n">Merge</span> <span class="n">conflict</span> <span class="n">in</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 63</span><span class="n">Automatic</span> <span class="n">merge</span> <span class="n">failed</span><span class="o">;</span> <span class="n">fix</span> <span class="n">conflicts</span> <span class="n">and</span> <span class="n">then</span> <span class="n">commit</span> <span class="n">the</span> <span class="n">result</span><span class="o">.</span>  
<span class="ln"> 64</span>
<span class="ln"> 65</span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//查看文件会发现 git 在文件内有标记conflict的位置
</span><span class="ln"> 66</span><span class="c1"></span><span class="n">111</span>
<span class="ln"> 67</span><span class="n">222</span>
<span class="ln"> 68</span><span class="n">333</span>
<span class="ln"> 69</span><span class="o">&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class="n">HEAD</span>  
<span class="ln"> 70</span><span class="n">444</span> <span class="n">add</span> <span class="n">by</span> <span class="n">hot_fix</span> 
<span class="ln"> 71</span><span class="n">666</span> <span class="n">add</span> <span class="n">by</span> <span class="n">hot_fix</span>
<span class="ln"> 72</span><span class="o">=======</span>
<span class="ln"> 73</span><span class="n">444</span> <span class="n">add</span> <span class="n">by</span> <span class="n">hot_fix</span>
<span class="ln"> 74</span><span class="n">555</span> <span class="n">add</span> <span class="n">by</span> <span class="n">master</span> 
<span class="ln"> 75</span><span class="o">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class="n">master</span>
<span class="ln"> 76</span>
<span class="ln"> 77</span><span class="n">$</span> <span class="n">nano</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//修改冲突
</span><span class="ln"> 78</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span> <span class="c1">//查看状态
</span><span class="ln"> 79</span><span class="c1"></span><span class="n">On</span> <span class="n">branch</span> <span class="n">hot_fix</span>
<span class="ln"> 80</span><span class="n">You</span> <span class="n">have</span> <span class="n">unmerged</span> <span class="n">paths</span><span class="o">.</span>
<span class="ln"> 81</span>  <span class="o">(</span><span class="n">fix</span> <span class="n">conflicts</span> <span class="n">and</span> <span class="n">run</span> <span class="s">&#34;git commit&#34;</span><span class="o">)</span>
<span class="ln"> 82</span>  <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git merge --abort&#34;</span> <span class="n">to</span> <span class="n">abort</span> <span class="n">the</span> <span class="n">merge</span><span class="o">)</span>
<span class="ln"> 83</span>
<span class="ln"> 84</span><span class="n">Unmerged</span> <span class="n">paths</span><span class="o">:</span>
<span class="ln"> 85</span>  <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git add &lt;file&gt;...&#34;</span> <span class="n">to</span> <span class="n">mark</span> <span class="n">resolution</span><span class="o">)</span>
<span class="ln"> 86</span>
<span class="ln"> 87</span>	<span class="n">both</span> <span class="n">modified</span><span class="o">:</span>   <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//所有冲突都被修改
</span><span class="ln"> 88</span><span class="c1"></span>
<span class="ln"> 89</span><span class="n">no</span> <span class="n">changes</span> <span class="n">added</span> <span class="n">to</span> <span class="nf">commit</span> <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git add&#34;</span> <span class="n">and</span><span class="o">/</span><span class="n">or</span> <span class="s">&#34;git commit -a&#34;</span><span class="o">)</span>
<span class="ln"> 90</span><span class="n">$</span> <span class="n">git</span> <span class="n">add</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//添加修改
</span><span class="ln"> 91</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span>      
<span class="ln"> 92</span><span class="n">On</span> <span class="n">branch</span> <span class="n">hot_fix</span>
<span class="ln"> 93</span><span class="n">All</span> <span class="n">conflicts</span> <span class="n">fixed</span> <span class="n">but</span> <span class="n">you</span> <span class="n">are</span> <span class="n">still</span> <span class="n">merging</span><span class="o">.</span>
<span class="ln"> 94</span>  <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git commit&#34;</span> <span class="n">to</span> <span class="n">conclude</span> <span class="n">merge</span><span class="o">)</span>
<span class="ln"> 95</span>
<span class="ln"> 96</span><span class="n">Changes</span> <span class="n">to</span> <span class="n">be</span> <span class="n">committed</span><span class="o">:</span>
<span class="ln"> 97</span><span class="nl">
</span><span class="ln"> 98</span><span class="nl">	modified:</span>   <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//修改完成
</span><span class="ln"> 99</span><span class="c1"></span>
<span class="ln">100</span><span class="n">$</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">resolve</span> <span class="n">conflict</span><span class="err">&#39;</span> <span class="c1">//提交修改
</span><span class="ln">101</span><span class="c1"></span><span class="o">[</span><span class="n">hot_fix</span> <span class="n">7da1a5d</span><span class="o">]</span> <span class="n">resolve</span> <span class="n">conflict</span>
<span class="ln">102</span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span>  <span class="c1">//clean
</span><span class="ln">103</span><span class="c1"></span><span class="n">On</span> <span class="n">branch</span> <span class="n">hot_fix</span>
<span class="ln">104</span><span class="n">nothing</span> <span class="n">to</span> <span class="n">commit</span><span class="o">,</span> <span class="n">working</span> <span class="n">tree</span> <span class="n">clean</span>
<span class="ln">105</span><span class="n">$</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">v</span>
<span class="ln">106</span><span class="o">*</span> <span class="n">hot_fix</span> <span class="n">7da1a5d</span> <span class="n">resolve</span> <span class="n">conflict</span>
<span class="ln">107</span>  <span class="n">master</span>  <span class="n">154943a</span> <span class="n">add</span> <span class="n">555</span> <span class="n">by</span> <span class="n">master</span>
<span class="ln">108</span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">109</span><span class="n">111</span>
<span class="ln">110</span><span class="n">222</span>
<span class="ln">111</span><span class="n">333</span>
<span class="ln">112</span><span class="n">444</span> <span class="n">add</span> <span class="n">by</span> <span class="n">hot_fix</span>
<span class="ln">113</span><span class="n">555</span> <span class="n">add</span> <span class="n">by</span> <span class="n">master</span>
<span class="ln">114</span>
</code></pre></div><h2 id="github">Github</h2>
<h3 id="新建本地工作文件夹并提交到git本地仓库">新建本地工作文件夹并提交到git本地仓库</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">cd</span> <span class="n">githubtest</span>
<span class="ln"> 2</span><span class="n">$</span> <span class="n">git</span> <span class="n">init</span>
<span class="ln"> 3</span><span class="n">Initialized</span> <span class="n">empty</span> <span class="n">Git</span> <span class="n">repository</span> <span class="n">in</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">daiwei</span><span class="o">/</span><span class="n">Desktop</span><span class="o">/</span><span class="n">githubtest</span><span class="o">/.</span><span class="na">git</span><span class="o">/</span>
<span class="ln"> 4</span><span class="n">$</span> <span class="n">nano</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 5</span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 6</span><span class="n">test</span> <span class="n">1</span> <span class="n">3</span> <span class="n">3</span>
<span class="ln"> 7</span><span class="n">$</span> <span class="n">git</span> <span class="n">add</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 8</span><span class="n">$</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">test</span> <span class="n">github</span><span class="err">&#39;</span>
<span class="ln"> 9</span><span class="o">[</span><span class="n">master</span> <span class="o">(</span><span class="n">root</span><span class="o">-</span><span class="n">commit</span><span class="o">)</span> <span class="n">fca7556</span><span class="o">]</span> <span class="n">test</span> <span class="n">github</span>
<span class="ln">10</span> <span class="n">1</span> <span class="n">file</span> <span class="n">changed</span><span class="o">,</span> <span class="n">1</span> <span class="nf">insertion</span><span class="o">(+)</span>
<span class="ln">11</span> <span class="n">create</span> <span class="n">mode</span> <span class="n">100644</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
</code></pre></div><h3 id="git-remote-add">git remote add</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">$</span> <span class="n">git</span> <span class="n">remote</span> <span class="o">-</span><span class="n">v</span> <span class="c1">// 没有添加远程仓库之前， -v　是空的没有东西显示
</span><span class="ln">2</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">remote</span> <span class="n">add</span> <span class="n">origin</span> <span class="n">https</span><span class="o">:</span><span class="c1">//github.com/daiweinus/githubtest.git 
</span><span class="ln">3</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">remote</span> <span class="o">-</span><span class="n">v</span> <span class="c1">// 添加远程仓库之后， -v 可见远程仓库地址了
</span><span class="ln">4</span><span class="c1"></span><span class="n">origin</span>	<span class="n">https</span><span class="o">:</span><span class="c1">//github.com/daiweinus/githubtest.git (fetch)
</span><span class="ln">5</span><span class="c1"></span><span class="n">origin</span>	<span class="n">https</span><span class="o">:</span><span class="c1">//github.com/daiweinus/githubtest.git (push)
</span></code></pre></div><h3 id="git-push">git push</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">$</span> <span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="n">master</span> <span class="c1">// push到你的远程仓库 master 分支上
</span><span class="ln">2</span><span class="c1"></span><span class="n">Username</span> <span class="k">for</span> <span class="err">&#39;</span><span class="n">https</span><span class="o">:</span><span class="c1">//github.com&#39;: yourusername
</span><span class="ln">3</span><span class="c1"></span><span class="n">Password</span> <span class="k">for</span> <span class="err">&#39;</span><span class="n">https</span><span class="o">:</span><span class="c1">//yourusername@github.com&#39;: yourPAT [personal access token]
</span><span class="ln">4</span><span class="c1"></span><span class="n">Enumerating</span> <span class="n">objects</span><span class="o">:</span> <span class="n">3</span><span class="o">,</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">5</span><span class="n">Counting</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">3</span><span class="o">/</span><span class="n">3</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">6</span><span class="n">Writing</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">3</span><span class="o">/</span><span class="n">3</span><span class="o">),</span> <span class="n">217</span> <span class="n">bytes</span> <span class="o">|</span> <span class="n">217</span><span class="o">.</span><span class="na">00</span> <span class="n">KiB</span><span class="o">/</span><span class="n">s</span><span class="o">,</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">7</span><span class="n">Total</span> <span class="nf">3</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">),</span> <span class="n">reused</span> <span class="nf">0</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">)</span>
<span class="ln">8</span><span class="n">To</span> <span class="n">https</span><span class="o">:</span><span class="c1">//github.com/yourusername/githubtest.git
</span><span class="ln">9</span><span class="c1"></span> <span class="o">*</span> <span class="o">[</span><span class="k">new</span> <span class="n">branch</span><span class="o">]</span>      <span class="n">master</span> <span class="o">-&gt;</span> <span class="n">master</span>
</code></pre></div><h3 id="git-clone">git clone</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">git</span> <span class="n">clone</span> <span class="n">https</span><span class="o">:</span><span class="c1">//github.com/yourusername/githubtest.git
</span><span class="ln"> 2</span><span class="c1"></span><span class="n">Cloning</span> <span class="n">into</span> <span class="err">&#39;</span><span class="n">githubtest</span><span class="err">&#39;</span><span class="o">...</span>
<span class="ln"> 3</span><span class="nl">remote:</span> <span class="n">Enumerating</span> <span class="n">objects</span><span class="o">:</span> <span class="n">3</span><span class="o">,</span> <span class="n">done</span><span class="o">.</span>
<span class="ln"> 4</span><span class="nl">remote:</span> <span class="n">Counting</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">3</span><span class="o">/</span><span class="n">3</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln"> 5</span><span class="nl">remote:</span> <span class="n">Total</span> <span class="nf">3</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">),</span> <span class="n">reused</span> <span class="nf">3</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">),</span> <span class="n">pack</span><span class="o">-</span><span class="n">reused</span> <span class="n">0</span>
<span class="ln"> 6</span><span class="n">Unpacking</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">3</span><span class="o">/</span><span class="n">3</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln"> 7</span>  
<span class="ln"> 8</span><span class="n">yanqin</span><span class="nd">@35</span> <span class="n">github_clone</span> <span class="o">%</span> <span class="n">ls</span>  <span class="c1">// 1.clone完成后远程仓库文件已下载到本地仓库
</span><span class="ln"> 9</span><span class="c1"></span><span class="n">githubtest</span>
<span class="ln">10</span><span class="n">$</span> <span class="n">cd</span> <span class="n">githubtest</span>
<span class="ln">11</span><span class="n">$</span> <span class="n">ls</span>
<span class="ln">12</span><span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">13</span><span class="n">$</span> <span class="n">ls</span> <span class="o">-</span><span class="n">lA</span>
<span class="ln">14</span><span class="n">total</span> <span class="n">8</span>
<span class="ln">15</span><span class="n">drwxr</span><span class="o">-</span><span class="n">xr</span><span class="o">-</span><span class="n">x</span>  <span class="n">12</span> <span class="n">yanqin</span>  <span class="n">staff</span>  <span class="n">384</span> <span class="n">15</span> <span class="n">Nov</span> <span class="n">12</span><span class="o">:</span><span class="n">20</span> <span class="o">.</span><span class="na">git</span> <span class="c1">// 2.clone会自动初始化本地git仓库
</span><span class="ln">16</span><span class="c1"></span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span><span class="n">r</span><span class="o">--</span>   <span class="n">1</span> <span class="n">yanqin</span>  <span class="n">staff</span>   <span class="n">11</span> <span class="n">15</span> <span class="n">Nov</span> <span class="n">12</span><span class="o">:</span><span class="n">20</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">17</span><span class="n">$</span> <span class="n">git</span> <span class="n">remote</span> <span class="o">-</span><span class="n">v</span> <span class="c1">// 3.clone会自动帮本地仓库添加远程仓库
</span><span class="ln">18</span><span class="c1"></span><span class="n">origin</span>	<span class="n">https</span><span class="o">:</span><span class="c1">//github.com/yourusername/githubtest.git (fetch)
</span><span class="ln">19</span><span class="c1"></span><span class="n">origin</span>	<span class="n">https</span><span class="o">:</span><span class="c1">//github.com/yourusername/githubtest.git (push)
</span></code></pre></div><h3 id="git-fetch-拉取">git fetch 拉取</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">git</span> <span class="n">fetch</span> <span class="n">origin</span> <span class="n">master</span> <span class="c1">// 
</span><span class="ln"> 2</span><span class="c1"></span><span class="nl">remote:</span> <span class="n">Enumerating</span> <span class="n">objects</span><span class="o">:</span> <span class="n">5</span><span class="o">,</span> <span class="n">done</span><span class="o">.</span>
<span class="ln"> 3</span><span class="nl">remote:</span> <span class="n">Counting</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">5</span><span class="o">/</span><span class="n">5</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln"> 4</span><span class="nl">remote:</span> <span class="n">Total</span> <span class="nf">3</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">),</span> <span class="n">reused</span> <span class="nf">3</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">),</span> <span class="n">pack</span><span class="o">-</span><span class="n">reused</span> <span class="n">0</span>
<span class="ln"> 5</span><span class="n">Unpacking</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">3</span><span class="o">/</span><span class="n">3</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln"> 6</span><span class="n">From</span> <span class="n">https</span><span class="o">:</span><span class="c1">//github.com/yourusername/githubtest
</span><span class="ln"> 7</span><span class="c1"></span> <span class="o">*</span> <span class="n">branch</span>            <span class="n">master</span>     <span class="o">-&gt;</span> <span class="n">FETCH_HEAD</span>
<span class="ln"> 8</span>   <span class="n">fca7556</span><span class="o">..</span><span class="na">0495c81</span>  <span class="n">master</span>     <span class="o">-&gt;</span> <span class="n">origin</span><span class="o">/</span><span class="n">master</span>
<span class="ln"> 9</span>   
<span class="ln">10</span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// fetch后本地工作区文件并未改变
</span><span class="ln">11</span><span class="c1"></span><span class="n">test</span> <span class="n">1</span> <span class="n">3</span> <span class="n">3</span>
<span class="ln">12</span><span class="n">$</span> <span class="n">git</span> <span class="n">checkout</span> <span class="n">origin</span><span class="o">/</span><span class="n">master</span> <span class="c1">//查看本地git仓库
</span><span class="ln">13</span><span class="c1"></span><span class="nl">Note:</span> <span class="n">checking</span> <span class="n">out</span> <span class="err">&#39;</span><span class="n">origin</span><span class="o">/</span><span class="n">master</span><span class="err">&#39;</span><span class="o">.</span>
<span class="ln">14</span>
<span class="ln">15</span><span class="n">You</span> <span class="n">are</span> <span class="n">in</span> <span class="err">&#39;</span><span class="n">detached</span> <span class="n">HEAD</span><span class="err">&#39;</span> <span class="n">state</span><span class="o">.</span> <span class="n">You</span> <span class="n">can</span> <span class="n">look</span> <span class="n">around</span><span class="o">,</span> <span class="n">make</span> <span class="n">experimental</span>
<span class="ln">16</span><span class="n">changes</span> <span class="n">and</span> <span class="n">commit</span> <span class="n">them</span><span class="o">,</span> <span class="n">and</span> <span class="n">you</span> <span class="n">can</span> <span class="n">discard</span> <span class="n">any</span> <span class="n">commits</span> <span class="n">you</span> <span class="n">make</span> <span class="n">in</span> <span class="k">this</span>
<span class="ln">17</span><span class="n">state</span> <span class="n">without</span> <span class="n">impacting</span> <span class="n">any</span> <span class="n">branches</span> <span class="n">by</span> <span class="n">performing</span> <span class="n">another</span> <span class="n">checkout</span><span class="o">.</span>
<span class="ln">18</span>
<span class="ln">19</span><span class="n">If</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">create</span> <span class="n">a</span> <span class="k">new</span> <span class="n">branch</span> <span class="n">to</span> <span class="n">retain</span> <span class="n">commits</span> <span class="n">you</span> <span class="n">create</span><span class="o">,</span> <span class="n">you</span> <span class="n">may</span>
<span class="ln">20</span><span class="k">do</span> <span class="nf">so</span> <span class="o">(</span><span class="n">now</span> <span class="n">or</span> <span class="n">later</span><span class="o">)</span> <span class="n">by</span> <span class="n">using</span> <span class="o">-</span><span class="n">b</span> <span class="n">with</span> <span class="n">the</span> <span class="n">checkout</span> <span class="n">command</span> <span class="n">again</span><span class="o">.</span> <span class="n">Example</span><span class="o">:</span>
<span class="ln">21</span>
<span class="ln">22</span>  <span class="n">git</span> <span class="n">checkout</span> <span class="o">-</span><span class="n">b</span> <span class="o">&lt;</span><span class="k">new</span><span class="o">-</span><span class="n">branch</span><span class="o">-</span><span class="n">name</span><span class="o">&gt;</span>
<span class="ln">23</span>
<span class="ln">24</span><span class="n">HEAD</span> <span class="n">is</span> <span class="n">now</span> <span class="n">at</span> <span class="n">0495c81</span> <span class="n">clone</span> <span class="n">push</span> <span class="n">test</span>
<span class="ln">25</span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// fetch只是把远程仓库文件下载到了本地git仓库
</span><span class="ln">26</span><span class="c1"></span><span class="n">test</span> <span class="n">1</span> <span class="n">3</span> <span class="n">3</span>
<span class="ln">27</span><span class="n">github_clone</span> <span class="n">1</span> <span class="n">2</span> <span class="n">3</span>
</code></pre></div><h3 id="git-merge-合并">git merge 合并</h3>
<p>git merge vs git merge &ndash;no-ff 后者创建一个新的合并提交，让代码维护更加容易。</p>
<p><img src="https://i.stack.imgur.com/GGkZc.png" alt="git merge &ndash;no-ff 和 git merge 的区别"></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span> 
<span class="ln"> 2</span><span class="n">On</span> <span class="n">branch</span> <span class="n">master</span>
<span class="ln"> 3</span><span class="n">nothing</span> <span class="n">to</span> <span class="n">commit</span><span class="o">,</span> <span class="n">working</span> <span class="n">tree</span> <span class="n">clean</span>
<span class="ln"> 4</span><span class="n">$</span> <span class="n">git</span> <span class="n">merge</span> <span class="n">origin</span><span class="o">/</span><span class="n">master</span> <span class="c1">// 
</span><span class="ln"> 5</span><span class="c1"></span><span class="n">Updating</span> <span class="n">fca7556</span><span class="o">..</span><span class="na">0495c81</span>
<span class="ln"> 6</span><span class="n">Fast</span><span class="o">-</span><span class="n">forward</span>
<span class="ln"> 7</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="o">|</span> <span class="n">1</span> <span class="o">+</span>
<span class="ln"> 8</span> <span class="n">1</span> <span class="n">file</span> <span class="n">changed</span><span class="o">,</span> <span class="n">1</span> <span class="nf">insertion</span><span class="o">(+)</span>
<span class="ln"> 9</span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// merge完成后，工作区test文件已修改同步完成
</span><span class="ln">10</span><span class="c1"></span><span class="n">test</span> <span class="n">1</span> <span class="n">3</span> <span class="n">3</span>
<span class="ln">11</span><span class="n">github_clone</span> <span class="n">1</span> <span class="n">2</span> <span class="n">3</span>
</code></pre></div><h3 id="git-pull--fetch--merge">git pull = fetch + merge</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 2</span><span class="n">test</span> <span class="n">1</span> <span class="n">3</span> <span class="n">3</span>
<span class="ln"> 3</span><span class="n">github_clone</span> <span class="n">1</span> <span class="n">2</span> <span class="n">3</span>
<span class="ln"> 4</span>  
<span class="ln"> 5</span><span class="n">$</span> <span class="n">git</span> <span class="n">pull</span> <span class="n">origin</span> <span class="n">master</span> <span class="c1">//
</span><span class="ln"> 6</span><span class="c1"></span><span class="nl">remote:</span> <span class="n">Enumerating</span> <span class="n">objects</span><span class="o">:</span> <span class="n">5</span><span class="o">,</span> <span class="n">done</span><span class="o">.</span>
<span class="ln"> 7</span><span class="nl">remote:</span> <span class="n">Counting</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">5</span><span class="o">/</span><span class="n">5</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln"> 8</span><span class="nl">remote:</span> <span class="n">Total</span> <span class="nf">3</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">),</span> <span class="n">reused</span> <span class="nf">3</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">),</span> <span class="n">pack</span><span class="o">-</span><span class="n">reused</span> <span class="n">0</span>
<span class="ln"> 9</span><span class="n">Unpacking</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">3</span><span class="o">/</span><span class="n">3</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">10</span><span class="n">From</span> <span class="n">https</span><span class="o">:</span><span class="c1">//github.com/daiweinus/githubtest
</span><span class="ln">11</span><span class="c1"></span> <span class="o">*</span> <span class="n">branch</span>            <span class="n">master</span>     <span class="o">-&gt;</span> <span class="n">FETCH_HEAD</span>
<span class="ln">12</span>   <span class="n">0495c81</span><span class="o">..</span><span class="na">ad5056c</span>  <span class="n">master</span>     <span class="o">-&gt;</span> <span class="n">origin</span><span class="o">/</span><span class="n">master</span>
<span class="ln">13</span><span class="n">Updating</span> <span class="n">0495c81</span><span class="o">..</span><span class="na">ad5056c</span>
<span class="ln">14</span><span class="n">Fast</span><span class="o">-</span><span class="n">forward</span>
<span class="ln">15</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="o">|</span> <span class="n">1</span> <span class="o">+</span>
<span class="ln">16</span> <span class="n">1</span> <span class="n">file</span> <span class="n">changed</span><span class="o">,</span> <span class="n">1</span> <span class="nf">insertion</span><span class="o">(+)</span>
<span class="ln">17</span>   
<span class="ln">18</span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// pull = fetch + merge
</span><span class="ln">19</span><span class="c1"></span><span class="n">test</span> <span class="n">1</span> <span class="n">3</span> <span class="n">3</span>
<span class="ln">20</span><span class="n">github_clone</span> <span class="n">1</span> <span class="n">2</span> <span class="n">3</span>
<span class="ln">21</span><span class="n">github_clone</span> <span class="n">4</span> <span class="n">5</span> <span class="n">6</span>
</code></pre></div><h3 id="conflict">conflict</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// 原文件
</span><span class="ln"> 2</span><span class="c1"></span><span class="n">test</span> <span class="n">1</span> <span class="n">3</span> <span class="n">3</span>
<span class="ln"> 3</span><span class="n">github_clone</span> <span class="n">1</span> <span class="n">2</span> <span class="n">3</span>
<span class="ln"> 4</span><span class="n">github_clone</span> <span class="n">4</span> <span class="n">5</span> <span class="n">6</span>
<span class="ln"> 5</span><span class="n">$</span> <span class="n">nano</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// 在 master 仓库修改原文件
</span><span class="ln"> 6</span><span class="c1"></span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln"> 7</span><span class="n">test</span> <span class="n">1</span> <span class="n">3</span> <span class="n">3</span> <span class="n">by</span> <span class="n">gihub_master</span> <span class="c1">//
</span><span class="ln"> 8</span><span class="c1"></span><span class="n">github_clone</span> <span class="n">1</span> <span class="n">2</span> <span class="n">3</span>
<span class="ln"> 9</span><span class="n">github_clone</span> <span class="n">4</span> <span class="n">5</span> <span class="n">6</span>
<span class="ln">10</span><span class="n">$</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">edit</span> <span class="n">by</span> <span class="n">github_master</span><span class="err">&#39;</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//提交到本地仓库
</span><span class="ln">11</span><span class="c1"></span><span class="o">[</span><span class="n">master</span> <span class="n">8d3e36c</span><span class="o">]</span> <span class="n">edit</span> <span class="n">by</span> <span class="n">github_master</span>
<span class="ln">12</span> <span class="n">1</span> <span class="n">file</span> <span class="n">changed</span><span class="o">,</span> <span class="n">1</span> <span class="nf">insertion</span><span class="o">(+),</span> <span class="n">1</span> <span class="nf">deletion</span><span class="o">(-)</span>
<span class="ln">13</span><span class="n">$</span> <span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="n">master</span> <span class="c1">//push到远程仓库
</span><span class="ln">14</span><span class="c1"></span><span class="n">Enumerating</span> <span class="n">objects</span><span class="o">:</span> <span class="n">5</span><span class="o">,</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">15</span><span class="n">Counting</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">5</span><span class="o">/</span><span class="n">5</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">16</span><span class="n">Delta</span> <span class="n">compression</span> <span class="n">using</span> <span class="n">up</span> <span class="n">to</span> <span class="n">8</span> <span class="n">threads</span>
<span class="ln">17</span><span class="n">Compressing</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">2</span><span class="o">/</span><span class="n">2</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">18</span><span class="n">Writing</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">3</span><span class="o">/</span><span class="n">3</span><span class="o">),</span> <span class="n">293</span> <span class="n">bytes</span> <span class="o">|</span> <span class="n">293</span><span class="o">.</span><span class="na">00</span> <span class="n">KiB</span><span class="o">/</span><span class="n">s</span><span class="o">,</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">19</span><span class="n">Total</span> <span class="nf">3</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">),</span> <span class="n">reused</span> <span class="nf">0</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">)</span>
<span class="ln">20</span><span class="n">To</span> <span class="n">https</span><span class="o">:</span><span class="c1">//github.com/daiweinus/githubtest.git
</span><span class="ln">21</span><span class="c1"></span>   <span class="n">ad5056c</span><span class="o">..</span><span class="na">8d3e36c</span>  <span class="n">master</span> <span class="o">-&gt;</span> <span class="n">master</span>
<span class="ln">22</span>     
<span class="ln">23</span><span class="n">$</span> <span class="n">githubtest</span> <span class="o">%</span> <span class="n">cd</span> <span class="o">..</span> 
<span class="ln">24</span><span class="n">$</span> <span class="n">Desktop</span> <span class="o">%</span> <span class="n">cd</span> <span class="n">github_clone</span>
<span class="ln">25</span><span class="n">$</span> <span class="n">github_clone</span> <span class="o">%</span> <span class="n">cd</span> <span class="n">githubtest</span>
<span class="ln">26</span><span class="n">$</span> <span class="n">githubtest</span> <span class="o">%</span> <span class="n">ls</span> <span class="c1">// 切换到clone 仓库， 
</span><span class="ln">27</span><span class="c1"></span><span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">28</span><span class="n">$</span> <span class="n">nano</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">29</span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// 修改clone 仓库工作区文件
</span><span class="ln">30</span><span class="c1"></span><span class="n">test</span> <span class="n">1</span> <span class="n">3</span> <span class="n">3</span> <span class="n">by</span> <span class="n">github_clone</span>
<span class="ln">31</span><span class="n">github_clone</span> <span class="n">1</span> <span class="n">2</span> <span class="n">3</span>
<span class="ln">32</span><span class="n">github_clone</span> <span class="n">4</span> <span class="n">5</span> <span class="n">6</span>
<span class="ln">33</span><span class="n">$</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">test</span> <span class="n">conflict</span><span class="err">&#39;</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//提交到本地仓库
</span><span class="ln">34</span><span class="c1"></span><span class="o">[</span><span class="n">master</span> <span class="n">f8c19a2</span><span class="o">]</span> <span class="n">test</span> <span class="n">conflict</span>
<span class="ln">35</span> <span class="n">1</span> <span class="n">file</span> <span class="n">changed</span><span class="o">,</span> <span class="n">1</span> <span class="nf">insertion</span><span class="o">(+),</span> <span class="n">1</span> <span class="nf">deletion</span><span class="o">(-)</span>
<span class="ln">36</span><span class="n">$</span> <span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="n">master</span>  <span class="c1">// 也push到远程仓库
</span><span class="ln">37</span><span class="c1"></span><span class="n">To</span> <span class="n">https</span><span class="o">:</span><span class="c1">//github.com/daiweinus/githubtest.git 
</span><span class="ln">38</span><span class="c1"></span> <span class="o">!</span> <span class="o">[</span><span class="n">rejected</span><span class="o">]</span>        <span class="n">master</span> <span class="o">-&gt;</span> <span class="n">master</span> <span class="o">(</span><span class="n">fetch</span> <span class="n">first</span><span class="o">)</span> <span class="c1">//push悲剧
</span><span class="ln">39</span><span class="c1"></span><span class="nl">error:</span> <span class="n">failed</span> <span class="n">to</span> <span class="n">push</span> <span class="n">some</span> <span class="n">refs</span> <span class="n">to</span> <span class="err">&#39;</span><span class="n">https</span><span class="o">:</span><span class="c1">//github.com/daiweinus/githubtest.git&#39;
</span><span class="ln">40</span><span class="c1"></span><span class="nl">hint:</span> <span class="n">Updates</span> <span class="n">were</span> <span class="n">rejected</span> <span class="n">because</span> <span class="n">the</span> <span class="n">remote</span> <span class="n">contains</span> <span class="n">work</span> <span class="n">that</span> <span class="n">you</span> <span class="k">do</span>
<span class="ln">41</span><span class="nl">hint:</span> <span class="n">not</span> <span class="n">have</span> <span class="n">locally</span><span class="o">.</span> <span class="n">This</span> <span class="n">is</span> <span class="n">usually</span> <span class="n">caused</span> <span class="n">by</span> <span class="n">another</span> <span class="n">repository</span> <span class="n">pushing</span>
<span class="ln">42</span><span class="nl">hint:</span> <span class="n">to</span> <span class="n">the</span> <span class="n">same</span> <span class="n">ref</span><span class="o">.</span> <span class="n">You</span> <span class="n">may</span> <span class="n">want</span> <span class="n">to</span> <span class="n">first</span> <span class="n">integrate</span> <span class="n">the</span> <span class="n">remote</span> <span class="n">changes</span>
<span class="ln">43</span><span class="nl">hint:</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">g</span><span class="o">.,</span> <span class="err">&#39;</span><span class="n">git</span> <span class="n">pull</span> <span class="o">...</span><span class="err">&#39;</span><span class="o">)</span> <span class="n">before</span> <span class="n">pushing</span> <span class="n">again</span><span class="o">.</span> <span class="c1">//提示先pull before push
</span><span class="ln">44</span><span class="c1"></span><span class="nl">hint:</span> <span class="n">See</span> <span class="n">the</span> <span class="err">&#39;</span><span class="n">Note</span> <span class="n">about</span> <span class="n">fast</span><span class="o">-</span><span class="n">forwards</span><span class="err">&#39;</span> <span class="n">in</span> <span class="err">&#39;</span><span class="n">git</span> <span class="n">push</span> <span class="o">--</span><span class="n">help</span><span class="err">&#39;</span> <span class="k">for</span> <span class="n">details</span><span class="o">.</span>
<span class="ln">45</span>  
<span class="ln">46</span><span class="n">$</span> <span class="n">git</span> <span class="n">pull</span> <span class="n">origin</span> <span class="n">master</span> <span class="c1">// pull远处仓库
</span><span class="ln">47</span><span class="c1"></span><span class="nl">remote:</span> <span class="n">Enumerating</span> <span class="n">objects</span><span class="o">:</span> <span class="n">5</span><span class="o">,</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">48</span><span class="nl">remote:</span> <span class="n">Counting</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">5</span><span class="o">/</span><span class="n">5</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">49</span><span class="nl">remote:</span> <span class="n">Compressing</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">2</span><span class="o">/</span><span class="n">2</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">50</span><span class="nl">remote:</span> <span class="n">Total</span> <span class="nf">3</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">),</span> <span class="n">reused</span> <span class="nf">3</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">),</span> <span class="n">pack</span><span class="o">-</span><span class="n">reused</span> <span class="n">0</span>
<span class="ln">51</span><span class="n">Unpacking</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">3</span><span class="o">/</span><span class="n">3</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">52</span><span class="n">From</span> <span class="n">https</span><span class="o">:</span><span class="c1">//github.com/daiweinus/githubtest
</span><span class="ln">53</span><span class="c1"></span> <span class="o">*</span> <span class="n">branch</span>            <span class="n">master</span>     <span class="o">-&gt;</span> <span class="n">FETCH_HEAD</span>
<span class="ln">54</span>   <span class="n">ad5056c</span><span class="o">..</span><span class="na">8d3e36c</span>  <span class="n">master</span>     <span class="o">-&gt;</span> <span class="n">origin</span><span class="o">/</span><span class="n">master</span>
<span class="ln">55</span><span class="n">Auto</span><span class="o">-</span><span class="n">merging</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span>
<span class="ln">56</span><span class="nf">CONFLICT</span> <span class="o">(</span><span class="n">content</span><span class="o">):</span> <span class="n">Merge</span> <span class="n">conflict</span> <span class="n">in</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">// 提示有conflict 
</span><span class="ln">57</span><span class="c1"></span><span class="n">Automatic</span> <span class="n">merge</span> <span class="n">failed</span><span class="o">;</span> <span class="n">fix</span> <span class="n">conflicts</span> <span class="n">and</span> <span class="n">then</span> <span class="n">commit</span> <span class="n">the</span> <span class="n">result</span><span class="o">.</span>
<span class="ln">58</span><span class="n">$</span> <span class="n">nano</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//修改本地仓库冲突文件，去掉特殊符号，保留想要修改的内容
</span><span class="ln">59</span><span class="c1"></span><span class="n">$</span> <span class="n">cat</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> 
<span class="ln">60</span><span class="n">test</span> <span class="n">1</span> <span class="n">3</span> <span class="n">3</span> <span class="n">by</span> <span class="n">github_clone</span>
<span class="ln">61</span><span class="n">test</span> <span class="n">1</span> <span class="n">3</span> <span class="n">3</span> <span class="n">by</span> <span class="n">gihub_master</span>
<span class="ln">62</span><span class="n">github_clone</span> <span class="n">1</span> <span class="n">2</span> <span class="n">3</span>
<span class="ln">63</span><span class="n">github_clone</span> <span class="n">4</span> <span class="n">5</span> <span class="n">6</span>
<span class="ln">64</span><span class="n">$</span> <span class="n">git</span> <span class="n">add</span> <span class="n">test</span><span class="o">.</span><span class="na">txt</span> <span class="c1">//从新提交修改后的文件到本地仓库
</span><span class="ln">65</span><span class="c1"></span><span class="n">$</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">resolve</span> <span class="n">conflict</span><span class="err">&#39;</span>
<span class="ln">66</span><span class="o">[</span><span class="n">master</span> <span class="n">9209bdb</span><span class="o">]</span> <span class="n">resolve</span> <span class="n">conflict</span>
<span class="ln">67</span><span class="n">$</span> <span class="n">git</span> <span class="n">status</span> 
<span class="ln">68</span><span class="n">On</span> <span class="n">branch</span> <span class="n">master</span>
<span class="ln">69</span><span class="n">Your</span> <span class="n">branch</span> <span class="n">is</span> <span class="n">ahead</span> <span class="n">of</span> <span class="err">&#39;</span><span class="n">origin</span><span class="o">/</span><span class="n">master</span><span class="err">&#39;</span> <span class="n">by</span> <span class="n">2</span> <span class="n">commits</span><span class="o">.</span>
<span class="ln">70</span>  <span class="o">(</span><span class="n">use</span> <span class="s">&#34;git push&#34;</span> <span class="n">to</span> <span class="n">publish</span> <span class="n">your</span> <span class="n">local</span> <span class="n">commits</span><span class="o">)</span>
<span class="ln">71</span>
<span class="ln">72</span><span class="n">nothing</span> <span class="n">to</span> <span class="n">commit</span><span class="o">,</span> <span class="n">working</span> <span class="n">tree</span> <span class="n">clean</span>
<span class="ln">73</span><span class="n">$</span> <span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="n">master</span> <span class="c1">// 再次从本地仓库push到远程仓库，无冲突
</span><span class="ln">74</span><span class="c1"></span><span class="n">Enumerating</span> <span class="n">objects</span><span class="o">:</span> <span class="n">10</span><span class="o">,</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">75</span><span class="n">Counting</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">10</span><span class="o">/</span><span class="n">10</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">76</span><span class="n">Delta</span> <span class="n">compression</span> <span class="n">using</span> <span class="n">up</span> <span class="n">to</span> <span class="n">8</span> <span class="n">threads</span>
<span class="ln">77</span><span class="n">Compressing</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">4</span><span class="o">/</span><span class="n">4</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">78</span><span class="n">Writing</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">6</span><span class="o">/</span><span class="n">6</span><span class="o">),</span> <span class="n">561</span> <span class="n">bytes</span> <span class="o">|</span> <span class="n">561</span><span class="o">.</span><span class="na">00</span> <span class="n">KiB</span><span class="o">/</span><span class="n">s</span><span class="o">,</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">79</span><span class="n">Total</span> <span class="nf">6</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">),</span> <span class="n">reused</span> <span class="nf">0</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">)</span>
<span class="ln">80</span><span class="n">To</span> <span class="n">https</span><span class="o">:</span><span class="c1">//github.com/daiweinus/githubtest.git
</span><span class="ln">81</span><span class="c1"></span>   <span class="n">8d3e36c</span><span class="o">..</span><span class="na">9209bdb</span>  <span class="n">master</span> <span class="o">-&gt;</span> <span class="n">master</span>
</code></pre></div><h3 id="ssh-免密码登陆设置httpsdocsgithubcomenauthenticationconnecting-to-github-with-sshgenerating-a-new-ssh-key-and-adding-it-to-the-ssh-agent"><a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">SSH 免密码登陆设置</a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">$</span> <span class="n">ssh</span><span class="o">-</span><span class="n">keygen</span> <span class="o">-</span><span class="n">t</span> <span class="n">ed25519</span> <span class="o">-</span><span class="n">C</span> <span class="s">&#34;your_email@example.com&#34;</span>
<span class="ln">2</span>  
<span class="ln">3</span><span class="c1">//Note: If you are using a legacy system that doesnt support the Ed25519 algorithm, use:
</span><span class="ln">4</span><span class="c1"></span><span class="n">$</span> <span class="n">ssh</span><span class="o">-</span><span class="n">keygen</span> <span class="o">-</span><span class="n">t</span> <span class="n">rsa</span> <span class="o">-</span><span class="n">b</span> <span class="n">4096</span> <span class="o">-</span><span class="n">C</span> <span class="s">&#34;your_email@example.com&#34;</span>
</code></pre></div><h5 id="ssh-keygen--secure-shell---key-generate">ssh-keygen : Secure Shell - key generate</h5>
<h5 id="-t-rsa---type-rsa">-t rsa : -type rsa</h5>
<p>rsa (<strong>Rivest–Shamir–Adleman</strong>) 最古老的非对称加密算法之一;  ed25519 <strong>爱德华兹曲线数字签名算法</strong>( <strong>EdDSA</strong> ) 是一种使用基于扭曲爱德华兹曲线的Schnorr 签名变体的数字签名方案，它旨在在不牺牲安全性的情况下比现有的数字签名方案更快。</p>
<p>ed25519加密解密很快,生成时间短而且安全性更高,rsa则加密解密稍慢,生成时间长,安全性没有ed25519高,只是rsa基本都是默认,所以用的人更多。</p>
<h5 id="-b-4096">-b 4096</h5>
<p>b 指定密钥长度。对于RSA密钥，最小要求768位，默认是2048位。命令中的4096指的是RSA密钥长度为4096位。</p>
<h5 id="-c--comment-添加注释">-C : comment 添加注释</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">githubtest</span> <span class="n">$</span> <span class="n">cd</span> <span class="o">~</span> <span class="c1">//返回更根目录
</span><span class="ln"> 2</span><span class="c1"></span><span class="n">$</span> <span class="n">rm</span> <span class="o">-</span><span class="n">r</span> <span class="o">.</span><span class="na">ssh</span><span class="o">/</span>  <span class="c1">//删除旧的ssh加密文件
</span><span class="ln"> 3</span><span class="c1"></span><span class="n">$</span> <span class="n">ssh</span><span class="o">-</span><span class="n">keygen</span> <span class="o">-</span><span class="n">t</span> <span class="n">ed25519</span> <span class="o">-</span><span class="n">C</span> <span class="n">6608118</span><span class="nd">@gmail.com</span>  <span class="c1">// 生成新ssh加密文件        
</span><span class="ln"> 4</span><span class="c1"></span><span class="n">Generating</span> <span class="kd">public</span><span class="o">/</span><span class="kd">private</span> <span class="n">ed25519</span> <span class="n">key</span> <span class="n">pair</span><span class="o">.</span>
<span class="ln"> 5</span><span class="n">Enter</span> <span class="n">file</span> <span class="n">in</span> <span class="n">which</span> <span class="n">to</span> <span class="n">save</span> <span class="n">the</span> <span class="nf">key</span> <span class="o">(/</span><span class="n">Users</span><span class="o">/</span><span class="n">username</span><span class="o">/.</span><span class="na">ssh</span><span class="o">/</span><span class="n">id_ed25519</span><span class="o">):</span> <span class="c1">//回车键，使用默认值
</span><span class="ln"> 6</span><span class="c1"></span><span class="n">Created</span> <span class="n">directory</span> <span class="err">&#39;</span><span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">daiwei</span><span class="o">/.</span><span class="na">ssh</span><span class="err">&#39;</span><span class="o">.</span>
<span class="ln"> 7</span><span class="n">Enter</span> <span class="nf">passphrase</span> <span class="o">(</span><span class="n">empty</span> <span class="k">for</span> <span class="n">no</span> <span class="n">passphrase</span><span class="o">):</span> <span class="c1">//回车键，使用默认值
</span><span class="ln"> 8</span><span class="c1"></span><span class="n">Enter</span> <span class="n">same</span> <span class="n">passphrase</span> <span class="n">again</span><span class="o">:</span> <span class="c1">//回车键，使用默认值
</span><span class="ln"> 9</span><span class="c1"></span><span class="n">Your</span> <span class="n">identification</span> <span class="n">has</span> <span class="n">been</span> <span class="n">saved</span> <span class="n">in</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">username</span><span class="o">/.</span><span class="na">ssh</span><span class="o">/</span><span class="n">id_ed25519</span><span class="o">.</span>
<span class="ln">10</span><span class="n">Your</span> <span class="kd">public</span> <span class="n">key</span> <span class="n">has</span> <span class="n">been</span> <span class="n">saved</span> <span class="n">in</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">username</span><span class="o">/.</span><span class="na">ssh</span><span class="o">/</span><span class="n">id_ed25519</span><span class="o">.</span><span class="na">pub</span><span class="o">.</span>
<span class="ln">11</span><span class="n">The</span> <span class="n">key</span> <span class="n">fingerprint</span> <span class="n">is</span><span class="o">:</span>
<span class="ln">12</span><span class="nl">SHA256:</span><span class="n">ktMDqgSKDbWqUAdUd61n63</span><span class="o">+</span><span class="n">DZAgaoUEjtSLvg1e3FpU</span> <span class="n">username</span><span class="nd">@gmail.com</span>
<span class="ln">13</span><span class="n">The</span> <span class="n">key</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">randomart</span> <span class="n">image</span> <span class="n">is</span><span class="o">:</span>
<span class="ln">14</span><span class="o">+--[</span><span class="n">ED25519</span> <span class="n">256</span><span class="o">]--+</span>
<span class="ln">15</span><span class="o">|</span> <span class="o">.=+=</span> <span class="o">.</span> <span class="o">..</span>       <span class="o">|</span>
<span class="ln">16</span><span class="o">|</span> <span class="o">.</span> <span class="o">+.+..</span> <span class="o">..</span>      <span class="o">|</span>
<span class="ln">17</span><span class="o">|+</span> <span class="o">+</span> <span class="n">oo</span><span class="o">..</span><span class="na">E</span><span class="o">.</span>       <span class="o">|</span>
<span class="ln">18</span><span class="o">|</span><span class="n">oO</span> <span class="n">o</span><span class="o">...=</span><span class="n">o</span> <span class="n">o</span>      <span class="o">|</span>
<span class="ln">19</span><span class="o">|=</span> <span class="o">+</span> <span class="n">o</span> <span class="o">*</span><span class="n">oS</span><span class="o">+</span> <span class="n">o</span>     <span class="o">|</span>
<span class="ln">20</span><span class="o">|</span><span class="n">o</span><span class="o">+</span> <span class="n">o</span> <span class="o">..=</span> <span class="o">.</span><span class="na">o</span> <span class="n">o</span>    <span class="o">|</span>
<span class="ln">21</span><span class="o">|</span><span class="n">o</span> <span class="o">=</span>   <span class="n">o</span>  <span class="o">.</span> <span class="n">o</span> <span class="o">.</span>   <span class="o">|</span>
<span class="ln">22</span><span class="o">|</span> <span class="o">.</span> <span class="o">.</span> <span class="o">.</span>    <span class="o">.</span> <span class="o">.</span> <span class="n">o</span>  <span class="o">|</span>
<span class="ln">23</span><span class="o">|</span>           <span class="o">...</span> <span class="o">.</span> <span class="o">|</span>
<span class="ln">24</span><span class="o">+----[</span><span class="n">SHA256</span><span class="o">]-----+</span>
<span class="ln">25</span><span class="n">$</span> <span class="n">cd</span> <span class="o">.</span><span class="na">ssh</span>
<span class="ln">26</span><span class="o">.</span><span class="na">ssh</span> <span class="n">$</span> <span class="n">ls</span> <span class="o">-</span><span class="n">lA</span>
<span class="ln">27</span><span class="n">total</span> <span class="n">16</span>
<span class="ln">28</span><span class="o">-</span><span class="n">rw</span><span class="o">-------</span>  <span class="n">1</span> <span class="n">yanqin</span>  <span class="n">staff</span>  <span class="n">411</span> <span class="n">16</span> <span class="n">Nov</span> <span class="n">11</span><span class="o">:</span><span class="n">33</span> <span class="n">id_ed25519</span>
<span class="ln">29</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span><span class="n">r</span><span class="o">--</span>  <span class="n">1</span> <span class="n">yanqin</span>  <span class="n">staff</span>   <span class="n">99</span> <span class="n">16</span> <span class="n">Nov</span> <span class="n">11</span><span class="o">:</span><span class="n">33</span> <span class="n">id_ed25519</span><span class="o">.</span><span class="na">pub</span>
<span class="ln">30</span><span class="o">.</span><span class="na">ssh</span> <span class="n">$</span> <span class="n">cat</span> <span class="n">id_ed25519</span><span class="o">.</span><span class="na">pub</span> <span class="c1">//copy .pub 加密文件
</span><span class="ln">31</span><span class="c1"></span><span class="n">ssh</span><span class="o">-</span><span class="n">ed25519</span> <span class="n">AAAAC3NzaC1lZDI1NTE5AAAAIPyWgD16fGjNd</span><span class="o">/</span><span class="n">lPUwQ5AFTBNZ0SjKVi9hBw92YWemNi</span> <span class="n">username</span><span class="nd">@gmail.com</span>
</code></pre></div><p>登陆github -&gt;setting -&gt; SSH and GPS keys -&gt; New SSH key -&gt; 将复制的.pub 文件粘贴保存。</p>
<p><img src="https://docs.github.com/assets/images/help/settings/ssh-key-paste.png" alt="The key field"></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">$</span> <span class="n">ssh</span> <span class="o">-</span><span class="n">T</span> <span class="n">git</span><span class="nd">@github.com</span> <span class="c1">//测试 ssh 是否设置成功
</span><span class="ln"> 2</span><span class="c1"></span><span class="n">The</span> <span class="n">authenticity</span> <span class="n">of</span> <span class="n">host</span> <span class="err">&#39;</span><span class="n">github</span><span class="o">.</span><span class="na">com</span> <span class="o">(</span><span class="n">20</span><span class="o">.</span><span class="na">205</span><span class="o">.</span><span class="na">243</span><span class="o">.</span><span class="na">166</span><span class="o">)</span><span class="err">&#39;</span> <span class="n">cant</span> <span class="n">be</span> <span class="n">established</span><span class="o">.</span>
<span class="ln"> 3</span><span class="n">RSA</span> <span class="n">key</span> <span class="n">fingerprint</span> <span class="n">is</span> <span class="n">SHA256</span><span class="o">:</span><span class="n">nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8</span><span class="o">.</span>
<span class="ln"> 4</span><span class="n">Are</span> <span class="n">you</span> <span class="n">sure</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="k">continue</span> <span class="nf">connecting</span> <span class="o">(</span><span class="n">yes</span><span class="o">/</span><span class="n">no</span><span class="o">/[</span><span class="n">fingerprint</span><span class="o">])?</span> <span class="n">yes</span>  
<span class="ln"> 5</span><span class="nl">Warning:</span> <span class="n">Permanently</span> <span class="n">added</span> <span class="err">&#39;</span><span class="n">github</span><span class="o">.</span><span class="na">com</span><span class="o">,</span><span class="n">20</span><span class="o">.</span><span class="na">205</span><span class="o">.</span><span class="na">243</span><span class="o">.</span><span class="na">166</span><span class="err">&#39;</span> <span class="o">(</span><span class="n">RSA</span><span class="o">)</span> <span class="n">to</span> <span class="n">the</span> <span class="n">list</span> <span class="n">of</span> <span class="n">known</span> <span class="n">hosts</span><span class="o">.</span>
<span class="ln"> 6</span><span class="n">Hi</span> <span class="n">username</span><span class="o">!</span> <span class="n">Youve</span> <span class="err">&#39;</span><span class="n">successfully</span><span class="err">&#39;</span> <span class="n">authenticated</span><span class="o">,</span> <span class="n">but</span> <span class="n">GitHub</span> <span class="n">does</span> <span class="n">not</span> <span class="n">provide</span> <span class="n">shell</span> <span class="n">access</span><span class="o">.</span>
<span class="ln"> 7</span>  
<span class="ln"> 8</span><span class="n">githubtest</span> <span class="n">$</span> <span class="n">git</span> <span class="n">remote</span> <span class="o">-</span><span class="n">v</span> <span class="c1">// 此时只有两个 https 远程仓库地址
</span><span class="ln"> 9</span><span class="c1"></span><span class="n">origin</span>	<span class="n">https</span><span class="o">:</span><span class="c1">//github.com/usernamegithubtest.git (fetch)
</span><span class="ln">10</span><span class="c1"></span><span class="n">origin</span>	<span class="n">https</span><span class="o">:</span><span class="c1">//github.com/username/githubtest.git (push)
</span><span class="ln">11</span><span class="c1"></span><span class="n">githubtest</span> <span class="n">$</span> <span class="n">git</span> <span class="n">remote</span> <span class="n">add</span> <span class="n">origin_ssh</span> <span class="n">git</span><span class="nd">@github.com</span><span class="o">:</span><span class="n">daiweinus</span><span class="o">/</span><span class="n">githubtest</span><span class="o">.</span><span class="na">git</span>
<span class="ln">12</span><span class="n">githubtest</span> <span class="n">$</span> <span class="n">git</span> <span class="n">remote</span> <span class="o">-</span><span class="n">v</span> <span class="c1">// 复制添加ssh 远程仓库地址
</span><span class="ln">13</span><span class="c1"></span><span class="n">origin</span>	<span class="n">https</span><span class="o">:</span><span class="c1">//github.com/username/githubtest.git (fetch)
</span><span class="ln">14</span><span class="c1"></span><span class="n">origin</span>	<span class="n">https</span><span class="o">:</span><span class="c1">//github.com/username/githubtest.git (push)
</span><span class="ln">15</span><span class="c1"></span><span class="n">origin_ssh</span>	<span class="n">git</span><span class="nd">@github.com</span><span class="o">:</span><span class="n">username</span><span class="o">/</span><span class="n">githubtest</span><span class="o">.</span><span class="na">git</span> <span class="o">(</span><span class="n">fetch</span><span class="o">)</span>
<span class="ln">16</span><span class="n">origin_ssh</span>	<span class="n">git</span><span class="nd">@github.com</span><span class="o">:</span><span class="n">username</span><span class="o">/</span><span class="n">githubtest</span><span class="o">.</span><span class="na">git</span> <span class="o">(</span><span class="n">push</span><span class="o">)</span>
<span class="ln">17</span>  
<span class="ln">18</span><span class="n">githubtest</span> <span class="n">$</span> <span class="n">git</span> <span class="n">push</span> <span class="n">origin_ssh</span> <span class="n">master</span> <span class="c1">//使用ssh提交到远程仓库
</span><span class="ln">19</span><span class="c1"></span><span class="n">Enumerating</span> <span class="n">objects</span><span class="o">:</span> <span class="n">10</span><span class="o">,</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">20</span><span class="n">Counting</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">10</span><span class="o">/</span><span class="n">10</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">21</span><span class="n">Delta</span> <span class="n">compression</span> <span class="n">using</span> <span class="n">up</span> <span class="n">to</span> <span class="n">8</span> <span class="n">threads</span>
<span class="ln">22</span><span class="n">Compressing</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">4</span><span class="o">/</span><span class="n">4</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">23</span><span class="n">Writing</span> <span class="n">objects</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">6</span><span class="o">/</span><span class="n">6</span><span class="o">),</span> <span class="n">619</span> <span class="n">bytes</span> <span class="o">|</span> <span class="n">619</span><span class="o">.</span><span class="na">00</span> <span class="n">KiB</span><span class="o">/</span><span class="n">s</span><span class="o">,</span> <span class="n">done</span><span class="o">.</span>
<span class="ln">24</span><span class="n">Total</span> <span class="nf">6</span> <span class="o">(</span><span class="n">delta</span> <span class="n">1</span><span class="o">),</span> <span class="n">reused</span> <span class="nf">0</span> <span class="o">(</span><span class="n">delta</span> <span class="n">0</span><span class="o">)</span>
<span class="ln">25</span><span class="nl">remote:</span> <span class="n">Resolving</span> <span class="n">deltas</span><span class="o">:</span> <span class="n">100</span><span class="o">%</span> <span class="o">(</span><span class="n">1</span><span class="o">/</span><span class="n">1</span><span class="o">),</span> <span class="n">completed</span> <span class="n">with</span> <span class="n">1</span> <span class="n">local</span> <span class="n">object</span><span class="o">.</span>
<span class="ln">26</span><span class="n">To</span> <span class="n">github</span><span class="o">.</span><span class="na">com</span><span class="o">:</span><span class="n">daiweinus</span><span class="o">/</span><span class="n">githubtest</span><span class="o">.</span><span class="na">git</span>
<span class="ln">27</span>   <span class="n">9209bdb</span><span class="o">..</span><span class="na">9878883</span>  <span class="n">master</span> <span class="o">-&gt;</span> <span class="n">master</span>
</code></pre></div><p>Ref: <a href="https://blog.csdn.net/qq_42255991/article/details/102783991">https://blog.csdn.net/qq_42255991/article/details/102783991</a></p>
]]></content>
		</item>
		
		<item>
			<title>env: node: No such file or directory macOS 解决方法</title>
			<link>https://daiwei.dev/posts/bug/node_error/</link>
			<pubDate>Wed, 10 Nov 2021 12:37:00 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/bug/node_error/</guid>
			<description>使用nmp命令时报错
1env: noder: No such file or directory 网上冲浪得到的解决方案
 uninstall and reinstall Node.js execute this command to create a link for node : sudo ln -s /usr/bin/nodejs /usr/local/bin/node  我用的方案1 重装 node.js 有效， 方案2 会报错。
1$ brew uninstall node 2$ brew update 3$ brew upgrade 4$ brew cleanup 5$ brew install node 6$ brew link --overwrite node // 如果报错可跑此命名:$ brew unlink node &amp;amp;&amp;amp; brew link node 7$ brew postinstall node 8$ node -v //能看到版本号就可以正常使用了 9 v17.</description>
			<content type="html"><![CDATA[<p>使用nmp命令时报错</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="nl">env:</span> <span class="n">noder</span><span class="o">:</span> <span class="n">No</span> <span class="n">such</span> <span class="n">file</span> <span class="n">or</span> <span class="n">directory</span>
</code></pre></div><p>网上冲浪得到的解决方案</p>
<ol>
<li>uninstall and reinstall Node.js</li>
<li>execute this command to create a link for node : sudo ln -s /usr/bin/nodejs /usr/local/bin/node</li>
</ol>
<p>我用的方案1 重装 node.js 有效， 方案2 会报错。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">$</span> <span class="n">brew</span> <span class="n">uninstall</span> <span class="n">node</span>
<span class="ln">2</span><span class="n">$</span> <span class="n">brew</span> <span class="n">update</span>
<span class="ln">3</span><span class="n">$</span> <span class="n">brew</span> <span class="n">upgrade</span>
<span class="ln">4</span><span class="n">$</span> <span class="n">brew</span> <span class="n">cleanup</span>
<span class="ln">5</span><span class="n">$</span> <span class="n">brew</span> <span class="n">install</span> <span class="n">node</span>
<span class="ln">6</span><span class="n">$</span> <span class="n">brew</span> <span class="n">link</span> <span class="o">--</span><span class="n">overwrite</span> <span class="n">node</span> <span class="c1">// 如果报错可跑此命名:$ brew unlink node &amp;&amp; brew link node
</span><span class="ln">7</span><span class="c1"></span><span class="n">$</span> <span class="n">brew</span> <span class="n">postinstall</span> <span class="n">node</span>
<span class="ln">8</span><span class="n">$</span> <span class="n">node</span> <span class="o">-</span><span class="n">v</span> <span class="c1">//能看到版本号就可以正常使用了
</span><span class="ln">9</span><span class="c1"></span>  <span class="n">v17</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">1</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Java Operator 3: Ternary Operator 三元运算符</title>
			<link>https://daiwei.dev/posts/data-structure/13_ternary_operator/</link>
			<pubDate>Wed, 03 Nov 2021 13:28:50 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/data-structure/13_ternary_operator/</guid>
			<description>Syntax:
1Variablename = (Condition) ? the value assigned if &amp;#39;true&amp;#39; is returned: t example：
1if (BooleanValue) { 2 Greetings = &amp;#34;Hello!&amp;#34;; 3} 4else { 5 Greetings = &amp;#34;Bye!&amp;#34;; 6} using ternary operator the above expression involves 1 line:
1Greeetings = (BooleanValue) ? &amp;#34;Hello!&amp;#34; : &amp;#34;Bye!&amp;#34;; Chained Operations
1public class Ternaryy { 2 public static void main(String[] args) { 3 4 String coffeeOrder = &amp;#34;Piccolo Latte&amp;#34;; 5 if (coffeeOrder == &amp;#34;Espresso&amp;#34; ) { 6 System.</description>
			<content type="html"><![CDATA[<p><strong>Syntax:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">Variablename</span> <span class="o">=</span> <span class="o">(</span><span class="n">Condition</span><span class="o">)</span> <span class="o">?</span> <span class="n">the</span> <span class="n">value</span> <span class="n">assigned</span> <span class="k">if</span> <span class="err">&#39;</span><span class="kc">true</span><span class="err">&#39;</span> <span class="n">is</span> <span class="n">returned</span><span class="o">:</span> <span class="n">t</span>
</code></pre></div><p>example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="k">if</span> <span class="o">(</span><span class="n">BooleanValue</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">2</span>   <span class="n">Greetings</span> <span class="o">=</span> <span class="s">&#34;Hello!&#34;</span><span class="o">;</span>
<span class="ln">3</span><span class="o">}</span>
<span class="ln">4</span><span class="k">else</span> <span class="o">{</span>
<span class="ln">5</span>   <span class="n">Greetings</span> <span class="o">=</span> <span class="s">&#34;Bye!&#34;</span><span class="o">;</span>
<span class="ln">6</span><span class="o">}</span>
</code></pre></div><p>using ternary operator the above expression involves 1 line:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">Greeetings</span> <span class="o">=</span> <span class="o">(</span><span class="n">BooleanValue</span><span class="o">)</span> <span class="o">?</span> <span class="s">&#34;Hello!&#34;</span> <span class="o">:</span> <span class="s">&#34;Bye!&#34;</span><span class="o">;</span>
</code></pre></div><p><strong>Chained Operations</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Ternaryy</span> <span class="o">{</span>
<span class="ln"> 2</span>   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 3</span> 
<span class="ln"> 4</span>       <span class="n">String</span> <span class="n">coffeeOrder</span> <span class="o">=</span> <span class="s">&#34;Piccolo Latte&#34;</span><span class="o">;</span>
<span class="ln"> 5</span>       <span class="k">if</span> <span class="o">(</span><span class="n">coffeeOrder</span> <span class="o">==</span> <span class="s">&#34;Espresso&#34;</span> <span class="o">)</span> <span class="o">{</span>
<span class="ln"> 6</span>           <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;would you like whipped cream on the top&#34;</span><span class="o">);</span>
<span class="ln"> 7</span>       <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">coffeeOrder</span> <span class="o">==</span> <span class="s">&#34;Piccolo Latte&#34;</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 8</span>           <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;25ml or 30ml&#34;</span><span class="o">);</span>
<span class="ln"> 9</span>       <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">coffeeOrder</span> <span class="o">==</span> <span class="s">&#34;Macchiato&#34;</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">10</span>           <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Short or long&#34;</span><span class="o">);</span>
<span class="ln">11</span>       <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="ln">12</span>           <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Hello, we were unable to process your order&#34;</span><span class="o">);</span>
<span class="ln">13</span> 
<span class="ln">14</span>       <span class="o">}</span>
<span class="ln">15</span>   <span class="o">}</span>
<span class="ln">16</span><span class="o">}</span>
</code></pre></div><p>use the ternary operator:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Ternaryy</span> <span class="o">{</span>
<span class="ln"> 2</span>   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 3</span>       <span class="n">String</span> <span class="n">coffeeOrder</span> <span class="o">=</span> <span class="s">&#34;Piccolo Latte&#34;</span><span class="o">;</span>
<span class="ln"> 4</span>       <span class="n">String</span> <span class="n">FinalOrder</span> <span class="o">=</span> <span class="o">(</span><span class="n">coffeeOrder</span> <span class="o">==</span> <span class="s">&#34;Espresso&#34;</span><span class="o">)</span> <span class="o">?</span> 
<span class="ln"> 5</span>         <span class="s">&#34; would you like whipped cream on the top&#34;</span> <span class="o">:</span> <span class="o">(</span><span class="n">coffeeOrder</span> <span class="o">==</span> <span class="s">&#34;Piccolo Latte&#34;</span><span class="o">)</span> <span class="o">?</span>
<span class="ln"> 6</span>           <span class="s">&#34;25ml or 30ml&#34;</span> <span class="o">:</span> <span class="o">(</span><span class="n">coffeeOrder</span> <span class="o">==</span> <span class="s">&#34;Macchiato&#34;</span><span class="o">)</span> <span class="o">?</span> 
<span class="ln"> 7</span>             <span class="s">&#34;Short or long&#34;</span> <span class="o">:</span> <span class="s">&#34;Hello, we were unable to process your order&#34;</span><span class="o">;</span>
<span class="ln"> 8</span>       <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">FinalOrder</span><span class="o">);</span>
<span class="ln"> 9</span>   <span class="o">}</span>
<span class="ln">10</span><span class="o">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Java Operator 2: i&#43;&#43; vs &#43;&#43;i</title>
			<link>https://daiwei.dev/posts/data-structure/12_i&#43;&#43;/</link>
			<pubDate>Tue, 02 Nov 2021 20:20:00 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/data-structure/12_i&#43;&#43;/</guid>
			<description>1public class Main { 2 public static void main (String[] args) { 3 int a = 0, b = 0; 4 for (int i = 0; i &amp;lt; 1; i++) { 5 System.out.println(a += i); // a = 0 6 System.out.println(i++); // i++ = 0 7 System.out.println(i); // i = 1 8 } 9 10 for (int i = 0; i &amp;lt; 1; ++i) { 11 System.out.println(b += i); // b = 0 12 System.</description>
			<content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
<span class="ln"> 2</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 3</span>        <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
<span class="ln"> 4</span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
<span class="ln"> 5</span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span> <span class="o">+=</span> <span class="n">i</span><span class="o">);</span> <span class="c1">// a = 0
</span><span class="ln"> 6</span><span class="c1"></span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">++);</span> <span class="c1">// i++ = 0
</span><span class="ln"> 7</span><span class="c1"></span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span> <span class="c1">// i = 1
</span><span class="ln"> 8</span><span class="c1"></span>        <span class="o">}</span>
<span class="ln"> 9</span>
<span class="ln">10</span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">1</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">11</span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span> <span class="o">+=</span> <span class="n">i</span><span class="o">);</span> <span class="c1">// b = 0
</span><span class="ln">12</span><span class="c1"></span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(++</span><span class="n">i</span><span class="o">);</span> <span class="c1">// ++i = 1
</span><span class="ln">13</span><span class="c1"></span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span> <span class="c1">// i = 1
</span><span class="ln">14</span><span class="c1"></span>        <span class="o">}</span>
<span class="ln">15</span>    <span class="o">}</span>
<span class="ln">16</span><span class="o">}</span>
</code></pre></div><p>From the above example we can clear see that, after 1 loop cycle i++ = 0 &amp; ++i = 1，but its not affected the for loop compute, the variables a &amp; b value still equal to 0.</p>
<p>i++ &amp; ++i 只会影响本身单独计算结果 (i++是先print i 的value 再 做加法； ++i 是先做加法再print i 的value），</p>
<p>但不管是 i++ 还是 ++i 都不会影响 for loop 循环的计算结果。</p>
]]></content>
		</item>
		
		<item>
			<title>Java Operator 1: Bitwise Operator</title>
			<link>https://daiwei.dev/posts/data-structure/11_bitwise/</link>
			<pubDate>Mon, 01 Nov 2021 13:13:13 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/data-structure/11_bitwise/</guid>
			<description>An operator that acts on individual bits (0 or 1) of the operands is called bitwise operator in java.
It acts only integer data types such as byte, short, int, and long. Bitwise operators in java cannot be applied to float and double data types.
操作 bit 单位 0 和 1 成为 位操作， 在Java 位操作只可以使用在整数，不可以在小数上使用。
Bitwise Operator Table:    Operator Meaning     1. &amp;amp; bitwise AND   2.</description>
			<content type="html"><![CDATA[<p>An operator that acts on individual bits (0 or 1) of the operands is called <strong>bitwise operator in java</strong>.</p>
<p>It acts only integer data types such as byte, short, int, and long. Bitwise operators <strong>in java cannot be applied to float and double</strong> data types.</p>
<p>操作 bit 单位 0 和 1 成为 位操作， 在Java 位操作只可以使用在整数，不可以在小数上使用。</p>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201061246513.png" alt=""></p>
<h3 id="bitwise-operator-table">Bitwise Operator Table:</h3>
<table>
<thead>
<tr>
<th style="text-align:center">Operator</th>
<th style="text-align:center">Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1. &amp;</td>
<td style="text-align:center">bitwise AND</td>
</tr>
<tr>
<td style="text-align:center">2. |</td>
<td style="text-align:center">bitwise OR</td>
</tr>
<tr>
<td style="text-align:center">3. ^</td>
<td style="text-align:center">bitwise exclusive OR</td>
</tr>
<tr>
<td style="text-align:center">4. ~</td>
<td style="text-align:center">one’s complement (unary)</td>
</tr>
<tr>
<td style="text-align:center">5. &laquo;</td>
<td style="text-align:center">shift left</td>
</tr>
<tr>
<td style="text-align:center">6. &raquo;</td>
<td style="text-align:center">shift right</td>
</tr>
<tr>
<td style="text-align:center">7. &raquo;&gt;</td>
<td style="text-align:center">unsigned right shift</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="and-or-xor--not">AND, OR, XOR &amp; NOT</h3>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201061221620.jpeg" alt=""></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BitwiseOperatorTest</span> <span class="o">{</span>
<span class="ln"> 2</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 3</span>
<span class="ln"> 4</span>        <span class="c1">// |: 或 OR, 0|0 = 0; 1|0 1|1 = 1
</span><span class="ln"> 5</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">6</span> <span class="o">|</span> <span class="n">3</span><span class="o">);</span> <span class="c1">// 110 | 011 -&gt; 111 = 7
</span><span class="ln"> 6</span><span class="c1"></span>
<span class="ln"> 7</span>        <span class="c1">// &amp;: 与 AND, 1&amp;1 0&amp;0 = 1; 0&amp;1 = 0
</span><span class="ln"> 8</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">6</span> <span class="o">&amp;</span> <span class="n">3</span><span class="o">);</span> <span class="c1">// 110 &amp; 011 -&gt; 010 = 2
</span><span class="ln"> 9</span><span class="c1"></span>
<span class="ln">10</span>        <span class="c1">// ~: 非 NOT, 0 -&gt; 1; 1 -&gt; 0 一元操作符 one’s complement (unary)
</span><span class="ln">11</span><span class="c1"></span>        <span class="c1">// 110 -&gt; 0000 0110 ~运算后得到 -&gt; 1111 1001 为负数，需转换为十进制
</span><span class="ln">12</span><span class="c1"></span>        <span class="c1">// 1111 1001 -&gt; 0000 0110 + 1 -&gt; 0000 0111 = 7, 加上负号 -7
</span><span class="ln">13</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(~</span><span class="n">6</span><span class="o">);</span> <span class="c1">// -7
</span><span class="ln">14</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(-</span><span class="n">6</span><span class="o">);</span> <span class="c1">// 5
</span><span class="ln">15</span><span class="c1"></span>
<span class="ln">16</span>        <span class="c1">// ^: 异或 XOR, 0^0 1^1 = 0; 0^1 = 1
</span><span class="ln">17</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">6</span> <span class="o">^</span> <span class="n">3</span><span class="o">);</span> <span class="c1">// 110 ^ 011 -&gt; 101 = 5
</span><span class="ln">18</span><span class="c1"></span>
<span class="ln">19</span>        <span class="c1">// &gt;&gt;：带符号右移。正数右移高位补0，负数右移高位补1。
</span><span class="ln">20</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> <span class="n">8</span> <span class="o">&gt;&gt;</span> <span class="n">1</span><span class="o">);</span> <span class="c1">// 0000 1000 -&gt; 0100 = 4
</span><span class="ln">21</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(-</span><span class="n">8</span> <span class="o">&gt;&gt;</span> <span class="n">1</span><span class="o">);</span> <span class="c1">// 1111 1000 -&gt; 1111 1100 = -4
</span><span class="ln">22</span><span class="c1"></span>
<span class="ln">23</span>        <span class="c1">// &lt;&lt;：带符号左移。无论是正负，都是低位补0。
</span><span class="ln">24</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> <span class="n">8</span> <span class="o">&lt;&lt;</span> <span class="n">1</span><span class="o">);</span> <span class="c1">// 0000 1000 -&gt; 0001 0000 = 16
</span><span class="ln">25</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(-</span><span class="n">8</span> <span class="o">&lt;&lt;</span> <span class="n">1</span><span class="o">);</span> <span class="c1">// 1111 1000 -&gt; 1111 0000 = -16
</span><span class="ln">26</span><span class="c1"></span>
<span class="ln">27</span>        <span class="c1">// &gt;&gt;&gt;：无符号右移。无论是正负，都是高位补0。
</span><span class="ln">28</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> <span class="n">8</span> <span class="o">&gt;&gt;&gt;</span> <span class="n">1</span><span class="o">);</span> <span class="c1">// 1000 -&gt; 0100 =4
</span><span class="ln">29</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(-</span><span class="n">8</span> <span class="o">&gt;&gt;&gt;</span> <span class="n">1</span><span class="o">);</span> 
<span class="ln">30</span>        <span class="c1">// 11111111 11111111 11111111 1111 1000 -&gt; 00111111 11111111 11111111 1111 1100 = 2147483644
</span><span class="ln">31</span><span class="c1"></span>
<span class="ln">32</span>        <span class="c1">// 没有 &lt;&lt;&lt; 无符号左移
</span><span class="ln">33</span><span class="c1"></span>    <span class="o">}</span>
<span class="ln">34</span><span class="o">}</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="o">&gt;</span> <span class="n">Task</span> <span class="o">:</span><span class="n">BitwiseOperatorTest</span><span class="o">.</span><span class="na">main</span><span class="o">()</span>
<span class="ln"> 2</span><span class="n">6</span> <span class="o">|</span> <span class="n">3</span> <span class="o">=</span> <span class="n">7</span>
<span class="ln"> 3</span><span class="n">6</span> <span class="o">&amp;</span> <span class="n">3</span> <span class="o">=</span> <span class="n">2</span>
<span class="ln"> 4</span><span class="o">~</span><span class="n">6</span> <span class="o">=</span> <span class="o">-</span><span class="n">7</span>
<span class="ln"> 5</span><span class="o">~(-</span><span class="n">6</span><span class="o">)</span> <span class="o">=</span> <span class="n">5</span>
<span class="ln"> 6</span><span class="n">6</span> <span class="o">^</span> <span class="n">3</span> <span class="o">=</span> <span class="n">5</span>
<span class="ln"> 7</span><span class="n">8</span> <span class="o">&gt;&gt;</span> <span class="n">1</span> <span class="o">=</span> <span class="n">4</span>
<span class="ln"> 8</span><span class="o">-</span><span class="n">8</span> <span class="o">&gt;&gt;</span> <span class="n">1</span> <span class="o">=</span> <span class="o">-</span><span class="n">4</span>
<span class="ln"> 9</span><span class="n">8</span> <span class="o">&lt;&lt;</span> <span class="n">1</span> <span class="o">=</span> <span class="n">16</span>
<span class="ln">10</span><span class="o">-</span><span class="n">8</span> <span class="o">&lt;&lt;</span> <span class="n">1</span> <span class="o">=</span> <span class="o">-</span><span class="n">16</span>
<span class="ln">11</span><span class="n">8</span> <span class="o">&gt;&gt;&gt;</span> <span class="n">1</span> <span class="o">=</span> <span class="n">4</span>
<span class="ln">12</span><span class="o">-</span><span class="n">8</span> <span class="o">&gt;&gt;&gt;</span> <span class="n">1</span> <span class="o">=</span> <span class="n">2147483644</span>
</code></pre></div><hr>
<h3 id="--left-shift-operator-in-java-带符号左移无论是正负都是低位补0">&laquo;  Left Shift Operator in Java 带符号左移。无论是正负，都是低位补0。</h3>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201061259363.png" alt=""></p>
<p><strong>Key point:</strong> Shifting a value to the left, n bits, is equivalent to multiplying that value by 2^n.</p>
<p>For example: In the above expression, n = 3. So, 20 * 2^3 = 20 * 8 = 160.</p>
<p><strong>20 左移 3位 等于 20 x $2^3$ = 20 x 8 = 160</strong></p>
<hr>
<h3 id="-right-shift-operator-in-java-带符号右移正数右移高位补0负数右移高位补1">&raquo; Right Shift Operator in Java 带符号右移。正数右移高位补0，负数右移高位补1。</h3>
<p><em><strong>1) 10 &raquo; 3</strong></em></p>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201061306429.png" alt=""></p>
<p><strong>Key point:</strong> Shifting a value to the right is equivalent to dividing the number by 2^n.</p>
<p><strong>10 右移 3位 等于 10 / $2^3$ = 10 / 8 = 1</strong></p>
<p><em><strong>2)  -10 &raquo; 2</strong></em></p>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201061326254.png" alt=""></p>
<blockquote>
<ol>
<li>10  = <code>0000 1010</code></li>
<li>1&rsquo;s complement form  反码 <code>1111 0101</code></li>
<li>2‘s complement form  补码 <code>1111 0101</code> + 1 = <code>1111 0110</code> = -10</li>
<li>10 &raquo; 2 = <code>1111 1101 10 </code> 舍掉最后2位 = <code>1111 1101</code></li>
<li>1111 1101 为负数，需转换成10进制Decimal 得到正整数位，再添加负号</li>
<li>2‘s complement form 反补码  <code>1111 1101</code> - 1 = <code>1111 1100</code></li>
<li>1&rsquo;s complement form  反码<code> 0000 0011</code> = 3</li>
<li>-10 &raquo; 2 = <code>1111 1101</code> = -3</li>
</ol>
</blockquote>
<hr>
<h3 id="-unsigned-right-shift-operator--无符号右移无论是正负都是高位补0">&raquo;&gt; Unsigned Right Shift Operator  无符号右移。无论是正负，都是高位补0。</h3>
<p><code>&gt;&gt;&gt;</code>, read as triple greater than.</p>
<p><strong>&raquo;  vs  &raquo;&gt;</strong> 两者都是向右位移，但是<code>&gt;&gt;&gt;</code>没有正负之分，如果是负数&raquo;&gt;右移结果会变成正数。</p>
<blockquote>
<p>-10 &raquo;&gt; 2</p>
<ol>
<li>-10 =  <code>1111 32位制 1111 0110</code> &raquo;&gt; 2 = <code>0011 1111 1111 1111 1111 1111 1111 1101 10</code></li>
<li>舍弃最末2位 = <code>0011 1111 1111 1111 1111 1111 1111 1101</code></li>
<li><code>11 1111 1111 1111 1111 1111 1111 1101</code>转换成十进制Decimal  = 1073741821</li>
</ol>
</blockquote>
<hr>
<h3 id="why-need-use-bitwise-operator">Why need use bitwise operator?</h3>
<ol>
<li>
<p>The average <code>1</code> and <code>2147483647</code> (<code>Integer.MAX_VALUE</code>).</p>
</li>
<li>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="o">(</span><span class="n">1</span> <span class="o">+</span> <span class="n">2147483647</span><span class="o">)</span> <span class="o">/</span> <span class="n">2</span> <span class="o">=</span> <span class="n">2147483648</span> <span class="o">/</span> <span class="n">2</span> <span class="o">=</span> <span class="n">1073741824</span>  <span class="c1">// in math
</span></code></pre></div></li>
<li>
<p><code>(1 + 2147483647) / 2</code> code execute in computer</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span>          <span class="n">1</span><span class="o">:</span> <span class="n">00000000</span> <span class="n">00000000</span> <span class="n">00000000</span> <span class="n">00000001</span>
<span class="ln">2</span><span class="o">+</span><span class="n">2147483647</span><span class="o">:</span> <span class="n">01111111</span> <span class="n">11111111</span> <span class="n">11111111</span> <span class="n">11111111</span>
<span class="ln">3</span><span class="o">================================================</span>
<span class="ln">4</span><span class="o">-</span><span class="n">2147483648</span><span class="o">:</span> <span class="n">10000000</span> <span class="n">00000000</span> <span class="n">00000000</span> <span class="n">00000000</span>  <span class="c1">// Overflow, MSB is 1 menas nagetive &#39;-&#39;
</span><span class="ln">5</span><span class="c1"></span><span class="o">/</span><span class="n">2</span>
<span class="ln">6</span><span class="o">================================================</span>
<span class="ln">7</span><span class="o">-</span><span class="n">1073741824</span><span class="o">:</span> <span class="n">11000000</span> <span class="n">00000000</span> <span class="n">00000000</span> <span class="n">00000000</span>  <span class="c1">// Signed divide, same as &gt;&gt; 1.
</span></code></pre></div></li>
<li>
<p><code>(1 + 2147483647) &gt;&gt;&gt; 1</code> code execute in computer</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span>          <span class="n">1</span><span class="o">:</span> <span class="n">00000000</span> <span class="n">00000000</span> <span class="n">00000000</span> <span class="n">00000001</span>
<span class="ln">2</span><span class="o">+</span><span class="n">2147483647</span><span class="o">:</span> <span class="n">01111111</span> <span class="n">11111111</span> <span class="n">11111111</span> <span class="n">11111111</span>
<span class="ln">3</span><span class="o">================================================</span>
<span class="ln">4</span><span class="o">-</span><span class="n">2147483648</span><span class="o">:</span> <span class="n">10000000</span> <span class="n">00000000</span> <span class="n">00000000</span> <span class="n">00000000</span>  <span class="c1">// Overflow
</span><span class="ln">5</span><span class="c1"></span><span class="o">&gt;&gt;&gt;</span> <span class="n">1</span>
<span class="ln">6</span><span class="o">================================================</span>
<span class="ln">7</span><span class="o">+</span><span class="n">1073741824</span><span class="o">:</span> <span class="n">01000000</span> <span class="n">00000000</span> <span class="n">00000000</span> <span class="n">00000000</span>  <span class="c1">// Unsigned shift right &gt;&gt;&gt; 1 got correct result
</span></code></pre></div></li>
</ol>
<p>Sample code as below:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="kt">int</span> <span class="n">res1</span> <span class="o">=</span> <span class="o">(</span><span class="n">1</span> <span class="o">+</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">)</span> <span class="o">/</span> <span class="n">2</span><span class="o">;</span>
<span class="ln">2</span><span class="kt">int</span> <span class="n">res2</span> <span class="o">=</span> <span class="o">(</span><span class="n">1</span> <span class="o">+</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">)</span> <span class="o">&gt;&gt;</span> <span class="n">1</span><span class="o">;</span>
<span class="ln">3</span><span class="kt">int</span> <span class="n">res3</span> <span class="o">=</span> <span class="o">(</span><span class="n">1</span> <span class="o">+</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">)</span> <span class="o">&gt;&gt;&gt;</span> <span class="n">1</span><span class="o">;</span>
<span class="ln">4</span>
<span class="ln">5</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">res1</span><span class="o">);</span>
<span class="ln">6</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">res2</span><span class="o">);</span>
<span class="ln">7</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">res3</span><span class="o">);</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="ln">1</span>res1 = -1073741824
<span class="ln">2</span>res2 = -1073741824
<span class="ln">3</span>res3 = 1073741824
</code></pre></div><hr>
<h4 id="36-只出现一次的数字httpsleetcode-cncomproblemssingle-number"><a href="https://leetcode-cn.com/problems/single-number/">36. 只出现一次的数字</a></h4>
<p>示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">给定一个非空整数数组</span><span class="err">，</span><span class="n">除了某个元素只出现一次以外</span><span class="err">，</span><span class="n">其余每个元素均出现两次</span><span class="err">。</span><span class="n">找出那个只出现了一次的元素</span><span class="err">。</span>
<span class="ln"> 2</span><span class="nl">输入:</span> <span class="o">[</span><span class="n">4</span><span class="o">,</span><span class="n">1</span><span class="o">,</span><span class="n">2</span><span class="o">,</span><span class="n">1</span><span class="o">,</span><span class="n">2</span><span class="o">]</span>
<span class="ln"> 3</span><span class="nl">输出:</span> <span class="n">4</span>
<span class="ln"> 4</span>  
<span class="ln"> 5</span><span class="c1">// 所有元素都出现2次，只有一个只出现1次。 
</span><span class="ln"> 6</span><span class="c1">// 如果两个数字一样，用 XOR 的特性可以把所有重复出现的元素消除，只留下唯一的元素
</span><span class="ln"> 7</span><span class="c1"></span>
<span class="ln"> 8</span>  <span class="n">4</span> <span class="err">：</span> <span class="n">100</span>
<span class="ln"> 9</span><span class="o">^</span> <span class="n">1</span> <span class="err">：</span> <span class="n">001</span>
<span class="ln">10</span><span class="o">^</span> <span class="n">2</span> <span class="err">：</span> <span class="n">010</span>
<span class="ln">11</span><span class="o">^</span> <span class="n">1</span> <span class="err">：</span> <span class="n">001</span>
<span class="ln">12</span><span class="o">^</span> <span class="n">2</span> <span class="err">：</span> <span class="n">010</span>
<span class="ln">13</span><span class="o">==========</span>
<span class="ln">14</span>  <span class="n">4</span> <span class="o">:</span> <span class="n">100</span>   
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
<span class="ln">2</span>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">singleNumber</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">3</span>        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
<span class="ln">4</span>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">nums</span><span class="o">)</span> <span class="n">res</span> <span class="o">^=</span> <span class="n">num</span><span class="o">;</span> 
<span class="ln">5</span>        <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
<span class="ln">6</span>    <span class="o">}</span>
<span class="ln">7</span><span class="o">}</span>
</code></pre></div><h4 id="704-二分查找httpsleetcode-cncomproblemsbinary-search"><a href="https://leetcode-cn.com/problems/binary-search/">704. 二分查找</a></h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BinarySearch</span> <span class="o">{</span>
<span class="ln"> 2</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 3</span>        <span class="n">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
<span class="ln"> 4</span>
<span class="ln"> 5</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Please enter the Integer Arrays: &#34;</span><span class="o">);</span>
<span class="ln"> 6</span>        <span class="n">String</span> <span class="n">input</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span> <span class="c1">// receive array input
</span><span class="ln"> 7</span><span class="c1"></span>
<span class="ln"> 8</span>        <span class="n">String</span><span class="o">[]</span> <span class="n">newInput</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&#34;\\s+&#34;</span><span class="o">);</span> <span class="c1">// split string into string array
</span><span class="ln"> 9</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">newInput</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
<span class="ln">10</span>
<span class="ln">11</span>        <span class="kt">int</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">newInput</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
<span class="ln">12</span>
<span class="ln">13</span>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">array</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
<span class="ln">14</span>            <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">newInput</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span> <span class="c1">// parse string array element to int array element
</span><span class="ln">15</span><span class="c1"></span>        <span class="o">}</span>
<span class="ln">16</span>
<span class="ln">17</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Please enter the target number you want search: &#34;</span><span class="o">);</span>
<span class="ln">18</span>        <span class="kt">int</span> <span class="n">target</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span> <span class="c1">// receive target input
</span><span class="ln">19</span><span class="c1"></span>
<span class="ln">20</span>        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="n">binarySearch</span><span class="o">(</span><span class="n">array</span><span class="o">,</span><span class="n">target</span><span class="o">);</span>
<span class="ln">21</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">res</span><span class="o">);</span>
<span class="ln">22</span>    <span class="o">}</span>
<span class="ln">23</span>
<span class="ln">24</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">binarySearch</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">25</span>        <span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> 
<span class="ln">26</span>        <span class="kt">int</span> <span class="n">high</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">1</span><span class="o">;</span>
<span class="ln">27</span>
<span class="ln">28</span>        <span class="k">while</span> <span class="o">(</span><span class="n">low</span> <span class="o">&lt;=</span> <span class="n">high</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">29</span>            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">low</span> <span class="o">+</span> <span class="n">high</span><span class="o">)</span> <span class="o">&gt;&gt;&gt;</span> <span class="n">1</span><span class="o">;</span> <span class="c1">// bitwise &gt;&gt;&gt; operator to avoid stack overflow
</span><span class="ln">30</span><span class="c1"></span>            <span class="c1">// int mid = low + (high -low) / 2;
</span><span class="ln">31</span><span class="c1"></span>            
<span class="ln">32</span>            <span class="kt">int</span> <span class="n">midNum</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">mid</span><span class="o">];</span>
<span class="ln">33</span>            <span class="k">if</span> <span class="o">(</span><span class="n">target</span> <span class="o">&gt;</span> <span class="n">array</span><span class="o">[</span><span class="n">mid</span><span class="o">])</span> <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="n">1</span><span class="o">;</span>
<span class="ln">34</span>            <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">target</span> <span class="o">&lt;</span> <span class="n">array</span><span class="o">[</span><span class="n">mid</span><span class="o">])</span> <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="n">1</span><span class="o">;</span>
<span class="ln">35</span>            <span class="k">else</span> <span class="k">return</span> <span class="n">mid</span><span class="o">;</span>
<span class="ln">36</span>        <span class="o">}</span>
<span class="ln">37</span>        <span class="k">return</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>
<span class="ln">38</span>    <span class="o">}</span>
<span class="ln">39</span>
<span class="ln">40</span><span class="o">}</span>
</code></pre></div><hr>
<h3 id="appendix"><strong>Appendix</strong></h3>
<p><img src="https://cdn.jsdelivr.net/gh/daiweinus/blog_pictures/202201061433458.png" alt=""></p>
]]></content>
		</item>
		
		<item>
			<title>Go 3: Pointer</title>
			<link>https://daiwei.dev/posts/go/go3_pointer/</link>
			<pubDate>Fri, 22 Oct 2021 17:59:37 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/go/go3_pointer/</guid>
			<description>Go is a pass-by-value language.   addresses
 An address is where a value is stored, To find an address of a variable, use the &amp;amp; operator before a variable.  1x := &amp;#34;My very first address&amp;#34; 2fmt.Println(&amp;amp;x) // Prints address 0x414020   pointers
 A pointer is specific to what type of address it can store. The * operator can be used to assign a pointer the type of the value its address holds.</description>
			<content type="html"><![CDATA[<h3 id="go-is-a-pass-by-value-language">Go is a pass-by-value language.</h3>
<ul>
<li>
<p><strong>addresses</strong></p>
<ul>
<li>An address is where a value is stored, To find an address of a variable, use the <code>&amp;</code> operator before a variable.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln">1</span><span class="nx">x</span> <span class="o">:=</span> <span class="s">&#34;My very first address&#34;</span>
<span class="ln">2</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">x</span><span class="p">)</span> <span class="c1">// Prints address 0x414020
</span></code></pre></div></li>
<li>
<p><strong>pointers</strong></p>
<ul>
<li>A pointer is specific to what type of address it can store.</li>
<li>The <code>*</code> operator can be used to assign a pointer the type of the value its address holds.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln">1</span><span class="kd">var</span> <span class="nx">pointerForInt</span> <span class="o">*</span><span class="kt">int</span>
</code></pre></div></li>
<li>
<p><strong>dereferencing</strong></p>
<ul>
<li>The <code>*</code> operator can also be used to dereference a pointer and assign a new value.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln">1</span><span class="nx">lyrics</span> <span class="o">:=</span> <span class="s">&#34;Moments so dear&#34;</span> 
<span class="ln">2</span><span class="nx">pointerForStr</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">lyrics</span>
<span class="ln">3</span>
<span class="ln">4</span><span class="o">*</span><span class="nx">pointerForStr</span> <span class="p">=</span> <span class="s">&#34;Journeys to plan&#34;</span> 
<span class="ln">5</span>
<span class="ln">6</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">lyrics</span><span class="p">)</span> <span class="c1">// Prints: Journeys to plan
</span></code></pre></div></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln"> 1</span><span class="kd">func</span> <span class="nf">addHundred1</span><span class="p">(</span><span class="nx">num</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
<span class="ln"> 2</span>  <span class="nx">num</span> <span class="o">+=</span> <span class="mi">100</span>
<span class="ln"> 3</span><span class="p">}</span>
<span class="ln"> 4</span>
<span class="ln"> 5</span><span class="kd">func</span> <span class="nf">addHundred12</span> <span class="p">(</span><span class="nx">numPtr</span> <span class="o">*</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
<span class="ln"> 6</span>  <span class="o">*</span><span class="nx">numPtr</span> <span class="o">+=</span> <span class="mi">100</span>
<span class="ln"> 7</span><span class="p">}</span>
<span class="ln"> 8</span> 
<span class="ln"> 9</span><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
<span class="ln">10</span>  <span class="nx">x</span> <span class="o">:=</span> <span class="mi">1</span>
<span class="ln">11</span>  <span class="nf">addHundred1</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
<span class="ln">12</span>  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="c1">// Prints 1
</span><span class="ln">13</span><span class="c1"></span>  
<span class="ln">14</span>  <span class="nf">addHundred2</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">x</span><span class="p">)</span> <span class="c1">//&amp;x
</span><span class="ln">15</span><span class="c1"></span>  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="c1">// Prints 101
</span><span class="ln">16</span><span class="c1"></span><span class="p">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Go 2: Introduction</title>
			<link>https://daiwei.dev/posts/go/go2_introduction/</link>
			<pubDate>Thu, 21 Oct 2021 17:04:49 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/go/go2_introduction/</guid>
			<description>Go语言aka Golang, 发布于2012年。是由3名Google员工：Robert Griesemer, Rob Pike, and Ken Thompson，设计开发的一门开源语言。
Go 旨在解决我们在构建大型服务器软件时遇到的一系列软件工程问题。
Go 是 Google 开发的一种编译的、并发的、垃圾收集的、静态类型的语言。
Go语言特性：
 清除依赖 清晰的语法 清晰的语义 组合优于继承 编程模型提供的简单性（垃圾收集、并发） 简易工具（go工具, gofmt, godoc, gofix）  Go vs C 这些包括：
 没有指针算法 没有隐式数字转换 总是检查数组边界 没有类型别名（在 之后type X int，X并且int是不同的类型而不是别名） ++和--是陈述不表达 赋值不是表达式 获取堆栈变量的地址是合法的（甚至鼓励） 还有很多  Go vs Java 其中包括对以下方面的语言支持：
 并发 垃圾收集 接口类型 反射 类型开关  Hello World code in Go: 1package main 2 3import &amp;#34;fmt&amp;#34; 4 5func main() { 6 fmt.</description>
			<content type="html"><![CDATA[<p>Go语言aka Golang, 发布于2012年。是由3名Google员工：Robert Griesemer, Rob Pike, and Ken Thompson，设计开发的一门开源语言。</p>
<p><strong>Go 旨在解决我们在构建大型服务器软件时遇到的一系列软件工程问题。</strong></p>
<p>Go 是 Google 开发的一种编译的、并发的、垃圾收集的、静态类型的语言。</p>
<p><strong>Go语言特性：</strong></p>
<ul>
<li>清除依赖</li>
<li>清晰的语法</li>
<li>清晰的语义</li>
<li>组合优于继承</li>
<li>编程模型提供的简单性（垃圾收集、并发）</li>
<li>简易工具（<code>go</code>工具, <code>gofmt</code>, <code>godoc</code>, <code>gofix</code>）</li>
</ul>
<p><strong>Go vs C</strong> 这些包括：</p>
<ul>
<li>没有指针算法</li>
<li>没有隐式数字转换</li>
<li>总是检查数组边界</li>
<li>没有类型别名（在 之后<code>type X int</code>，<code>X</code>并且<code>int</code>是不同的类型而不是别名）</li>
<li><code>++</code>和<code>--</code>是陈述不表达</li>
<li>赋值不是表达式</li>
<li>获取堆栈变量的地址是合法的（甚至鼓励）</li>
<li>还有很多</li>
</ul>
<p><strong>Go vs  Java</strong> 其中包括对以下方面的语言支持：</p>
<ul>
<li>并发</li>
<li>垃圾收集</li>
<li>接口类型</li>
<li>反射</li>
<li>类型开关</li>
</ul>
<h3 id="hello-world-code-in-go">Hello World code in Go:</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="ln">1</span>package main
<span class="ln">2</span>
<span class="ln">3</span>import <span class="s2">&#34;fmt&#34;</span>
<span class="ln">4</span>
<span class="ln">5</span>func main<span class="o">()</span> <span class="o">{</span>
<span class="ln">6</span>  fmt.Println<span class="o">(</span><span class="s2">&#34;Hello World&#34;</span><span class="o">)</span>
<span class="ln">7</span><span class="o">}</span>
</code></pre></div><p>运行程序：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="ln">1</span>$ go build main.go
<span class="ln">2</span>$ ls
<span class="ln">3</span>main  main.go
<span class="ln">4</span>$ ./main
<span class="ln">5</span>Hello World
</code></pre></div><h3 id="go-命令">Go 命令：</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="ln">1</span>// <span class="nb">command</span> line via a generic command:
<span class="ln">2</span>$ go &lt;command&gt; <span class="o">[</span>arguments<span class="o">]</span>
<span class="ln">3</span>// such as:
<span class="ln">4</span>$ go doc fmt.println
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="ln">1</span>// Running Files in Go
<span class="ln">2</span>$ go run exampleFile.go
<span class="ln">3</span>// Compile Go
<span class="ln">4</span>$ go build test.go
<span class="ln">5</span>// To run test, <span class="nb">type</span> in the <span class="nb">command</span> line:
<span class="ln">6</span>$ ./test
</code></pre></div><h3 id="go-value">Go Value:</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln">1</span><span class="c1">// literal unnamed value
</span><span class="ln">2</span><span class="c1"></span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;PI = &#34;</span><span class="p">,</span> <span class="mf">3.14159</span><span class="p">)</span>
<span class="ln">3</span> 
<span class="ln">4</span><span class="c1">// constant named value
</span><span class="ln">5</span><span class="c1"></span><span class="kd">const</span> <span class="nx">pi</span> <span class="p">=</span> <span class="mf">3.14159</span>
<span class="ln">6</span> 
<span class="ln">7</span><span class="c1">// variable named value
</span><span class="ln">8</span><span class="c1"></span><span class="kd">var</span> <span class="nx">radius</span> <span class="p">=</span> <span class="mi">6</span>
</code></pre></div><h3 id="go-default-values">Go Default Values</h3>
<p>当一个变量variable没有被赋值时，这个变量会有一个默认值。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln">1</span><span class="nx">Type</span>    <span class="nx">Zero</span> <span class="nx">Value</span>
<span class="ln">2</span><span class="nx">ints</span>     <span class="mi">0</span>
<span class="ln">3</span><span class="nx">floats</span>   <span class="mi">0</span>
<span class="ln">4</span><span class="kt">string</span>   <span class="s">&#34;&#34;</span> <span class="p">(</span><span class="nx">empty</span> <span class="kt">string</span><span class="p">)</span>
<span class="ln">5</span><span class="nx">boolean</span>  <span class="kc">false</span>
</code></pre></div><h3 id="go-data-types">Go Data Types</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln">1</span><span class="kt">string</span>
<span class="ln">2</span><span class="kt">bool</span>
<span class="ln">3</span><span class="nx">numeric</span> <span class="nx">types</span><span class="p">:</span>
<span class="ln">4</span><span class="kt">int8</span><span class="p">,</span> <span class="kt">uint8</span><span class="p">,</span> <span class="kt">int16</span><span class="p">,</span> <span class="kt">uint16</span><span class="p">,</span> <span class="kt">int32</span> <span class="p">,</span> <span class="kt">uint32</span><span class="p">,</span> <span class="kt">int64</span><span class="p">,</span> <span class="kt">uint64</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">uint</span><span class="p">,</span> <span class="kt">uintptr</span>
<span class="ln">5</span><span class="kt">float32</span><span class="p">,</span> <span class="kt">float64</span>
<span class="ln">6</span><span class="kt">complex64</span><span class="p">,</span> <span class="kt">complex128</span>
</code></pre></div><h3 id="go-variable">Go Variable</h3>
<ul>
<li>
<p>use the  <strong><code>var</code></strong>  keyword followed by a name and its data type. This variable can be assigned later in the program. For example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln">1</span><span class="kd">var</span> <span class="nx">fruit</span> <span class="kt">string</span>
<span class="ln">2</span><span class="kt">string</span> <span class="p">=</span> <span class="s">&#34;apple&#34;</span>
</code></pre></div></li>
<li>
<p>use the   <strong><code>var</code></strong> keyword followed by a name, data type, <strong><code>=</code></strong> and value.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln">1</span><span class="kd">var</span> <span class="nx">fruit</span> <span class="kt">string</span> <span class="p">=</span> <span class="s">&#34;apple&#34;</span>
</code></pre></div></li>
<li>
<p>use the   <strong><code>var</code></strong>  keyword, followed by a name, <strong><code>=</code></strong> and value. Ignore the data type and let the compiler infer its type.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln">1</span><span class="kd">var</span> <span class="nx">fruit</span> <span class="p">=</span> <span class="s">&#34;apple&#34;</span>
</code></pre></div></li>
<li>
<p>skip the  <strong><code>var</code></strong> keyword, define a name followed by <strong><code>:=</code></strong> and value and let the compiler infer its type.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln">1</span><span class="nx">fruit</span> <span class="o">:=</span> <span class="s">&#34;apple&#34;</span>
</code></pre></div></li>
</ul>
<h3 id="go-errors">Go Errors</h3>
<p>The error message is printed to the terminal and contains the following information:</p>
<ul>
<li>The filename</li>
<li>The line that raises the error</li>
<li>The number of characters from the left side that raises the error</li>
<li>The type of error and reason for raising the error</li>
</ul>
<p>For example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln">1</span><span class="p">.</span><span class="o">/</span><span class="nx">Main</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">11</span><span class="p">:</span><span class="mi">3</span><span class="p">:</span> <span class="nx">undefined</span><span class="p">:</span> <span class="nx">dinner</span>
</code></pre></div><p>This particular error occurs in the file <strong>main.go</strong> at line <strong><code>11</code></strong>, <strong><code>3</code></strong> characters into the line, and its error type and reason is <strong><code>&quot;undefined: dinner&quot;</code></strong>.</p>
<h3 id="go-fmt-print-and-println">Go Fmt .Print() and .Println()</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln">1</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;I&#34;</span><span class="p">,</span> <span class="s">&#34;am&#34;</span><span class="p">,</span> <span class="s">&#34;cool&#34;</span><span class="p">)</span>
<span class="ln">2</span><span class="c1">// Iamcool 没有空格 without any spacing
</span><span class="ln">3</span><span class="c1"></span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;I&#34;</span><span class="p">,</span> <span class="s">&#34;am&#34;</span><span class="p">,</span> <span class="s">&#34;cool&#34;</span><span class="p">)</span>
<span class="ln">4</span><span class="c1">// I am cool 
</span></code></pre></div><h3 id="go-fmt-printf-function">Go Fmt .Printf() Function</h3>
<ul>
<li><code>%v</code> represents the named value in its default format;</li>
<li><code>%d</code> expects the named value to be an integer type;</li>
<li><code>%f</code> expects the named value to be a float type;</li>
<li><code>%T</code> represents the type for the named value.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln"> 1</span><span class="nx">name</span> <span class="o">:=</span> <span class="s">&#34;Leslie&#34;</span>
<span class="ln"> 2</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;My name is %v&#34;</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span>
<span class="ln"> 3</span><span class="c1">// My name is Leslie
</span><span class="ln"> 4</span><span class="c1"></span> 
<span class="ln"> 5</span><span class="nx">age</span> <span class="o">:=</span> <span class="mi">34</span>
<span class="ln"> 6</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;I am %d years old&#34;</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span>
<span class="ln"> 7</span><span class="c1">// I am 34 years old
</span><span class="ln"> 8</span><span class="c1"></span> 
<span class="ln"> 9</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%v is of type %T&#34;</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span>
<span class="ln">10</span><span class="c1">// Leslie is of type string
</span></code></pre></div><h3 id="go-fmt-scan-function">Go Fmt .Scan() Function</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln"> 1</span><span class="kn">package</span> <span class="nx">main</span>
<span class="ln"> 2</span><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
<span class="ln"> 3</span> 
<span class="ln"> 4</span><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
<span class="ln"> 5</span>  <span class="kd">var</span> <span class="nx">name</span> <span class="kt">string</span>
<span class="ln"> 6</span>  <span class="kd">var</span> <span class="nx">age</span> <span class="kt">int</span>
<span class="ln"> 7</span>  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;What&#39;s your name and age?&#34;</span><span class="p">)</span>
<span class="ln"> 8</span>  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">name</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">age</span><span class="p">)</span>
<span class="ln"> 9</span>  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;You entered %v and %d.\n&#34;</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span>
<span class="ln">10</span><span class="p">}</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="ln">1</span>$ What<span class="err">&#39;</span>s your name and age?
<span class="ln">2</span>$ Marcia <span class="m">32</span>
<span class="ln">3</span>$ You entered Marcia and 32.
</code></pre></div><h3 id="go-short-variable-declaration">Go Short Variable Declaration</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln">1</span><span class="k">if</span> <span class="nx">age</span> <span class="o">:=</span> <span class="mi">55</span><span class="p">;</span> <span class="nx">age</span> <span class="o">&gt;=</span> <span class="mi">55</span> <span class="p">{</span>
<span class="ln">2</span>  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;You are retiring!&#34;</span><span class="p">)</span>
<span class="ln">3</span><span class="p">}</span>
<span class="ln">4</span><span class="k">switch</span> <span class="nx">season</span> <span class="o">:=</span> <span class="s">&#34;spring&#34;</span><span class="p">;</span> <span class="nx">season</span> <span class="p">{</span>
<span class="ln">5</span>  <span class="k">case</span> <span class="s">&#34;spring&#34;</span><span class="p">:</span>
<span class="ln">6</span>    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Plant some bulbs.&#34;</span><span class="p">)</span>
<span class="ln">7</span>  <span class="k">case</span> <span class="s">&#34;summer&#34;</span><span class="p">:</span>
<span class="ln">8</span>    <span class="o">...</span>
<span class="ln">9</span><span class="p">}</span>
</code></pre></div><h3 id="go-switch-statement">Go Switch Statement</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln"> 1</span><span class="nx">day</span> <span class="o">:=</span> <span class="s">&#34;Tuesday&#34;</span>
<span class="ln"> 2</span><span class="k">switch</span> <span class="nx">day</span> <span class="p">{</span>
<span class="ln"> 3</span>  <span class="k">case</span> <span class="s">&#34;Monday&#34;</span><span class="p">:</span>
<span class="ln"> 4</span>    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Monday is magnificent.&#34;</span><span class="p">)</span>
<span class="ln"> 5</span>  <span class="k">case</span> <span class="s">&#34;Tuesday&#34;</span><span class="p">:</span>
<span class="ln"> 6</span>    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Tuesday is terrific.&#34;</span><span class="p">)</span>
<span class="ln"> 7</span>  <span class="k">case</span> <span class="s">&#34;Wednesday&#34;</span><span class="p">:</span>
<span class="ln"> 8</span>    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Wednesday is wacky.&#34;</span><span class="p">)</span>
<span class="ln"> 9</span>  <span class="k">default</span><span class="p">:</span>
<span class="ln">10</span>    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;We survived.&#34;</span><span class="p">)</span>
<span class="ln">11</span><span class="p">}</span>
</code></pre></div><h3 id="go-random-number-generator">Go Random Number Generator</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln">1</span><span class="nx">number</span> <span class="o">:=</span> <span class="nx">math</span><span class="p">.</span><span class="nx">rand</span><span class="p">.</span><span class="nf">Intn</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div><h3 id="go-pointer-dereferencing">Go Pointer Dereferencing</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln">1</span><span class="kd">var</span> <span class="nx">pointerToInt</span> <span class="o">*</span><span class="kt">int</span> 
<span class="ln">2</span><span class="c1">// a pointer to a variable of type int
</span><span class="ln">3</span><span class="c1"></span>
<span class="ln">4</span><span class="nx">y</span> <span class="o">:=</span> <span class="mi">3</span>
<span class="ln">5</span><span class="kd">var</span> <span class="nx">x</span> <span class="o">*</span><span class="kt">int</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">y</span> <span class="c1">// pointer variable x assigned the address of variable y
</span><span class="ln">6</span><span class="c1"></span><span class="o">*</span><span class="nx">x</span> <span class="p">=</span> <span class="mi">5</span> <span class="c1">// dereference x by typing *x
</span><span class="ln">7</span><span class="c1"></span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">y</span><span class="p">)</span> <span class="c1">// y is now 5
</span></code></pre></div><h3 id="go-function">Go Function</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln"> 1</span><span class="kd">func</span> <span class="nf">makeMeOlder</span><span class="p">(</span><span class="nx">age</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
<span class="ln"> 2</span>  <span class="nx">age</span> <span class="o">+=</span> <span class="mi">5</span>
<span class="ln"> 3</span><span class="p">}</span>
<span class="ln"> 4</span> 
<span class="ln"> 5</span><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
<span class="ln"> 6</span>  <span class="nx">myAge</span> <span class="o">:=</span> <span class="mi">10</span>
<span class="ln"> 7</span>  <span class="nf">makeMeOlder</span><span class="p">(</span><span class="nx">myAge</span><span class="p">)</span>
<span class="ln"> 8</span>  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">myAge</span><span class="p">)</span>
<span class="ln"> 9</span>  <span class="c1">// myAge is still 10
</span><span class="ln">10</span><span class="c1"></span><span class="p">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Go 1: Helloworld</title>
			<link>https://daiwei.dev/posts/go/go1_helloworld/</link>
			<pubDate>Wed, 20 Oct 2021 17:54:17 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/go/go1_helloworld/</guid>
			<description>Hello World code in Go: 1package main 2 3import &amp;#34;fmt&amp;#34; 4 5func main() { 6 fmt.Println(&amp;#34;Hello World&amp;#34;) 7} 运行程序：
1$ go build main.go 2$ ls 3main main.go 4$ ./main 5Hello World Go 命令： 1// command line via a generic command: 2$ go &amp;lt;command&amp;gt; [arguments] 3// such as: 4$ go doc fmt.println 1// Running Files in Go 2$ go run exampleFile.go 3// Compile Go 4$ go build test.go 5// To run test, type in the command line: 6$ .</description>
			<content type="html"><![CDATA[<h3 id="hello-world-code-in-go">Hello World code in Go:</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="ln">1</span>package main
<span class="ln">2</span>
<span class="ln">3</span>import <span class="s2">&#34;fmt&#34;</span>
<span class="ln">4</span>
<span class="ln">5</span>func main<span class="o">()</span> <span class="o">{</span>
<span class="ln">6</span>  fmt.Println<span class="o">(</span><span class="s2">&#34;Hello World&#34;</span><span class="o">)</span>
<span class="ln">7</span><span class="o">}</span>
</code></pre></div><p>运行程序：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="ln">1</span>$ go build main.go
<span class="ln">2</span>$ ls
<span class="ln">3</span>main  main.go
<span class="ln">4</span>$ ./main
<span class="ln">5</span>Hello World
</code></pre></div><h3 id="go-命令">Go 命令：</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="ln">1</span>// <span class="nb">command</span> line via a generic command:
<span class="ln">2</span>$ go &lt;command&gt; <span class="o">[</span>arguments<span class="o">]</span>
<span class="ln">3</span>// such as:
<span class="ln">4</span>$ go doc fmt.println
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="ln">1</span>// Running Files in Go
<span class="ln">2</span>$ go run exampleFile.go
<span class="ln">3</span>// Compile Go
<span class="ln">4</span>$ go build test.go
<span class="ln">5</span>// To run test, <span class="nb">type</span> in the <span class="nb">command</span> line:
<span class="ln">6</span>$ ./test
</code></pre></div><h3 id="go-value">Go Value:</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln">1</span><span class="c1">// literal unnamed value
</span><span class="ln">2</span><span class="c1"></span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;PI = &#34;</span><span class="p">,</span> <span class="mf">3.14159</span><span class="p">)</span>
<span class="ln">3</span>
<span class="ln">4</span><span class="c1">// constant named value
</span><span class="ln">5</span><span class="c1"></span><span class="kd">const</span> <span class="nx">pi</span> <span class="p">=</span> <span class="mf">3.14159</span>
<span class="ln">6</span>
<span class="ln">7</span><span class="c1">// variable named value
</span><span class="ln">8</span><span class="c1"></span><span class="kd">var</span> <span class="nx">radius</span> <span class="p">=</span> <span class="mi">6</span>
</code></pre></div><h3 id="go-default-values">Go Default Values</h3>
<p>当一个变量variable没有被赋值时，这个变量会有一个默认值。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln">1</span><span class="nx">Type</span>    <span class="nx">Zero</span> <span class="nx">Value</span>
<span class="ln">2</span><span class="nx">ints</span>     <span class="mi">0</span>
<span class="ln">3</span><span class="nx">floats</span>   <span class="mi">0</span>
<span class="ln">4</span><span class="kt">string</span>   <span class="s">&#34;&#34;</span> <span class="p">(</span><span class="nx">empty</span> <span class="kt">string</span><span class="p">)</span>
<span class="ln">5</span><span class="nx">boolean</span>  <span class="kc">false</span>
</code></pre></div><h3 id="go-data-types">Go Data Types</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln">1</span><span class="kt">string</span>
<span class="ln">2</span><span class="kt">bool</span>
<span class="ln">3</span><span class="nx">numeric</span> <span class="nx">types</span><span class="p">:</span>
<span class="ln">4</span><span class="kt">int8</span><span class="p">,</span> <span class="kt">uint8</span><span class="p">,</span> <span class="kt">int16</span><span class="p">,</span> <span class="kt">uint16</span><span class="p">,</span> <span class="kt">int32</span> <span class="p">,</span> <span class="kt">uint32</span><span class="p">,</span> <span class="kt">int64</span><span class="p">,</span> <span class="kt">uint64</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">uint</span><span class="p">,</span> <span class="kt">uintptr</span>
<span class="ln">5</span><span class="kt">float32</span><span class="p">,</span> <span class="kt">float64</span>
<span class="ln">6</span><span class="kt">complex64</span><span class="p">,</span> <span class="kt">complex128</span>
</code></pre></div><h3 id="go-variable">Go Variable</h3>
<ul>
<li>
<p>use the  <strong><code>var</code></strong>  keyword followed by a name and its data type. This variable can be assigned later in the program. For example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln">1</span><span class="kd">var</span> <span class="nx">fruit</span> <span class="kt">string</span>
<span class="ln">2</span><span class="kt">string</span> <span class="p">=</span> <span class="s">&#34;apple&#34;</span>
</code></pre></div></li>
<li>
<p>use the   <strong><code>var</code></strong> keyword followed by a name, data type, <strong><code>=</code></strong> and value.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln">1</span><span class="kd">var</span> <span class="nx">fruit</span> <span class="kt">string</span> <span class="p">=</span> <span class="s">&#34;apple&#34;</span>
</code></pre></div></li>
<li>
<p>use the   <strong><code>var</code></strong>  keyword, followed by a name, <strong><code>=</code></strong> and value. Ignore the data type and let the compiler infer its type.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln">1</span><span class="kd">var</span> <span class="nx">fruit</span> <span class="p">=</span> <span class="s">&#34;apple&#34;</span>
</code></pre></div></li>
<li>
<p>skip the  <strong><code>var</code></strong> keyword, define a name followed by <strong><code>:=</code></strong> and value and let the compiler infer its type.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln">1</span><span class="nx">fruit</span> <span class="o">:=</span> <span class="s">&#34;apple&#34;</span>
</code></pre></div></li>
</ul>
<h3 id="go-errors">Go Errors</h3>
<p>The error message is printed to the terminal and contains the following information:</p>
<ul>
<li>The filename</li>
<li>The line that raises the error</li>
<li>The number of characters from the left side that raises the error</li>
<li>The type of error and reason for raising the error</li>
</ul>
<p>For example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln">1</span><span class="p">.</span><span class="o">/</span><span class="nx">Main</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">11</span><span class="p">:</span><span class="mi">3</span><span class="p">:</span> <span class="nx">undefined</span><span class="p">:</span> <span class="nx">dinner</span>
</code></pre></div><p>This particular error occurs in the file <strong>main.go</strong> at line <strong><code>11</code></strong>, <strong><code>3</code></strong> characters into the line, and its error type and reason is <strong><code>&quot;undefined: dinner&quot;</code></strong>.</p>
<h3 id="go-fmt-print-and-println">Go Fmt .Print() and .Println()</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln">1</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;I&#34;</span><span class="p">,</span> <span class="s">&#34;am&#34;</span><span class="p">,</span> <span class="s">&#34;cool&#34;</span><span class="p">)</span>
<span class="ln">2</span><span class="c1">// Iamcool 没有空格 without any spacing
</span><span class="ln">3</span><span class="c1"></span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;I&#34;</span><span class="p">,</span> <span class="s">&#34;am&#34;</span><span class="p">,</span> <span class="s">&#34;cool&#34;</span><span class="p">)</span>
<span class="ln">4</span><span class="c1">// I am cool 
</span></code></pre></div><h3 id="go-fmt-printf-function">Go Fmt .Printf() Function</h3>
<ul>
<li><code>%v</code> represents the named value in its default format;</li>
<li><code>%d</code> expects the named value to be an integer type;</li>
<li><code>%f</code> expects the named value to be a float type;</li>
<li><code>%T</code> represents the type for the named value.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln"> 1</span><span class="nx">name</span> <span class="o">:=</span> <span class="s">&#34;Leslie&#34;</span>
<span class="ln"> 2</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;My name is %v&#34;</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span>
<span class="ln"> 3</span><span class="c1">// My name is Leslie
</span><span class="ln"> 4</span><span class="c1"></span>
<span class="ln"> 5</span><span class="nx">age</span> <span class="o">:=</span> <span class="mi">34</span>
<span class="ln"> 6</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;I am %d years old&#34;</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span>
<span class="ln"> 7</span><span class="c1">// I am 34 years old
</span><span class="ln"> 8</span><span class="c1"></span>
<span class="ln"> 9</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%v is of type %T&#34;</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span>
<span class="ln">10</span><span class="c1">// Leslie is of type string
</span></code></pre></div><h3 id="go-fmt-scan-function">Go Fmt .Scan() Function</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln"> 1</span><span class="kn">package</span> <span class="nx">main</span>
<span class="ln"> 2</span><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
<span class="ln"> 3</span>
<span class="ln"> 4</span><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
<span class="ln"> 5</span>  <span class="kd">var</span> <span class="nx">name</span> <span class="kt">string</span>
<span class="ln"> 6</span>  <span class="kd">var</span> <span class="nx">age</span> <span class="kt">int</span>
<span class="ln"> 7</span>  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;What&#39;s your name and age?&#34;</span><span class="p">)</span>
<span class="ln"> 8</span>  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">name</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">age</span><span class="p">)</span>
<span class="ln"> 9</span>  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;You entered %v and %d.\n&#34;</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span>
<span class="ln">10</span><span class="p">}</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="ln">1</span>$ What<span class="err">&#39;</span>s your name and age?
<span class="ln">2</span>$ Marcia <span class="m">32</span>
<span class="ln">3</span>$ You entered Marcia and 32.
</code></pre></div><h3 id="go-short-variable-declaration">Go Short Variable Declaration</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln">1</span><span class="k">if</span> <span class="nx">age</span> <span class="o">:=</span> <span class="mi">55</span><span class="p">;</span> <span class="nx">age</span> <span class="o">&gt;=</span> <span class="mi">55</span> <span class="p">{</span>
<span class="ln">2</span>  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;You are retiring!&#34;</span><span class="p">)</span>
<span class="ln">3</span><span class="p">}</span>
<span class="ln">4</span><span class="k">switch</span> <span class="nx">season</span> <span class="o">:=</span> <span class="s">&#34;spring&#34;</span><span class="p">;</span> <span class="nx">season</span> <span class="p">{</span>
<span class="ln">5</span>  <span class="k">case</span> <span class="s">&#34;spring&#34;</span><span class="p">:</span>
<span class="ln">6</span>    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Plant some bulbs.&#34;</span><span class="p">)</span>
<span class="ln">7</span>  <span class="k">case</span> <span class="s">&#34;summer&#34;</span><span class="p">:</span>
<span class="ln">8</span>    <span class="o">...</span>
<span class="ln">9</span><span class="p">}</span>
</code></pre></div><h3 id="go-switch-statement">Go Switch Statement</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln"> 1</span><span class="nx">day</span> <span class="o">:=</span> <span class="s">&#34;Tuesday&#34;</span>
<span class="ln"> 2</span><span class="k">switch</span> <span class="nx">day</span> <span class="p">{</span>
<span class="ln"> 3</span>  <span class="k">case</span> <span class="s">&#34;Monday&#34;</span><span class="p">:</span>
<span class="ln"> 4</span>    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Monday is magnificent.&#34;</span><span class="p">)</span>
<span class="ln"> 5</span>  <span class="k">case</span> <span class="s">&#34;Tuesday&#34;</span><span class="p">:</span>
<span class="ln"> 6</span>    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Tuesday is terrific.&#34;</span><span class="p">)</span>
<span class="ln"> 7</span>  <span class="k">case</span> <span class="s">&#34;Wednesday&#34;</span><span class="p">:</span>
<span class="ln"> 8</span>    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Wednesday is wacky.&#34;</span><span class="p">)</span>
<span class="ln"> 9</span>  <span class="k">default</span><span class="p">:</span>
<span class="ln">10</span>    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;We survived.&#34;</span><span class="p">)</span>
<span class="ln">11</span><span class="p">}</span>
</code></pre></div><h3 id="go-random-number-generator">Go Random Number Generator</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln">1</span><span class="nx">number</span> <span class="o">:=</span> <span class="nx">math</span><span class="p">.</span><span class="nx">rand</span><span class="p">.</span><span class="nf">Intn</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div><h3 id="go-pointer-dereferencing">Go Pointer Dereferencing</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln">1</span><span class="kd">var</span> <span class="nx">pointerToInt</span> <span class="o">*</span><span class="kt">int</span> 
<span class="ln">2</span><span class="c1">// a pointer to a variable of type int
</span><span class="ln">3</span><span class="c1"></span>
<span class="ln">4</span><span class="nx">y</span> <span class="o">:=</span> <span class="mi">3</span>
<span class="ln">5</span><span class="kd">var</span> <span class="nx">x</span> <span class="o">*</span><span class="kt">int</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">y</span> <span class="c1">// pointer variable x assigned the address of variable y
</span><span class="ln">6</span><span class="c1"></span><span class="o">*</span><span class="nx">x</span> <span class="p">=</span> <span class="mi">5</span> <span class="c1">// dereference x by typing *x
</span><span class="ln">7</span><span class="c1"></span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">y</span><span class="p">)</span> <span class="c1">// y is now 5
</span></code></pre></div><h3 id="multiple-return-values">Multiple Return Values</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln"> 1</span><span class="kn">package</span> <span class="nx">main</span>
<span class="ln"> 2</span><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
<span class="ln"> 3</span>
<span class="ln"> 4</span><span class="kd">func</span> <span class="nf">GPA</span><span class="p">(</span><span class="nx">midtermGrade</span> <span class="kt">float32</span><span class="p">,</span> <span class="nx">finalGrade</span> <span class="kt">float32</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">float32</span><span class="p">)</span> <span class="p">{</span>
<span class="ln"> 5</span>  <span class="nx">averageGrade</span> <span class="o">:=</span> <span class="p">(</span><span class="nx">midtermGrade</span> <span class="o">+</span> <span class="nx">finalGrade</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
<span class="ln"> 6</span>  <span class="kd">var</span> <span class="nx">gradeLetter</span> <span class="kt">string</span>
<span class="ln"> 7</span>  <span class="k">if</span> <span class="nx">averageGrade</span> <span class="p">&gt;</span> <span class="mi">90</span> <span class="p">{</span>
<span class="ln"> 8</span>    <span class="nx">gradeLetter</span> <span class="p">=</span> <span class="s">&#34;A&#34;</span>
<span class="ln"> 9</span>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">averageGrade</span> <span class="p">&gt;</span> <span class="mi">80</span> <span class="p">{</span>
<span class="ln">10</span>    <span class="nx">gradeLetter</span> <span class="p">=</span> <span class="s">&#34;B&#34;</span>
<span class="ln">11</span>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">averageGrade</span> <span class="p">&gt;</span> <span class="mi">70</span> <span class="p">{</span>
<span class="ln">12</span>    <span class="nx">gradeLetter</span> <span class="p">=</span> <span class="s">&#34;C&#34;</span>
<span class="ln">13</span>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
<span class="ln">14</span>    <span class="nx">gradeLetter</span> <span class="p">=</span> <span class="s">&#34;F&#34;</span>
<span class="ln">15</span>  <span class="p">}</span>
<span class="ln">16</span> 
<span class="ln">17</span>  <span class="k">return</span> <span class="nx">gradeLetter</span><span class="p">,</span> <span class="nx">averageGrade</span> 
<span class="ln">18</span><span class="p">}</span>
<span class="ln">19</span>
<span class="ln">20</span><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
<span class="ln">21</span>  <span class="kd">var</span> <span class="nx">myMidterm</span><span class="p">,</span> <span class="nx">myFinal</span> <span class="kt">float32</span>
<span class="ln">22</span>  <span class="nx">myMidterm</span> <span class="p">=</span> <span class="mf">89.4</span>
<span class="ln">23</span>  <span class="nx">myFinal</span> <span class="p">=</span> <span class="mf">74.9</span>
<span class="ln">24</span>  <span class="kd">var</span> <span class="nx">myAverage</span> <span class="kt">float32</span>
<span class="ln">25</span>  <span class="kd">var</span> <span class="nx">myGrade</span> <span class="kt">string</span>
<span class="ln">26</span>  <span class="nx">myGrade</span><span class="p">,</span> <span class="nx">myAverage</span> <span class="p">=</span> <span class="nf">GPA</span><span class="p">(</span><span class="nx">myMidterm</span><span class="p">,</span> <span class="nx">myFinal</span><span class="p">)</span>
<span class="ln">27</span>  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">myAverage</span><span class="p">,</span> <span class="nx">myGrade</span><span class="p">)</span> <span class="c1">// Prints 82.12 B
</span><span class="ln">28</span><span class="c1"></span><span class="p">}</span>
</code></pre></div><h3 id="defer-关键字告诉程序在function结尾执行defer-call的程序">defer 关键字，告诉程序在function结尾执行defer call的程序</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="ln"> 1</span><span class="kn">package</span> <span class="nx">main</span>
<span class="ln"> 2</span><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
<span class="ln"> 3</span>
<span class="ln"> 4</span><span class="kd">func</span> <span class="nf">queryDatabase</span><span class="p">(</span><span class="nx">query</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
<span class="ln"> 5</span>  <span class="kd">var</span> <span class="nx">result</span> <span class="kt">string</span>
<span class="ln"> 6</span>  <span class="nf">connectDatabase</span><span class="p">()</span>
<span class="ln"> 7</span>  <span class="c1">// defer keyword tells Go to run a function at the end of the current function.
</span><span class="ln"> 8</span><span class="c1"></span>  <span class="k">defer</span> <span class="nf">disconnectDatabase</span><span class="p">()</span>
<span class="ln"> 9</span>  
<span class="ln">10</span>  <span class="k">if</span> <span class="nx">query</span> <span class="o">==</span> <span class="s">&#34;SELECT * FROM coolTable;&#34;</span> <span class="p">{</span>
<span class="ln">11</span>    <span class="nx">result</span> <span class="p">=</span> <span class="s">&#34;NAME|DOB\nVincent Van Gogh|March 30, 1853&#34;</span>
<span class="ln">12</span>  <span class="p">}</span>  
<span class="ln">13</span>  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span>
<span class="ln">14</span>  <span class="k">return</span> <span class="nx">result</span>
<span class="ln">15</span><span class="p">}</span>
<span class="ln">16</span>
<span class="ln">17</span><span class="kd">func</span> <span class="nf">connectDatabase</span><span class="p">()</span> <span class="p">{</span>
<span class="ln">18</span>  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Connecting to the database.&#34;</span><span class="p">)</span>
<span class="ln">19</span><span class="p">}</span>
<span class="ln">20</span>
<span class="ln">21</span><span class="kd">func</span> <span class="nf">disconnectDatabase</span><span class="p">()</span> <span class="p">{</span>
<span class="ln">22</span>  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Disconnecting from the database.&#34;</span><span class="p">)</span>
<span class="ln">23</span><span class="p">}</span>
<span class="ln">24</span>
<span class="ln">25</span><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
<span class="ln">26</span>  <span class="nf">queryDatabase</span><span class="p">(</span><span class="s">&#34;SELECT * FROM coolTable;&#34;</span><span class="p">)</span>
<span class="ln">27</span><span class="p">}</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="ln">1</span>Connecting to the database.
<span class="ln">2</span>NAME<span class="p">|</span>DOB
<span class="ln">3</span>Vincent Van Gogh<span class="p">|</span>March 30, <span class="m">1853</span>
<span class="ln">4</span>Disconnecting from the database.
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>TI 10</title>
			<link>https://daiwei.dev/posts/game/ti10/</link>
			<pubDate>Mon, 18 Oct 2021 15:13:13 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/game/ti10/</guid>
			<description>熬夜看完TI10, Team Spirit vs LGD 的决赛。
首先，恭喜 team spirit 的五位第一次打进ti就成功圆梦举盾的年轻人，这个冠军🏆他们赢得实至名归！
 连续3年了，即使这一次AME背后插上了wings，可全村的希望LGD.AME又一次倒在了举盾的门口。
 如果开局放给对面4把猛犸，如果最后一把没有选酱油小鹿，如果。。。
输了就是输了，没有那么多如果。
上一次cn.dota2 夺冠还是5年前的 ti6 wings 了。当初wings 被 ace 逼解散的时候，就有人说 ace 造的孽 会让c n.dota 用未来5年来偿还这个债。
结果cn dota 真的5年无冠。
AME, NTS, Faith_bian, XinQ，y 是我最喜欢的几个在役选手了，希望lgd这5个人可以再战一年。
 如果 wings 是对 cn dota 的透支，希望明年的 ti11 就是对 cn dota 补偿的时候。
加油LGD, 明年ti 决赛再见！</description>
			<content type="html"><![CDATA[<p>熬夜看完TI10, Team Spirit vs LGD 的决赛。</p>
<p>首先，恭喜 team spirit 的五位第一次打进ti就成功圆梦举盾的年轻人，这个冠军🏆他们赢得实至名归！</p>
<figure><img src="/images/ti10.jpeg"
         alt="Team Spirit"/>
</figure>

<p>连续3年了，即使这一次AME背后插上了wings，可全村的希望LGD.AME又一次倒在了举盾的门口。</p>
<figure><img src="/images/ti102.jpeg"
         alt="萧瑟"/>
</figure>

<p>如果开局放给对面4把猛犸，如果最后一把没有选酱油小鹿，如果。。。</p>
<p>输了就是输了，没有那么多如果。</p>
<p>上一次cn.dota2 夺冠还是5年前的 ti6 wings 了。当初wings 被 ace 逼解散的时候，就有人说 ace 造的孽 会让c n.dota 用未来5年来偿还这个债。</p>
<p>结果cn dota 真的5年无冠。</p>
<p>AME, NTS, Faith_bian, XinQ，y 是我最喜欢的几个在役选手了，希望lgd这5个人可以再战一年。</p>
<figure><img src="/images/ti101.jpeg"
         alt="image"/>
</figure>

<p>如果 wings 是对 cn dota 的透支，希望明年的 ti11 就是对 cn dota 补偿的时候。</p>
<p>加油LGD, 明年ti 决赛再见！</p>
]]></content>
		</item>
		
		<item>
			<title>Java Fundament 7: BIO vs NIO</title>
			<link>https://daiwei.dev/posts/java/fundament7_socket/</link>
			<pubDate>Thu, 07 Oct 2021 16:19:45 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/java/fundament7_socket/</guid>
			<description>**同步和异步：**同步和异步是针对应用程序和内核的交互而言的，同步指的是用户进程触发IO 操作并等待或者轮询的去查看IO 操作是否就绪，而异步是指用户进程触发IO 操作以后便开始做自己的事情，而当IO 操作已经完成的时候会得到IO 完成的通知。
以银行取款为例：
同步 ： 自己亲自出马持银行卡到银行取钱（使用同步 IO 时，Java 自己处理IO 读写）；
异步 ： 委托一小弟拿银行卡到银行取钱，然后给你（使用异步IO 时，Java 将 IO 读写委托给OS 处理，需要将数据缓冲区地址和大小传给OS(银行卡和密码)，OS 需要支持异步IO操作API）；
**阻塞和非阻塞：**阻塞和非阻塞是针对于进程在访问数据的时候，根据IO操作的就绪状态来采取的不同方式，说白了是一种读取或者写入操作方法的实现方式，阻塞方式下读取或者写入函数将一直等待，而非阻塞方式下，读取或者写入方法会立即返回一个状态值。
以银行取款为例：
阻塞 ： ATM排队取款，你只能等待（使用阻塞IO时，Java调用会一直阻塞到读写完成才返回）；
非阻塞 ： 柜台取款，取个号，然后坐在椅子上做其它事，等号广播会通知你办理，没到号你就不能去，你可以不断问大堂经理排到了没有，大堂经理如果说还没到你就不能去（使用非阻塞IO时，如果不能读写Java调用会马上返回，当IO事件分发器通知可读写时再继续进行读写，不断循环直到读写完成）
1.BIO 编程
Blocking IO： 同步阻塞的编程方式。
BIO编程方式通常是在JDK1.4版本之前常用的编程方式。编程实现过程为：首先在服务端启动一个ServerSocket来监听网络请求，客户端启动Socket发起网络请求，默认情况下ServerSocket回建立一个线程来处理此请求，如果服务端没有线程可用，客户端则会阻塞等待或遭到拒绝。
且建立好的连接，在通讯过程中，是同步的。在并发处理效率上比较低。大致结构如下：
同步并阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，当然可以通过线程池机制改善。
BIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序直观简单易理解。
使用线程池机制改善后的BIO模型图如下:
2.NIO 编程：Unblocking IO（New IO）： 同步非阻塞的编程方式。
NIO本身是基于事件驱动思想来完成的，其主要想解决的是BIO的大并发问题，NIO基于Reactor，当socket有流可读或可写入socket时，操作系统会相应的通知引用程序进行处理，应用再将流读取到缓冲区或写入操作系统。也就是说，这个时候，已经不是一个连接就要对应一个处理线程了，而是有效的请求，对应一个线程，当连接没有数据时，是没有工作线程来处理的。
NIO的最重要的地方是当一个连接创建后，不需要对应一个线程，这个连接会被注册到多路复用器上面，所以所有的连接只需要一个线程就可以搞定，当这个线程中的多路复用器进行轮询的时候，发现连接上有请求的话，才开启一个线程进行处理，也就是一个请求一个线程模式。
在NIO的处理方式中，当一个请求来的话，开启线程进行处理，可能会等待后端应用的资源(JDBC连接等)，其实这个线程就被阻塞了，当并发上来的话，还是会有BIO一样的问题
3.AIO编程：Asynchronous IO： 异步非阻塞的编程方式。
与NIO不同，当进行读写操作时，只须直接调用API的read或write方法即可。这两种方法均为异步的，对于读操作而言，当有流可读取时，操作系统会将可读的流传入read方法的缓冲区，并通知应用程序；对于写操作而言，当操作系统将write方法传递的流写入完毕时，操作系统主动通知应用程序。即可以理解为，read/write方法都是异步的，完成后会主动调用回调函数。在JDK1.7中，这部分内容被称作NIO.2，主要在java.nio.channels包下增加了下面四个异步通道：AsynchronousSocketChannel、AsynchronousServerSocketChannel、AsynchronousFileChannel、AsynchronousDatagramChannel
bio示例 server示例
1public class Server { 2 3 public static void main(String[] args) { 4 int port = genPort(args); 5 6 ServerSocket server = null; 7 ExecutorService service = Executors.</description>
			<content type="html"><![CDATA[<p>**同步和异步：**同步和异步是针对应用程序和内核的交互而言的，同步指的是用户进程触发IO 操作并等待或者轮询的去查看IO 操作是否就绪，而异步是指用户进程触发IO 操作以后便开始做自己的事情，而当IO 操作已经完成的时候会得到IO 完成的通知。</p>
<p>以银行取款为例：</p>
<p><strong>同步</strong> ： 自己亲自出马持银行卡到银行取钱（使用同步 IO 时，Java 自己处理IO 读写）；</p>
<p><strong>异步</strong> ： 委托一小弟拿银行卡到银行取钱，然后给你（使用异步IO 时，Java 将 IO 读写委托给OS 处理，需要将数据缓冲区地址和大小传给OS(银行卡和密码)，OS 需要支持异步IO操作API）；</p>
<p>**阻塞和非阻塞：**阻塞和非阻塞是针对于进程在访问数据的时候，根据IO操作的就绪状态来采取的不同方式，说白了是一种读取或者写入操作方法的实现方式，阻塞方式下读取或者写入函数将一直等待，而非阻塞方式下，读取或者写入方法会立即返回一个状态值。</p>
<p>以银行取款为例：</p>
<p><strong>阻塞</strong> ： ATM排队取款，你只能等待（使用阻塞IO时，Java调用会一直阻塞到读写完成才返回）；</p>
<p><strong>非阻塞</strong> ： 柜台取款，取个号，然后坐在椅子上做其它事，等号广播会通知你办理，没到号你就不能去，你可以不断问大堂经理排到了没有，大堂经理如果说还没到你就不能去（使用非阻塞IO时，如果不能读写Java调用会马上返回，当IO事件分发器通知可读写时再继续进行读写，不断循环直到读写完成）</p>
<p><strong>1.BIO 编程</strong></p>
<p>Blocking IO： 同步阻塞的编程方式。</p>
<p>BIO编程方式通常是在JDK1.4版本之前常用的编程方式。编程实现过程为：首先在服务端启动一个ServerSocket来监听网络请求，客户端启动Socket发起网络请求，默认情况下ServerSocket回建立一个线程来处理此请求，如果服务端没有线程可用，客户端则会阻塞等待或遭到拒绝。</p>
<p>且建立好的连接，在通讯过程中，是同步的。在并发处理效率上比较低。大致结构如下：</p>
<p>同步并阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，当然可以通过线程池机制改善。</p>
<p>BIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序直观简单易理解。</p>
<p>使用线程池机制改善后的BIO模型图如下:</p>
<p><strong>2.NIO 编程：Unblocking IO（New IO）： 同步非阻塞的编程方式。</strong></p>
<p>NIO本身是基于事件驱动思想来完成的，其主要想解决的是BIO的大并发问题，NIO基于Reactor，当socket有流可读或可写入socket时，操作系统会相应的通知引用程序进行处理，应用再将流读取到缓冲区或写入操作系统。也就是说，这个时候，已经不是一个连接就要对应一个处理线程了，而是有效的请求，对应一个线程，当连接没有数据时，是没有工作线程来处理的。</p>
<p>NIO的最重要的地方是当一个连接创建后，不需要对应一个线程，这个连接会被注册到多路复用器上面，所以所有的连接只需要一个线程就可以搞定，当这个线程中的多路复用器进行轮询的时候，发现连接上有请求的话，才开启一个线程进行处理，也就是一个请求一个线程模式。</p>
<p>在NIO的处理方式中，当一个请求来的话，开启线程进行处理，可能会等待后端应用的资源(JDBC连接等)，其实这个线程就被阻塞了，当并发上来的话，还是会有BIO一样的问题</p>
<p><strong>3.AIO编程：Asynchronous IO： 异步非阻塞的编程方式。</strong></p>
<p>与NIO不同，当进行读写操作时，只须直接调用API的read或write方法即可。这两种方法均为异步的，对于读操作而言，当有流可读取时，操作系统会将可读的流传入read方法的缓冲区，并通知应用程序；对于写操作而言，当操作系统将write方法传递的流写入完毕时，操作系统主动通知应用程序。即可以理解为，read/write方法都是异步的，完成后会主动调用回调函数。在JDK1.7中，这部分内容被称作NIO.2，主要在java.nio.channels包下增加了下面四个异步通道：<code>AsynchronousSocketChannel、AsynchronousServerSocketChannel、AsynchronousFileChannel、AsynchronousDatagramChannel</code></p>
<h3 id="bio示例"><strong>bio示例</strong></h3>
<p><strong>server示例</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Server</span> <span class="o">{</span>
<span class="ln"> 2</span>
<span class="ln"> 3</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 4</span>        <span class="kt">int</span> <span class="n">port</span> <span class="o">=</span> <span class="n">genPort</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
<span class="ln"> 5</span>        
<span class="ln"> 6</span>        <span class="n">ServerSocket</span> <span class="n">server</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="ln"> 7</span>        <span class="n">ExecutorService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="n">50</span><span class="o">);</span>
<span class="ln"> 8</span>        
<span class="ln"> 9</span>        <span class="k">try</span><span class="o">{</span>
<span class="ln">10</span>            <span class="n">server</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ServerSocket</span><span class="o">(</span><span class="n">port</span><span class="o">);</span>
<span class="ln">11</span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;server started!&#34;</span><span class="o">);</span>
<span class="ln">12</span>            <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">){</span>
<span class="ln">13</span>                <span class="n">Socket</span> <span class="n">socket</span> <span class="o">=</span> <span class="n">server</span><span class="o">.</span><span class="na">accept</span><span class="o">();</span>
<span class="ln">14</span>                
<span class="ln">15</span>                <span class="n">service</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">Handler</span><span class="o">(</span><span class="n">socket</span><span class="o">));</span>
<span class="ln">16</span>            <span class="o">}</span>
<span class="ln">17</span>        <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">){</span>
<span class="ln">18</span>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">19</span>        <span class="o">}</span><span class="k">finally</span><span class="o">{</span>
<span class="ln">20</span>            <span class="k">if</span><span class="o">(</span><span class="n">server</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
<span class="ln">21</span>                <span class="k">try</span> <span class="o">{</span>
<span class="ln">22</span>                    <span class="n">server</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
<span class="ln">23</span>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">24</span>                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">25</span>                <span class="o">}</span>
<span class="ln">26</span>            <span class="o">}</span>
<span class="ln">27</span>            <span class="n">server</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="ln">28</span>        <span class="o">}</span>
<span class="ln">29</span>    <span class="o">}</span>
<span class="ln">30</span>    
<span class="ln">31</span>    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Handler</span> <span class="kd">implements</span> <span class="n">Runnable</span><span class="o">{</span>
<span class="ln">32</span>        <span class="n">Socket</span> <span class="n">socket</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="ln">33</span>        <span class="kd">public</span> <span class="nf">Handler</span><span class="o">(</span><span class="n">Socket</span> <span class="n">socket</span><span class="o">){</span>
<span class="ln">34</span>            <span class="k">this</span><span class="o">.</span><span class="na">socket</span> <span class="o">=</span> <span class="n">socket</span><span class="o">;</span>
<span class="ln">35</span>        <span class="o">}</span>
<span class="ln">36</span>        <span class="nd">@Override</span>
<span class="ln">37</span>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
<span class="ln">38</span>            <span class="n">BufferedReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="ln">39</span>            <span class="n">PrintWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="ln">40</span>            <span class="k">try</span><span class="o">{</span>
<span class="ln">41</span>                
<span class="ln">42</span>                <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span>
<span class="ln">43</span>                        <span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">(),</span> <span class="s">&#34;UTF-8&#34;</span><span class="o">));</span>
<span class="ln">44</span>                <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PrintWriter</span><span class="o">(</span>
<span class="ln">45</span>                        <span class="k">new</span> <span class="n">OutputStreamWriter</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">(),</span> <span class="s">&#34;UTF-8&#34;</span><span class="o">));</span>
<span class="ln">46</span>                <span class="n">String</span> <span class="n">readMessage</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="ln">47</span>                <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">){</span>
<span class="ln">48</span>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;server reading... &#34;</span><span class="o">);</span>
<span class="ln">49</span>                    <span class="k">if</span><span class="o">((</span><span class="n">readMessage</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
<span class="ln">50</span>                        <span class="k">break</span><span class="o">;</span>
<span class="ln">51</span>                    <span class="o">}</span>
<span class="ln">52</span>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">readMessage</span><span class="o">);</span>
<span class="ln">53</span>                    <span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;server recive : &#34;</span> <span class="o">+</span> <span class="n">readMessage</span><span class="o">);</span>
<span class="ln">54</span>                    <span class="n">writer</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
<span class="ln">55</span>                <span class="o">}</span>
<span class="ln">56</span>            <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">){</span>
<span class="ln">57</span>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">58</span>            <span class="o">}</span><span class="k">finally</span><span class="o">{</span>
<span class="ln">59</span>                <span class="k">if</span><span class="o">(</span><span class="n">socket</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
<span class="ln">60</span>                    <span class="k">try</span> <span class="o">{</span>
<span class="ln">61</span>                        <span class="n">socket</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
<span class="ln">62</span>                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">63</span>                        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">64</span>                    <span class="o">}</span>
<span class="ln">65</span>                <span class="o">}</span>
<span class="ln">66</span>                <span class="n">socket</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="ln">67</span>                <span class="k">if</span><span class="o">(</span><span class="n">reader</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
<span class="ln">68</span>                    <span class="k">try</span> <span class="o">{</span>
<span class="ln">69</span>                        <span class="n">reader</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
<span class="ln">70</span>                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">71</span>                        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">72</span>                    <span class="o">}</span>
<span class="ln">73</span>                <span class="o">}</span>
<span class="ln">74</span>                <span class="n">reader</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="ln">75</span>                <span class="k">if</span><span class="o">(</span><span class="n">writer</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
<span class="ln">76</span>                    <span class="n">writer</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
<span class="ln">77</span>                <span class="o">}</span>
<span class="ln">78</span>                <span class="n">writer</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="ln">79</span>            <span class="o">}</span>
<span class="ln">80</span>        <span class="o">}</span>
<span class="ln">81</span>        
<span class="ln">82</span>    <span class="o">}</span>
<span class="ln">83</span>    
<span class="ln">84</span>    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">genPort</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
<span class="ln">85</span>        <span class="k">if</span><span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">){</span>
<span class="ln">86</span>            <span class="k">try</span><span class="o">{</span>
<span class="ln">87</span>                <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="n">0</span><span class="o">]);</span>
<span class="ln">88</span>            <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">NumberFormatException</span> <span class="n">e</span><span class="o">){</span>
<span class="ln">89</span>                <span class="k">return</span> <span class="n">9999</span><span class="o">;</span>
<span class="ln">90</span>            <span class="o">}</span>
<span class="ln">91</span>        <span class="o">}</span><span class="k">else</span><span class="o">{</span>
<span class="ln">92</span>            <span class="k">return</span> <span class="n">9999</span><span class="o">;</span>
<span class="ln">93</span>        <span class="o">}</span>
<span class="ln">94</span>    <span class="o">}</span>
<span class="ln">95</span>    
<span class="ln">96</span><span class="o">}</span>
</code></pre></div><p><strong>client示例：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
<span class="ln"> 2</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 3</span>        <span class="n">String</span> <span class="n">host</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="ln"> 4</span>        <span class="kt">int</span> <span class="n">port</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
<span class="ln"> 5</span>        <span class="k">if</span><span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="n">2</span><span class="o">){</span>
<span class="ln"> 6</span>            <span class="n">host</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
<span class="ln"> 7</span>            <span class="n">port</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="n">1</span><span class="o">]);</span>
<span class="ln"> 8</span>        <span class="o">}</span><span class="k">else</span><span class="o">{</span>
<span class="ln"> 9</span>            <span class="n">host</span> <span class="o">=</span> <span class="s">&#34;127.0.0.1&#34;</span><span class="o">;</span>
<span class="ln">10</span>            <span class="n">port</span> <span class="o">=</span> <span class="n">9999</span><span class="o">;</span>
<span class="ln">11</span>        <span class="o">}</span>
<span class="ln">12</span>        
<span class="ln">13</span>        <span class="n">Socket</span> <span class="n">socket</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="ln">14</span>        <span class="n">BufferedReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="ln">15</span>        <span class="n">PrintWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="ln">16</span>        <span class="n">Scanner</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
<span class="ln">17</span>        <span class="k">try</span><span class="o">{</span>
<span class="ln">18</span>            <span class="n">socket</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Socket</span><span class="o">(</span><span class="n">host</span><span class="o">,</span> <span class="n">port</span><span class="o">);</span>
<span class="ln">19</span>            <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="ln">20</span>            
<span class="ln">21</span>            <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span>
<span class="ln">22</span>                    <span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">(),</span> <span class="s">&#34;UTF-8&#34;</span><span class="o">));</span>
<span class="ln">23</span>            <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PrintWriter</span><span class="o">(</span>
<span class="ln">24</span>                    <span class="n">socket</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">(),</span> <span class="kc">true</span><span class="o">);</span>
<span class="ln">25</span>            <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">){</span>
<span class="ln">26</span>                <span class="n">message</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>
<span class="ln">27</span>                <span class="k">if</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&#34;exit&#34;</span><span class="o">)){</span>
<span class="ln">28</span>                    <span class="k">break</span><span class="o">;</span>
<span class="ln">29</span>                <span class="o">}</span>
<span class="ln">30</span>                <span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
<span class="ln">31</span>                <span class="n">writer</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
<span class="ln">32</span>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="ln">33</span>            <span class="o">}</span>
<span class="ln">34</span>        <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">){</span>
<span class="ln">35</span>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">36</span>        <span class="o">}</span><span class="k">finally</span><span class="o">{</span>
<span class="ln">37</span>            <span class="k">if</span><span class="o">(</span><span class="n">socket</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
<span class="ln">38</span>                <span class="k">try</span> <span class="o">{</span>
<span class="ln">39</span>                    <span class="n">socket</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
<span class="ln">40</span>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">41</span>                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">42</span>                <span class="o">}</span>
<span class="ln">43</span>            <span class="o">}</span>
<span class="ln">44</span>            <span class="n">socket</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="ln">45</span>            <span class="k">if</span><span class="o">(</span><span class="n">reader</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
<span class="ln">46</span>                <span class="k">try</span> <span class="o">{</span>
<span class="ln">47</span>                    <span class="n">reader</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
<span class="ln">48</span>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="ln">49</span>                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="ln">50</span>                <span class="o">}</span>
<span class="ln">51</span>            <span class="o">}</span>
<span class="ln">52</span>            <span class="n">reader</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="ln">53</span>            <span class="k">if</span><span class="o">(</span><span class="n">writer</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
<span class="ln">54</span>                <span class="n">writer</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
<span class="ln">55</span>            <span class="o">}</span>
<span class="ln">56</span>            <span class="n">writer</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="ln">57</span>        <span class="o">}</span>
<span class="ln">58</span>    <span class="o">}</span>
<span class="ln">59</span><span class="o">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Java Fundament 6: Stream</title>
			<link>https://daiwei.dev/posts/java/fundament6_stream/</link>
			<pubDate>Wed, 06 Oct 2021 18:18:55 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/java/fundament6_stream/</guid>
			<description>1public class StreamTestCase1 { 2 public static void main(String[] args) { 3 List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); 4 list.add(&amp;#34;a&amp;#34;); 5 list.add(&amp;#34;aa&amp;#34;); 6 list.add(&amp;#34;aaa&amp;#34;); 7 list.add(&amp;#34;asbcdef&amp;#34;); 8 Stream&amp;lt;Integer&amp;gt; stream = list.stream().map(String::length); 9 stream.forEach(System.out::println); 10 11 boolean anyMatch = list.stream().anyMatch(element -&amp;gt; element.contains(&amp;#34;a&amp;#34;)); 12 System.out.println(anyMatch); 13 14 Stream&amp;lt;String&amp;gt; streamFilter = list.stream().filter(element -&amp;gt; element.contains(&amp;#34;a&amp;#34;)); 15 streamFilter.forEach(System.out::println); 16 17 Integer[] ints = {5, 1, 2, 3}; 18 List&amp;lt;Integer&amp;gt; list1 = Arrays.asList(ints); 19 20 Optional&amp;lt;Integer&amp;gt; plus = list1.</description>
			<content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StreamTestCase1</span> <span class="o">{</span>
<span class="ln"> 2</span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="ln"> 3</span>        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
<span class="ln"> 4</span>        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">);</span>
<span class="ln"> 5</span>        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;aa&#34;</span><span class="o">);</span>
<span class="ln"> 6</span>        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;aaa&#34;</span><span class="o">);</span>
<span class="ln"> 7</span>        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;asbcdef&#34;</span><span class="o">);</span>
<span class="ln"> 8</span>        <span class="n">Stream</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">map</span><span class="o">(</span><span class="n">String</span><span class="o">::</span><span class="n">length</span><span class="o">);</span>
<span class="ln"> 9</span>        <span class="n">stream</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
<span class="ln">10</span>
<span class="ln">11</span>        <span class="kt">boolean</span> <span class="n">anyMatch</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">anyMatch</span><span class="o">(</span><span class="n">element</span> <span class="o">-&gt;</span> <span class="n">element</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">));</span>
<span class="ln">12</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">anyMatch</span><span class="o">);</span>
<span class="ln">13</span>
<span class="ln">14</span>        <span class="n">Stream</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">streamFilter</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">element</span> <span class="o">-&gt;</span> <span class="n">element</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">));</span>
<span class="ln">15</span>        <span class="n">streamFilter</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
<span class="ln">16</span>
<span class="ln">17</span>        <span class="n">Integer</span><span class="o">[]</span> <span class="n">ints</span> <span class="o">=</span> <span class="o">{</span><span class="n">5</span><span class="o">,</span> <span class="n">1</span><span class="o">,</span> <span class="n">2</span><span class="o">,</span> <span class="n">3</span><span class="o">};</span>
<span class="ln">18</span>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list1</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">ints</span><span class="o">);</span>
<span class="ln">19</span>
<span class="ln">20</span>        <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">plus</span> <span class="o">=</span> <span class="n">list1</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">reduce</span><span class="o">((</span><span class="n">a</span><span class="o">,</span><span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span><span class="o">);</span>
<span class="ln">21</span>        <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">list1</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">reduce</span><span class="o">(</span><span class="n">Integer</span><span class="o">::</span><span class="n">sum</span><span class="o">);</span>
<span class="ln">22</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">plus</span><span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="n">0</span><span class="o">));</span>
<span class="ln">23</span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sum</span><span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="n">0</span><span class="o">));</span>
<span class="ln">24</span>    <span class="o">}</span>
<span class="ln">25</span><span class="o">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Java Fundament 5: Annotation注解</title>
			<link>https://daiwei.dev/posts/java/fundament5_annotation/</link>
			<pubDate>Tue, 05 Oct 2021 17:26:19 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/java/fundament5_annotation/</guid>
			<description>The predefined annotation types defined in java.lang are @Deprecated, @Override, and @SuppressWarnings.
@Deprecated注释表示被标记的元素已被弃用，不应再使用。每当程序使用带有@Deprecated注释的方法、类或字段时，编译器都会生成警告
@Override注释通知编译器该元素旨在覆盖超类中声明的元素。覆盖方法将在接口和继承中讨论 。虽然在覆盖方法时不需要使用此注释，但它有助于防止错误。如果标记为 的方法@Override未能正确覆盖其超类之一中的方法，则编译器会生成错误
@SuppressWarnings注释告诉编译器抑制它会生成的特定警告。
使用 annotation 注释并不是必须的，没有使用 annotation 并不会影响程序的任何功能。
但是如果你使用@Override注释一个方法但你没有覆盖任何东西，编译器会提示bug, 这是一个低成本高效率增加代码可维护性的方法，非常推荐使用。
从 Java SE 8 版本开始，注释也可以应用于任何类型的 use。这意味着可以在使用类型的任何地方使用注释。使用类型的一些示例是类实例创建表达式 ( new)、强制转换、implements子句和throws子句。创建类型注释是为了支持改进的 Java 程序分析方法，以确保更强大的类型检查。
1@Entity 2 3@Override 4void mySuperMethod() { ... } 5 6@Author( 7 name = &amp;#34;Benjamin Franklin&amp;#34;, 8 date = &amp;#34;3/27/2003&amp;#34; 9) 10class MyClass { ... } 11 12//If only one element named value, then the name can be omitted 13@SuppressWarnings(value = &amp;#34;unchecked&amp;#34;) 14void myMethod() { .</description>
			<content type="html"><![CDATA[<p>The predefined <a href="https://docs.oracle.com/javase/tutorial/java/annotations/index.html">annotation</a> types defined in <code>java.lang</code> are <strong><code>@Deprecated</code>, <code>@Override</code>, and <code>@SuppressWarnings</code></strong>.</p>
<p><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Deprecated.html"><code>@Deprecated</code></a>注释表示被标记的元素已被<em>弃用</em>，不应再使用。每当程序使用带有<code>@Deprecated</code>注释的方法、类或字段时，编译器都会生成警告</p>
<p><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Override.html"><code>@Override</code></a>注释通知编译器该元素旨在覆盖超类中声明的元素。覆盖方法将在<a href="https://docs.oracle.com/javase/tutorial/java/IandI/index.html">接口和继承中</a>讨论 。虽然在覆盖方法时不需要使用此注释，但它有助于防止错误。如果标记为 的方法<code>@Override</code>未能正确覆盖其超类之一中的方法，则编译器会生成错误</p>
<p><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/SuppressWarnings.html"><code>@SuppressWarnings</code></a>注释告诉编译器抑制它会生成的特定警告。</p>
<p>使用 annotation 注释并不是必须的，没有使用 annotation 并不会影响程序的任何功能。</p>
<p>但是如果你使用<code>@Override</code>注释一个方法但你没有覆盖任何东西，编译器会提示bug, 这是一个低成本高效率增加代码可维护性的方法，非常推荐使用。</p>
<p>从 Java SE 8 版本开始，注释也可以应用于任何<em>类型的 use</em>。这意味着可以在使用类型的任何地方使用注释。使用类型的一些示例是类实例创建表达式 ( <code>new</code>)、强制转换、<code>implements</code>子句和<code>throws</code>子句。创建类型注释是为了支持改进的 Java 程序分析方法，以确保更强大的类型检查。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="nd">@Entity</span>
<span class="ln"> 2</span>
<span class="ln"> 3</span><span class="nd">@Override</span>
<span class="ln"> 4</span><span class="kt">void</span> <span class="nf">mySuperMethod</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
<span class="ln"> 5</span>
<span class="ln"> 6</span><span class="nd">@Author</span><span class="o">(</span>
<span class="ln"> 7</span>   <span class="n">name</span> <span class="o">=</span> <span class="s">&#34;Benjamin Franklin&#34;</span><span class="o">,</span>
<span class="ln"> 8</span>   <span class="n">date</span> <span class="o">=</span> <span class="s">&#34;3/27/2003&#34;</span>
<span class="ln"> 9</span><span class="o">)</span>
<span class="ln">10</span><span class="kd">class</span> <span class="nc">MyClass</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
<span class="ln">11</span>
<span class="ln">12</span><span class="c1">//If only one element named value, then the name can be omitted
</span><span class="ln">13</span><span class="c1"></span><span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;unchecked&#34;</span><span class="o">)</span>
<span class="ln">14</span><span class="kt">void</span> <span class="nf">myMethod</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
<span class="ln">15</span>
<span class="ln">16</span><span class="c1">//multiple annotations on the same declarati
</span><span class="ln">17</span><span class="c1"></span><span class="nd">@Author</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;Jane Doe&#34;</span><span class="o">)</span>
<span class="ln">18</span><span class="nd">@EBook</span>
<span class="ln">19</span><span class="kd">class</span> <span class="nc">MyClass</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
<span class="ln">20</span>
<span class="ln">21</span><span class="c1">//Type cast
</span><span class="ln">22</span><span class="c1"></span><span class="n">myString</span> <span class="o">=</span> <span class="o">(</span><span class="nd">@NonNull</span> <span class="n">String</span><span class="o">)</span> <span class="n">str</span><span class="o">;</span>
<span class="ln">23</span>
<span class="ln">24</span><span class="c1">//implements clause:
</span><span class="ln">25</span><span class="c1"></span><span class="kd">class</span> <span class="nc">UnmodifiableList</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">implements</span>
<span class="ln">26</span>    <span class="nd">@Readonly</span> <span class="n">List</span><span class="o">&lt;</span><span class="nd">@Readonly</span> <span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
<span class="ln">27</span>
<span class="ln">28</span><span class="c1">//Thrown exception declaration:
</span><span class="ln">29</span><span class="c1"></span><span class="kt">void</span> <span class="nf">monitorTemperature</span><span class="o">()</span> <span class="kd">throws</span>
<span class="ln">30</span>    <span class="nd">@Critical</span> <span class="n">TemperatureException</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
<span class="ln">31</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Java Fundament 4:  Build Automation Tools：Ant, Gradle &amp; Maven</title>
			<link>https://daiwei.dev/posts/java/fundament4_gradle/</link>
			<pubDate>Mon, 04 Oct 2021 16:38:00 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/java/fundament4_gradle/</guid>
			<description>在进入ANT、Maven或Gradle 之前，我们必须首先了解与它们相关的一些事情。
**依赖:**一般来说，依赖是指某件事需要另一件事来自己执行。简单地说，如果 &amp;lsquo;A&amp;rsquo; 需要 &amp;lsquo;B&amp;rsquo; 才能成功执行，则 &amp;lsquo;A&amp;rsquo; 依赖于 &amp;lsquo;B&amp;rsquo;。在软件世界中，依赖项是您的应用程序成功执行所需的任何东西。它基本上是应用程序所需的任何外部支持库。例如zuul、hystrix、lombok、jdbc等。
最初，我们曾经通过以下方式管理依赖项：
 从互联网上手动下载所需库的jar文件并将其添加到我们的项目中。 编写一个脚本，该脚本将通过网络从外部源自动下载库。  使用这些工具之前面临的问题：
 通过从 Internet 上手动下载来添加依赖项是一项非常累人的任务。 如果外部源的 URL 通过 Internet 更改，我们的脚本可能会失败。 在我们的应用程序中识别和管理传递依赖是非常困难的。  **Depende Management Tools依赖管理工具:**它解决和管理应用程序所需的依赖关系。
什么是构建工具？
 构建工具是从源代码自动创建可执行应用程序的程序（例如，.apk对于 Android 应用程序）。构建包括将代码编译、链接和打包成可用或可执行的形式。
基本上，构建自动化是编写脚本或自动化软件开发人员在日常活动中执行的各种任务的行为，例如：
 下载并管理依赖项。 将源代码编译成二进制代码。 打包那个二进制代码。 运行测试。 部署到生产系统。   我们为什么要使用构建工具或构建自动化？
 在小型项目中，开发人员通常会手动调用构建过程。这对于大型项目来说是不切实际的，因为很难跟踪需要构建的内容、构建过程中的顺序和依赖关系。使用自动化工具可以使构建过程更加一致。
 各种可用的构建工具 ：
  Java - Ant、Maven、Gradle。 .NET 框架 - NAnt c# - MsBuild。   Apache Ant Ant是 Apache Tomcat 代码库的一部分，并于 2000 年作为独立项目发布.</description>
			<content type="html"><![CDATA[<p>在进入<em>ANT</em>、<em>Maven</em>或<em>Gradle 之前</em>，我们必须首先了解与它们相关的一些事情。</p>
<p>**依赖:**一般来说，依赖是指某件事需要另一件事来自己执行。简单地说，如果 &lsquo;A&rsquo; 需要 &lsquo;B&rsquo; 才能成功执行，则 &lsquo;A&rsquo; 依赖于 &lsquo;B&rsquo;。在软件世界中，依赖项是您的应用程序成功执行所需的任何东西。它基本上是应用程序所需的任何外部支持库。例如zuul、hystrix、lombok、jdbc等。</p>
<p>最初，我们曾经通过以下方式管理依赖项：</p>
<ul>
<li>从互联网上手动下载所需库的jar文件并将其添加到我们的项目中。</li>
<li>编写一个脚本，该脚本将通过网络从外部源自动下载库。</li>
</ul>
<p>使用这些工具之前面临的问题：</p>
<ul>
<li>通过从 Internet 上手动下载来添加依赖项是一项非常累人的任务。</li>
<li>如果外部源的 URL 通过 Internet 更改，我们的脚本可能会失败。</li>
<li>在我们的应用程序中识别和管理传递依赖是非常困难的。</li>
</ul>
<p>**Depende Management Tools依赖管理工具:**它解决和管理应用程序所需的依赖关系。</p>
<p><strong>什么是构建工具？</strong></p>
<blockquote>
<p>构建工具是从源代码自动创建可执行应用程序的程序（例如，<code>.apk</code>对于 Android 应用程序）。构建包括将代码编译、链接和打包成可用或可执行的形式。</p>
<p>基本上，构建自动化是编写脚本或自动化软件开发人员在日常活动中执行的各种任务的行为，例如：</p>
<ol>
<li>下载并管理依赖项。</li>
<li>将源代码编译成二进制代码。</li>
<li>打包那个二进制代码。</li>
<li>运行测试。</li>
<li>部署到生产系统。</li>
</ol>
</blockquote>
<p><strong>我们为什么要使用构建工具或构建自动化？</strong></p>
<blockquote>
<p>在小型项目中，开发人员通常会手动调用构建过程。这对于大型项目来说是不切实际的，因为很难跟踪需要构建的内容、构建过程中的顺序和依赖关系。使用自动化工具可以使构建过程更加一致。</p>
</blockquote>
<p><strong>各种可用的构建工具 ：</strong></p>
<blockquote>
<ol>
<li>Java - Ant、Maven、Gradle。</li>
<li>.NET 框架 - NAnt</li>
<li>c# - MsBuild。</li>
</ol>
</blockquote>
<h3 id="apache-ant"><strong>Apache Ant</strong></h3>
<p>Ant是 Apache Tomcat 代码库的一部分，并于 2000 年作为独立项目发布. Ant 的主要好处是它的灵活性。Ant 不会对开发人员强加任何编码约定或项目结构。因此，这意味着 Ant 需要开发人员自己编写所有命令，这有时会导致构建文件很大并且难以维护。最初，Ant 没有对依赖项管理的内置支持。后来它采用了Apache Ivy，作为Apache Ant项目的一个子项目开发，用于依赖管理。<strong>过时的构建工具。</strong></p>
<h3 id="apache-maven"><strong>Apache Maven</strong></h3>
<p><a href="https://maven.apache.org/">Apache Maven</a>是一个依赖管理和构建自动化工具，于 2004 年发布。它继续使用*XML，*但通过遵循“<em>约定优于配置</em>”的原则克服了缺点。它依赖于约定并提供预定义的命令（目标）。它的配置文件，包含构建和依赖管理指令，按照惯例称为“ <em>pom.xml</em> ”，存在于项目的根文件夹中。<strong>Ant 升级版</strong>。</p>
<p><img src="https://miro.medium.com/max/1324/1*p9j7JsTDxRLdsdks4ADlaQ.jpeg" alt="img"></p>
<p>Maven 引擎将<em>pom.xml</em>和项目作为输入。它读取<em>pom.xml</em>文件并将其中提到的依赖项作为 jar 文件下载到本地存储库中。然后，它执行生命周期、构建阶段和插件。最后，生成一个打包和测试的工件。</p>
<p><strong>pom.xml 示例：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="o">&lt;?</span><span class="n">xml</span> <span class="n">version</span><span class="o">=</span><span class="s">&#34;1.0&#34;</span> <span class="n">encoding</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="o">?&gt;</span> 
<span class="ln"> 2</span><span class="o">&lt;</span><span class="n">project</span> <span class="n">xmlns</span><span class="o">=</span><span class="s">&#34; http://maven.apache.org/POM/4.0.0 &#34;</span> 
<span class="ln"> 3</span><span class="nl">xmlns:</span><span class="n">xsi</span><span class="o">=</span><span class="s">&#34; http://www.w3 .org/2001/XMLSchema-instance &#34;</span>   
<span class="ln"> 4</span><span class="nl">xsi:</span><span class="n">schemaLocation</span><span class="o">=</span><span class="s">&#34; http://maven.apache.org/POM/4.0.0  
</span><span class="ln"> 5</span><span class="s"> https://maven.apache.org/xsd/maven-4.0.0.xsd &#34;</span><span class="o">&gt;</span> 
<span class="ln"> 6</span>       <span class="o">&lt;</span><span class="n">modelVersion</span><span class="o">&gt;</span><span class="n">4</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">0</span><span class="o">&lt;/</span><span class="n">modelVersion</span><span class="o">&gt;</span> 
<span class="ln"> 7</span>       <span class="o">&lt;</span><span class="n">parent</span><span class="o">&gt;</span>    
<span class="ln"> 8</span>               <span class="o">&lt;</span><span class="n">groupId</span><span class="o">&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">&lt;/</span><span class="n">groupId</span><span class="o">&gt;</span> 
<span class="ln"> 9</span>               <span class="o">&lt;</span><span class="n">artifactId</span><span class="o">&gt;</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">parent</span><span class="o">&lt;/</span><span class="n">artifactId</span><span class="o">&gt;</span> 
<span class="ln">10</span>               <span class="o">&lt;</span><span class="n">version</span><span class="o">&gt;</span><span class="n">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">5</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">&lt;/</span><span class="n">version</span> <span class="o">&gt;</span>   
<span class="ln">11</span>               <span class="o">&lt;</span><span class="n">relativePath</span><span class="o">/&gt;</span> 
<span class="ln">12</span>       <span class="o">&lt;/</span><span class="n">parent</span><span class="o">&gt;</span>
<span class="ln">13</span>       <span class="o">&lt;</span><span class="n">groupId</span><span class="o">&gt;</span><span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">&lt;/</span><span class="n">groupId</span><span class="o">&gt;</span>  
<span class="ln">14</span>       <span class="o">&lt;</span><span class="n">artifactId</span><span class="o">&gt;</span><span class="n">demo</span><span class="o">&lt;/</span><span class="n">artifactId</span><span class="o">&gt;</span>   
<span class="ln">15</span>       <span class="o">&lt;</span><span class="n">version</span><span class="o">&gt;</span><span class="n">0</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">1</span><span class="o">-</span><span class="n">SNAPSHOT</span><span class="o">&lt;/</span><span class="n">version</span><span class="o">&gt;</span>   
<span class="ln">16</span>       <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span><span class="n">demo</span><span class="o">&lt;/</span><span class="n">name</span><span class="o">&gt;</span>   
<span class="ln">17</span>       <span class="o">&lt;</span><span class="n">description</span><span class="o">&gt;</span><span class="n">Spring</span> <span class="n">Boot</span> <span class="n">的演示项目</span><span class="o">&lt;/</span><span class="n">description</span><span class="o">&gt;</span>    
<span class="ln">18</span>       <span class="o">&lt;</span><span class="n">properties</span><span class="o">&gt;</span>   
<span class="ln">19</span>                  <span class="o">&lt;</span><span class="n">java</span><span class="o">.</span><span class="na">version</span><span class="o">&gt;</span><span class="n">1</span><span class="o">.</span><span class="na">8</span><span class="o">&lt;</span> <span class="o">/</span><span class="n">java</span><span class="o">.</span><span class="na">version</span><span class="o">&gt;</span> 
<span class="ln">20</span>       <span class="o">&lt;/</span><span class="n">properties</span><span class="o">&gt;</span>    
<span class="ln">21</span>       <span class="o">&lt;</span><span class="n">dependencies</span><span class="o">&gt;</span> 
<span class="ln">22</span>                    <span class="o">&lt;</span><span class="n">dependency</span><span class="o">&gt;</span>    
<span class="ln">23</span>                               <span class="o">&lt;</span><span class="n">groupId</span><span class="o">&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">projectlombok</span><span class="o">&lt;/</span><span class="n">groupId</span><span class="o">&gt;</span> 
<span class="ln">24</span>                               <span class="o">&lt;</span><span class="n">artifactId</span><span class="o">&gt;</span><span class="n">lombok</span><span class="o">&lt;/</span><span class="n">artifactId</span><span class="o">&gt;</span>    
<span class="ln">25</span>                               <span class="o">&lt;</span><span class="n">optional</span><span class="o">&gt;</span><span class="kc">true</span><span class="o">&lt;/</span><span class="n">optional</span><span class="o">&gt;</span> 
<span class="ln">26</span>                    <span class="o">&lt;/</span><span class="n">dependency</span><span class="o">&gt;</span> 
<span class="ln">27</span>       <span class="o">&lt;/</span><span class="n">dependencies</span><span class="o">&gt;</span>   
<span class="ln">28</span><span class="o">&lt;/</span><span class="n">项目</span><span class="o">&gt;</span>
</code></pre></div><p>pom.xml 文件中的一些重要标签：</p>
<ul>
<li>**groupId:**代表项目所属的组织。</li>
<li>**artifactId:**它是项目的名称。</li>
<li>**version:**它代表项目的版本。</li>
<li>**包装:**它代表了项目构建的最终形式。</li>
</ul>
<p><strong>在maven中添加依赖：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="o">&lt;</span><span class="n">dependency</span><span class="o">&gt;</span> 
<span class="ln">2</span>    <span class="o">&lt;</span><span class="n">groupId</span><span class="o">&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">projectlombok</span><span class="o">&lt;/</span><span class="n">groupId</span><span class="o">&gt;</span> 
<span class="ln">3</span>    <span class="o">&lt;</span><span class="n">artifactId</span><span class="o">&gt;</span><span class="n">lombok</span><span class="o">&lt;/</span><span class="n">artifactId</span><span class="o">&gt;</span> 
<span class="ln">4</span>    <span class="o">&lt;</span><span class="n">version</span><span class="o">&gt;</span><span class="n">1</span><span class="o">.</span><span class="na">18</span><span class="o">.</span><span class="na">10</span><span class="o">&lt;/</span><span class="n">version</span><span class="o">&gt;</span> 
<span class="ln">5</span><span class="o">&lt;/</span><span class="n">dependency</span><span class="o">&gt;</span>
</code></pre></div><p>Maven 规定了严格的项目结构，而 Ant 也提供了灵活性。严格的约定伴随着比 Ant 灵活得多的代价——目标定制非常困难。</p>
<p><strong>maven的缺点：</strong></p>
<ol>
<li>依赖管理不能很好地处理同一个库的不同版本之间的冲突。</li>
<li>目标的定制很难。</li>
</ol>
<h3 id="gradle"><strong>Gradle</strong></h3>
<p>Grade 是一个开源的依赖管理和构建自动化工具，于 2012 年发布。它结合了 Apache Ant 和 Apache Maven 的优点，并在它们之上构建，并使用域特定语言（基于 Groovy）而不是 XML。它采用了 Ant 的灵活性和 Maven 的生命周期。它还遵循“<em>约定优于配置</em>”的原则。它支持用于检索依赖项的 Maven 和 Ivy 存储库。它的配置文件通常称为“ <em>build.gradle</em> ”，位于项目的根文件夹中。Gradle 将其构建步骤命名为“任务”，而不是 Ant 的“目标”或 Maven 的“阶段”。Google 采用 Gradle 作为 Android 操作系统的默认构建工具。</p>
<p>Gradle 不使用 XML。相反，它有它自己<strong>d</strong> omain<strong>小号</strong>pecific<strong>大号</strong>基于Groovy的（JVM语言之一）anguage。因此，与为 Ant 或 Maven 编写的脚本相比，Gradle 构建脚本往往更短、更清晰。Gradle 的样板代码量要小得多。</p>
<p><strong>Gradle 配置</strong></p>
<ul>
<li>**实现:**它用于声明我们不想暴露给消费者编译时的依赖项。</li>
<li>**api:**它用于声明作为我们 API 一部分的<em>依赖项，即我们明确希望向消费者公开的依赖项。</em></li>
<li>**compileOnly:**它 允许我们声明只应在编译时可用但在运行时不需要的依赖项。此配置的一个示例用例是像<a href="https://projectlombok.org/">Lombok</a>这样的注释处理器，它在编译时修改字节码。编译后不再需要它，因此该依赖项在运行时不可用。</li>
<li>**runtimeOnly:**它允许我们声明在编译时不需要但在运行时可用的依赖项。一个例子是<a href="https://www.slf4j.org/">SLF4J</a>，我们<code>slf4j-api</code>将其包含到<code>implementation</code>配置中，并将该 API（如<code>slf4j-log4j12</code>或<code>logback-classic</code>）的实现包含在<code>runtimeOnly</code>配置中。</li>
<li>**testImplementation:**类似于<code>implementation</code>，但声明的依赖项<code>testImplementation</code>仅在测试的编译和运行时可用。我们可以使用它来声明对测试框架（如<a href="https://junit.org/junit5/">JUnit</a>或<a href="https://site.mockito.org/">Mockito）的</a>依赖<a href="https://site.mockito.org/">项</a>，我们只在测试中需要，而在生产代码中不应该提供这些依赖项。</li>
<li>**testCompileOnly:**类似于<code>compileOnly</code>，但声明的依赖项<code>testCompileOnly</code>仅在测试编译期间可用，在运行时不可用。</li>
<li>**testRuntimeOnly:**与 类似<code>runtimeOnly</code>，但声明为 的依赖项<code>testRuntimeOnly</code>仅在测试运行时可用，而在编译时不可用。</li>
</ul>
<p><strong>Gradle 中的项目和任务</strong></p>
<p>每个 Gradle 构建都包含一个或多个项目。每个项目由一组任务组成。每个任务代表构建执行的单个工作，例如生成 JavaDoc，将一些档案发布到存储库等。</p>
<p><strong>build.gradle 示例</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln"> 1</span><span class="n">plugins</span> <span class="o">{</span>
<span class="ln"> 2</span> <span class="n">id</span> <span class="err">&#39;</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="err">&#39;</span> <span class="n">version</span> <span class="err">&#39;</span><span class="n">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">5</span><span class="o">.</span><span class="na">RELEASE</span><span class="err">&#39;</span>
<span class="ln"> 3</span> <span class="n">id</span> <span class="err">&#39;</span><span class="n">io</span><span class="o">.</span><span class="na">spring</span><span class="o">.</span><span class="na">dependency</span><span class="o">-</span><span class="n">management</span><span class="err">&#39;</span> <span class="n">version</span> <span class="err">&#39;</span><span class="n">1</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">9</span><span class="o">.</span><span class="na">RELEASE</span><span class="err">&#39;</span>
<span class="ln"> 4</span> <span class="n">id</span> <span class="err">&#39;</span><span class="n">java</span><span class="err">&#39;</span>
<span class="ln"> 5</span><span class="o">}</span>
<span class="ln"> 6</span><span class="n">group</span> <span class="o">=</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="err">&#39;</span>
<span class="ln"> 7</span><span class="n">version</span> <span class="o">=</span> <span class="err">&#39;</span><span class="n">0</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">1</span><span class="o">-</span><span class="n">SNAPSHOT</span><span class="err">&#39;</span>
<span class="ln"> 8</span><span class="n">sourceCompatibility</span> <span class="o">=</span> <span class="err">&#39;</span><span class="n">1</span><span class="o">.</span><span class="na">8</span><span class="err">&#39;</span>
<span class="ln"> 9</span><span class="n">repositories</span> <span class="o">{</span>
<span class="ln">10</span> <span class="n">mavenCentral</span><span class="o">()</span>
<span class="ln">11</span><span class="o">}</span>
<span class="ln">12</span><span class="n">dependencies</span> <span class="o">{</span>
<span class="ln">13</span> <span class="n">implementation</span> <span class="err">&#39;</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="err">&#39;</span>
<span class="ln">14</span> <span class="o">}</span>
<span class="ln">15</span><span class="o">}</span>
</code></pre></div><p>示例：在我们的项目中添加中央 Maven 存储库，将以下代码片段添加到我们的<strong>build.gradle</strong>文件中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">repositories</span> <span class="o">{</span>
<span class="ln">2</span>    <span class="n">mavenCentral</span><span class="o">()</span>
<span class="ln">3</span><span class="o">}</span>
</code></pre></div><p><strong>在 Gradle 中添加依赖项：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="ln">1</span><span class="n">compile</span> <span class="n">group</span><span class="o">:</span> <span class="err">&#39;</span><span class="n">org</span><span class="o">.</span><span class="na">hibernate</span><span class="err">&#39;</span><span class="o">,</span> <span class="n">name</span><span class="o">:</span> <span class="err">&#39;</span><span class="n">hibernate</span><span class="o">-</span><span class="n">core</span><span class="err">&#39;</span><span class="o">,</span> <span class="n">version</span><span class="o">:</span> <span class="err">&#39;</span><span class="n">3</span><span class="o">.</span><span class="na">6</span><span class="o">.</span><span class="na">7</span><span class="o">.</span><span class="na">Final</span><span class="err">&#39;</span>
</code></pre></div><p><strong>好处：</strong></p>
<ol>
<li>它可以很好地处理传递依赖。如果项目中存在冲突的传递依赖项，那么为了解决它，它选择依赖项的最新版本。例如，依赖“A”在内部需要依赖“C”和版本 2.0，依赖“B”在内部需要依赖“C”和版本 3.0。然后 Gradle 将使用最新版本的依赖项“C”。</li>
<li>Gradle 的配置文件更小，更干净，因为它使用领域特定语言，基于 Groovy 而不是 XML。</li>
<li>摇篮采用增量构建理念和跟踪任务的输入和输出，并只在运行什么是必要的，只有处理避免了工作，改变在可能的情况，因此尔斯，执行比Maven的更快。</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>Java Fundament 3: Java OOP</title>
			<link>https://daiwei.dev/posts/java/fundament3_oop/</link>
			<pubDate>Sun, 03 Oct 2021 11:30:25 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/java/fundament3_oop/</guid>
			<description>Object-oriented programming (OOP) is a programming based on the concept of “objects” that contain data and methods. The primary purpose of object-oriented programming is to increase the flexibility and maintainability of programs. Object oriented programming brings together data and its behaviour(methods) in a single location(object) makes it easier to understand how a program works.
面向对象程序设计（Object Oriented Programming，OOP）是一种计算机编程架构。OOP的一条基本原则是计算机程序由单个能够起到子程序作用的单元或对象组合而成。OOP达到了软件工程的三个主要目标：重用性、灵活性和扩展性。OOP=对象+类+继承+多态+消息，其中核心概念是类和对象。
除了OOP, 还有面向过程(Procedure Oriented Programming)，是一种以过程为中心的编程思想。这些都是以什么正在发生为主要目标进行编程。函数式编程（Functional Programming），data更多的围绕operation， 所以添加新的方法很容易。
What is an Object 什么是对象？对象就是一组数据 data 和行为 behaviour (aka method).</description>
			<content type="html"><![CDATA[<p>Object-oriented programming (OOP) is a programming based on the concept of “objects” that contain data and methods. The primary purpose of object-oriented programming is to increase the flexibility and maintainability of programs. Object oriented programming brings together data and its behaviour(methods) in a single location(object) makes it easier to understand how a program works.</p>
<p>面向对象程序设计（Object Oriented Programming，OOP）是一种计算机编程架构。OOP的一条基本原则是计算机程序由单个能够起到子程序作用的单元或对象组合而成。OOP达到了软件工程的三个主要目标：重用性、灵活性和扩展性。OOP=对象+类+继承+多态+消息，其中核心概念是类和对象。</p>
<p>除了OOP, 还有面向过程(Procedure Oriented Programming)，是一种以过程为中心的编程思想。这些都是以什么正在发生为主要目标进行编程。函数式编程（Functional Programming），data更多的围绕operation， 所以添加新的方法很容易。</p>
<h3 id="what-is-an-object">What is an Object</h3>
<p>什么是对象？对象就是一组数据 data 和行为 behaviour (aka method).</p>
<p><strong>Example :</strong>
<strong>Object</strong>: House
<strong>State</strong>: Address, Color, Area
<strong>Behavior</strong>: Open door, close door</p>
<h3 id="characteristics-of-objects">Characteristics of Objects:</h3>
<p><strong>Abstraction</strong>: Abstraction is a process where you show only “relevant” data and “hide” unnecessary details of an object from the user.</p>
<p><strong>Encapsulation</strong>: Encapsulation simply means binding object state(fields) and behaviour(methods) together. If you are creating class, you are doing encapsulation.</p>
<p><strong>Message passing</strong>
A single object by itself may not be very useful. An application contains many objects. One object interacts with another object by invoking methods on that object. It is also referred to as <strong>Method Invocation</strong>. See the diagram below.</p>
<h3 id="object-oriented-programming-features">Object Oriented Programming features</h3>
<p><img src="https://beginnersbook.com/wp-content/uploads/2013/04/Object-oriented-programming-features.jpg" alt="OOPs features, Object-oriented-programming-features"></p>
<h4 id="abstraction-抽象">Abstraction 抽象</h4>
<p>Abstraction is a process of hiding the implementation details from the user, only the functionality will be provided to the user. In other words, the user will have the information on what the object does instead of how it does it.
In Java, abstraction is achieved using <strong>Abstract classes</strong> and <strong>interfaces</strong>.</p>
<p>抽象就是对用户隐藏程序的执行细节，只提供功能给用户。</p>
<h4 id="inhertance-继承">Inhertance 继承</h4>
<p>Inheritance can be defined as the process where one class acquires the properties (methods方法 and fields属性) of another. With the use of inheritance the information is made manageable in a hierarchical order.</p>
<p>The class which inherits the properties of other is known as subclass (derived class, child class) and the class whose properties are inherited is known as superclass (base class, parent class). <strong>extends</strong> is the keyword used to inherit the properties of a class.</p>
<p>继承的关键词是extends，当一个子类需要获取他的父类的方法和属性时就需要使用继承来定义。</p>
<h4 id="encapsolution-封装">Encapsolution 封装</h4>
<p>This is the practice of keeping fields within a class private, then providing access to them via public methods. It’s a protective barrier that keeps the data and code safe within the class itself.</p>
<p>Declare the variables of a class as <strong>private</strong>.Provide <strong>public setter and getter methods</strong> to modify and view the variables values.</p>
<p>封装就是通过使用private，public， protect关键词来保护内部数据的安全。</p>
<h4 id="polymorphism-多态">Polymorphism 多态</h4>
<p>Polymorphism is the ability of an object to take on many forms. The most common use of polymorphism in OOP occurs when a parent class reference is used to refer to a child class object.</p>
<p>多态是一个对象具有多种形式的能力。OOP中最常见的多态性用法是使用父类引用来引用子类对象。</p>
<h3 id="inhertance继承-vs-interface接口">Inhertance继承 vs Interface接口</h3>
<p><strong>Inhertance继承</strong> 使用关键字 **<code>extends</code>**实现继承，一个类只可以继承一个父类。在继承中可以定义属性方法,变量,常量等。并在子类中重写复用父类方法，可以去掉多个子类间的功能类似的重复代码，保持代码的简洁性。但是回增加代码的耦合性。</p>
<p><strong>Interface接口</strong>使用关键字 <strong><code>interface</code></strong> 修饰，使用关键字**<code>implements</code>**实现接口。一个类可以继承多个接口。接口中只能定义全局常量,和抽象方法，不能实例化，接口中不能有构造。子类任然需要实现自己的方法，但是可以降低代码的耦合性。</p>
<p>接口更像是一种规范，而不是具体方法的实现。接口可以约束继承统该接口的类的方法和参数，以供调用方统一调配。</p>
<p>因此我们应该面向接口编程，科学编程。</p>
]]></content>
		</item>
		
		<item>
			<title>Java Fundament 2:  Design Principles</title>
			<link>https://daiwei.dev/posts/java/fundament2_design/</link>
			<pubDate>Sat, 02 Oct 2021 12:11:11 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/java/fundament2_design/</guid>
			<description>Design Principles   SOILD
  Single Responsibility Principle (SRP) 单一职责原则
Each class should have a single purpose.
  Open/Closed Principle (OCP) 开闭原则
software entities (classes, modules, functions, etc.) should be open for extension but closed for modification.
  Liscov Substitution Principle (LSP) 替换原则
functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.
  Interface Segregation Principle (ISP) 接口隔离原则</description>
			<content type="html"><![CDATA[<h3 id="design-principles">Design Principles</h3>
<ol>
<li>
<p><strong>SOILD</strong></p>
<ol>
<li>
<p>Single Responsibility Principle (SRP) 单一职责原则</p>
<p>Each class should have a single purpose.</p>
</li>
<li>
<p>Open/Closed Principle (OCP) 开闭原则</p>
<p>software entities (classes, modules, functions, etc.) should be open for extension but closed for modification.</p>
</li>
<li>
<p>Liscov Substitution Principle (LSP) 替换原则</p>
<p>functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.</p>
</li>
<li>
<p>Interface Segregation Principle (ISP) 接口隔离原则</p>
<p>Clients should not be forced to depend upon interfaces that they don’t use. the number of members in the interface that is visible to the dependent class should be minimized.接口中对依赖类可见的成员数量应该最小化。</p>
</li>
<li>
<p>Dependency Inversion Principle (DIP) 依赖倒置原则</p>
<p>High level modules should not depend upon low level modules. Both should depend upon abstractions.Abstractions should not depend upon details. Details should depend upon abstractions.</p>
</li>
</ol>
</li>
<li>
<p><strong>DRY</strong> (Don’t Repeat Yourself)</p>
</li>
<li>
<p><strong>KISS</strong> (Keep it simple, Stupid!)</p>
</li>
<li>
<p>**YAGNI (You ain&rsquo;t gonna need it)**This principle states that always implement things when you actually need them never implement things before you need them.</p>
</li>
</ol>
<h3 id="design-pattern">Design Pattern</h3>
<p>In software engineering, a software design pattern is a general, reusable solution to a commonly occurring problem within a given context in software design. It is a description or template for how to solve a problem that can be used in many different situations.</p>
<ul>
<li>
<p><strong>Abstract Factory</strong>Provide an interface for creating families of related or dependent objects without specifying their concrete classes.</p>
</li>
<li>
<p><strong>Adapter</strong>Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn’t otherwise because of incompatibility interfaces.</p>
</li>
<li>
<p><strong>Command</strong>Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.<strong>Factory Method</strong>Define an interface for creating an object, but let the subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.</p>
</li>
<li>
<p><strong>Observer</strong>Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.</p>
</li>
<li>
<p><strong>Visitor</strong>Represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates.</p>
</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Java Fundament 1: Java Architecture: JVM, JRE &amp; JDK</title>
			<link>https://daiwei.dev/posts/java/fundament1_architecture/</link>
			<pubDate>Fri, 01 Oct 2021 17:11:25 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/java/fundament1_architecture/</guid>
			<description>Java之所以能过成为当今最流行的编程语言之一, 离不开**Java Virtual Machine (JVM), Java Runtime Environment (JRE) and Java Development Kit (JDK) **的支持。
 Java Virtual Machine JVM Java virtual machine is a platform-independent abstract machine that provides a runtime environment in which loads, verifies and executes Java bytecode. WORA (Write once Run Anywhere).
Java虚拟机是一个独立于平台的抽象机器，它提供了一个运行环境，在其中加载、验证和执行Java字节代码。它被称为解释器或 Java 编程语言的核心，因为它执行 Java 编程。引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译.
Java Virtual Machine Architecture Java Virtual Machine Architecture 虚拟机架构非常简单，它有一个内存区memory area、一个类加载器class loader 和一个执行引擎Execution Engine 以及其他组件。
ClassLoader 类加载器 It is a subsystem that is used to load class files.</description>
			<content type="html"><![CDATA[<p>Java之所以能过成为当今最流行的编程语言之一, 离不开**Java Virtual Machine (JVM), Java Runtime Environment (JRE) and Java Development Kit (JDK) **的支持。</p>
<p><img src="https://www.edureka.co/blog/wp-content/uploads/2019/07/q.png" alt="JVM - Java Architecture - Edureka"></p>
<p><img src="https://www.oracle.com/ocom/groups/public/@otn/documents/digitalasset/2167990.jpg" alt="img"></p>
<hr>
<h3 id="java-virtual-machinehttpswwworaclecomjavatechnologiesjavasejavase-core-technologies-apishtml-jvm"><strong><a href="https://www.oracle.com/java/technologies/javase/javase-core-technologies-apis.html">Java Virtual Machine</a></strong> JVM</h3>
<p>Java virtual machine is a platform-independent abstract machine that provides a runtime environment in which loads, verifies and executes Java bytecode. WORA (Write once Run Anywhere).</p>
<p>Java虚拟机是一个独立于平台的抽象机器，它提供了一个运行环境，在其中加载、验证和执行Java字节代码。它被称为解释器或 Java 编程语言的核心，因为它执行 Java 编程。引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译.</p>
<h4 id="java-virtual-machine-architecture">Java Virtual Machine Architecture</h4>
<p>Java Virtual Machine Architecture 虚拟机架构非常简单，它有一个内存区memory area、一个类加载器class loader 和一个执行引擎Execution Engine 以及其他组件。</p>
<p><img src="https://www.fatalerrors.org/images/blog/a2b8bfe83deb28ffd841280abede11d9.jpg" alt="JVM First Bounce&ndash;Class Loading Subsystem"></p>
<p><img src="http://2.bp.blogspot.com/-ILs_L_UHzNM/U4mBNvpfB8I/AAAAAAAAAeU/EdBcJ36qfAI/s1600/JVM+Architecture+block+diagram.png" alt="img"></p>
<h5 id="classloader-类加载器">ClassLoader 类加载器</h5>
<p>It is a subsystem that is used to load class files. Whenever we run a program in java, it is first loaded by the ClassLoader. the major function includes initialization, linking and loading.</p>
<h5 id="jvm-memory-内存区">JVM Memory 内存区</h5>
<ol>
<li>
<p>Method Area – It stores the structures for each class like the code, field data, runtime constant pool, method data, etc.  all **static variables, ** are created in this area.</p>
<p>方法区 - 它存储每个类的结构，如代码、字段数据、运行时常量池、方法数据等。所有静态变量都在此运行区中创建。</p>
</li>
<li>
<p>Heap Area – Objects are allocated at the runtime in the heap. It is the main memory of JVM. All <em>objects</em> of classes – <em>non-static variables memory</em> are created in this runtime area. It may increase or decrease in size while the application runs.</p>
<p>堆区 - 它是JVM的主存。类的所有<em>对象</em>-<em>非静态变量内存</em>都在此运行时区域中创建. 它是JVM的主存。类的所有<em>对象</em>-<em>非静态变量内存</em>都在此运行时区域中创建</p>
</li>
<li>
<p>Stacks Area – It stores local variables and results. In this runtime area all Java methods are executed.</p>
<p>In this runtime JVM by default creates two threads, they are Main thread. Garbage collector thread.</p>
</li>
</ol>
<ul>
<li>
<ul>
<li>
<ul>
<li><em>Main thread</em> is responsible to execute Java methods stats with main method, also responsible to create objects in heap area if it finds “new” keyword in any method logic.</li>
<li><em>Garbage collector thread</em> is responsible to destroy all unused objects from heap area.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Java 栈 - 所有的本地变量和运行结果都存储在这里并执行所有 Java 方法。在这个运行时 JVM 默认创建两个线程，主线程 和垃圾收集器线程。</p>
<ul>
<li><em>主线程</em>负责用main方法执行Java方法stats，如果在任何方法逻辑中发现“new”关键字，也负责在堆区域创建对象。</li>
<li><em>垃圾收集器线程</em>负责销毁堆区域中所有未使用的对象。</li>
</ul>
<ol start="4">
<li>
<p>PC Registers – It has the address or location of the JVMinstruction that is being executed. a separate program counter register is created for every thread for tracking that thread execution by storing its instruction address.</p>
<p>程序计数器 - 它有正在执行的JVM指令的地址或位置，为每个线程创建一个单独的程序计数器寄存器，用于通过存储其指令地址来跟踪该线程的执行。</p>
</li>
<li>
<p>Native Method Stacks – All the native methods used in the applications are present in the native method stacks.</p>
<p>本地方法栈 - 应用程序中使用的所有本地方法都存在于本地方法栈中。</p>
</li>
</ol>
<h5 id="execution-engine">Execution Engine</h5>
<p><strong>–</strong> An execution engine contains a Grabage collector, an interpreter and a <a href="https://www.edureka.co/blog/just-in-time-compiler/">JIT</a> compiler.</p>
<p><strong>–</strong> 一个执行引擎包含一个垃圾回收器Grabage collector、一个解释器interpreter 和一个JIT编译器。</p>
<h5 id="native-method-interfacehttpswwwedurekacoblogjava-interface">Native Method <a href="https://www.edureka.co/blog/java-interface/">Interface</a></h5>
<p>– It is a <a href="https://www.edureka.co/blog/java-frameworks/">framework</a> that provides. 提供框架。</p>
<h5 id="native-method-library--本地方法库">Native Method Library – 本地方法库</h5>
<hr>
<h3 id="java-runtime-environment-jrehttpsdocsoraclecomjavase8docstechnotesguidesindexhtmljre-jdk"><strong><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/index.html#jre-jdk">Java Runtime Environment (JRE)</a></strong></h3>
<p>The Java Runtime Environment (JRE) provides the libraries, the Java Virtual Machine, and other components to run applets and applications written in the Java programming language. In addition, two key deployment technologies are part of the JRE: <a href="https://www.oracle.com/java/technologies/plugin.html">Java Plug-in</a>, which enables applets to run in popular browsers; and Java Web Start, which deploys standalone applications over a network. It is also the foundation for the technologies in the Java 2 Platform, Enterprise Edition (J2EE) for enterprise software development and deployment. The JRE does not contain tools and utilities such as compilers or debuggers for developing applets and applications.</p>
<p>Java 运行时环境 (JRE) 提供库、Java 虚拟机和其他组件来运行用 Java 编程语言编写的小程序和应用程序。此外，JRE 还包含两项关键部署技术：<a href="https://www.oracle.com/java/technologies/plugin.html">Java Plug-in</a>，它使小应用程序能够在流行的浏览器中运行；和 Java Web Start，它通过网络部署独立的应用程序。它也是 Java 2 Platform, Enterprise Edition (J2EE) 中用于企业软件开发和部署的技术的基础。JRE 不包含用于开发小程序和应用程序的工具和实用程序，例如编译器或调试器。</p>
<hr>
<h3 id="java-development-kit-jdkhttpsdocsoraclecomjavase8docstechnotesguidesindexhtmljre-jdk"><strong><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/index.html#jre-jdk">Java Development Kit (JDK)</a></strong></h3>
<p>The JDK is a superset of the JRE, and contains everything that is in the JRE, plus tools such as the compilers and debuggers necessary for developing applets and applications.</p>
<p>JDK 是 JRE 的超集，包含 JRE 中的所有内容，以及开发小程序和应用程序所需的编译器和调试器等工具。</p>
<h3 id="difference-between-jdk-jre-and-jvm"><strong>Difference Between JDK, JRE, And JVM</strong></h3>
<ol>
<li>
<p>JDK is the development platform, while JRE is for execution. JDK 开发工具包，JRE 运行环境。</p>
</li>
<li>
<p>JVM is the foundation, or the heart of Java programming language, and ensures the program’s Java source code will be platform-agnostic. JVM是java基础和核心，它确保了Java可以在任何平台运行。</p>
</li>
<li>
<p>JVM is included in both JDK and JRE – Java programs won’t run without it.  <strong>jdk &amp; jre都包含jvm.</strong></p>
<p><img src="https://s3.shunyafoundation.com/s3/1578452c3f66d8fd0d04d5d195328ae1359d8caa/jdk-jvm.png" alt="What is JDK, JRE and JVM?"></p>
</li>
</ol>
<hr>
<h3 id="互补技术">互补技术</h3>
<p>有许多互补技术可用于增强 JVM、JRE 或 JDK。以下技术是最常用的技术：</p>
<ul>
<li><strong>Just-in-time Compiler (JIT)</strong> 即时编译器 是 JVM 的一部分，用于优化字节码到机器码的转换。它选择相似的字节码同时编译，减少字节码到机器码编译的整体持续时间。</li>
<li><strong>Javac</strong>是另一个补充工具，它是一个编译器，可以读取 Java 定义并将其转换为可以在 JVM 上运行的字节码。</li>
<li><strong>Javadoc</strong>将 API 文档从 Java 源代码转换为 HTML。这在以 HTML 格式创建标准文档时很有用。</li>
</ul>
<hr>
<h3 id="java-se-java-ee-java-me--javafx">Java SE, Java EE, Java ME &amp; JavaFx</h3>
<p>There are four platforms of the Java programming language:</p>
<ul>
<li>Java Platform, Standard Edition (Java SE)</li>
<li>Java Platform, Enterprise Edition (Java EE)</li>
<li>Java Platform, Micro Edition (Java ME)</li>
<li>JavaFX</li>
</ul>
<p>所有 Java 平台都由 Java 虚拟机 (VM) 和应用程序编程接口 (API) 组成。Java 虚拟机是一个用于特定硬件和软件平台的程序，它运行 Java 技术应用程序。API 是一组软件组件，可用于创建其他软件组件或应用程序。每个 Java 平台都提供了一个虚拟机和一个 API，这使得为该平台编写的应用程序可以在具有 Java 编程语言所有优点的任何兼容系统上运行：平台独立性、功能强大、稳定性、易于开发和安全。</p>
<h5 id="java-se">Java SE</h5>
<p>当大多数人想到 Java 编程语言时，他们会想到 Java SE API。Java SE 的 API 提供了 Java 编程语言的核心功能。它定义了从 Java 编程语言的基本类型和对象到用于网络、安全、数据库访问、图形用户界面 (GUI) 开发和 XML 解析的高级类的所有内容。</p>
<p>除了核心 API 之外，Java SE 平台还包括虚拟机、开发工具、部署技术以及 Java 技术应用程序中常用的其他类库和工具包。</p>
<h5 id="java-ee">Java EE</h5>
<p>Java EE 平台构建在 Java SE 平台之上。Java EE 平台为开发和运行大规模、多层、可扩展、可靠和安全的网络应用程序提供了 API 和运行时环境。</p>
<h5 id="java-me">Java ME</h5>
<p>Java ME 平台提供了一个 API 和一个小型虚拟机，用于在手机等小型设备上运行 Java 编程语言应用程序。该 API 是 Java SE API 的一个子集，以及对小型设备应用程序开发有用的特殊类库。Java ME 应用程序通常是 Java EE 平台服务的客户端。</p>
<h5 id="javafx">JavaFX</h5>
<p>JavaFX 是一个使用轻量级用户界面 API 创建富 Internet 应用程序的平台。JavaFX 应用程序使用硬件加速的图形和媒体引擎来利用更高性能的客户端和现代外观以及用于连接到网络数据源的高级 API。JavaFX 应用程序可能是 Java EE 平台服务的客户端。</p>
<p><img src="https://image.slidesharecdn.com/javastrategylgv3-100319054817-phpapp02/95/oracle-java-strategy-lg-v3-7-728.jpg?cb=1353400249" alt="Oracle Java Strategy Lg V3"></p>
<hr>
<h3 id="how-is-java-platform-indeeddent">How is Java platform indeeddent?</h3>
<p><img src="https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2019/06/Jit-Compiler.png" alt="JIT workflow in Java - Java Architecture- Edureka"></p>
<p><em><strong>sample.java → javac (sample. class) → JVM(sample.obj) → final output</strong></em></p>
<p>First source code is used by java compiler and is converted in .class file. The class file code is in byte code form and that class file is used by JVM to convert into an object file. After that, you can see the final output on your screen. Java 编译器使用第一个源代码并转换为 .class 文件。类文件代码采用字节码形式，JVM 使用该类文件转换为目标文件。之后，您可以在屏幕上看到最终输出。</p>
<p><img src="http://upload.wikimedia.org/wikipedia/commons/3/3a/Java_virtual_machine_architecture.svg" alt="Java Just-In-Time (JIT) Compiler: What is it, how does it work, where does  it fit into JVM architecture (JIT vs Interpreter)? |"></p>
]]></content>
		</item>
		
		<item>
			<title>Java_Roadmap</title>
			<link>https://daiwei.dev/posts/java/fundament0_roadmap/</link>
			<pubDate>Fri, 01 Oct 2021 16:19:45 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/java/fundament0_roadmap/</guid>
			<description></description>
			<content type="html"><![CDATA[<p><img src="https://roadmap.sh/roadmaps/java.png" alt="img"></p>
<p><img src="https://roadmap.sh/roadmaps/backend.png" alt="Frontend Roadmap"></p>
]]></content>
		</item>
		
		<item>
			<title>Java: Hello World</title>
			<link>https://daiwei.dev/posts/java/hello-world/</link>
			<pubDate>Tue, 28 Sep 2021 15:25:50 +0800</pubDate>
			
			<guid>https://daiwei.dev/posts/java/hello-world/</guid>
			<description>Hello World, Hello Friend!
1#include &amp;lt;stdio.h&amp;gt;2int main() { 3 // printf() displays the string inside quotation 4 printf(&amp;#34;Hello, World!&amp;#34;); 5 return 0; 6} </description>
			<content type="html"><![CDATA[<p>Hello World, Hello Friend!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="ln">1</span><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="ln">2</span><span class="cp"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
<span class="ln">3</span>   <span class="c1">// printf() displays the string inside quotation
</span><span class="ln">4</span><span class="c1"></span>   <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello, World!&#34;</span><span class="p">);</span>
<span class="ln">5</span>   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="ln">6</span><span class="p">}</span>
</code></pre></div>]]></content>
		</item>
		
	</channel>
</rss>
