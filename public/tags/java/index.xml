<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Hello, Friends!</title>
    <link>https://daiwei.dev/tags/java/</link>
    <description>Recent content in Java on Hello, Friends!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 17 Nov 2021 16:38:00 +0800</lastBuildDate><atom:link href="https://daiwei.dev/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java Build Automation Tools：Ant, Gradle &amp; Maven</title>
      <link>https://daiwei.dev/posts/java/java_gradle/</link>
      <pubDate>Wed, 17 Nov 2021 16:38:00 +0800</pubDate>
      
      <guid>https://daiwei.dev/posts/java/java_gradle/</guid>
      <description>在进入ANT、Maven或Gradle 之前，我们必须首先了解与它们相关的一些事情。
**依赖:**一般来说，依赖是指某件事需要另一件事来自己执行。简单地说，如果 &amp;lsquo;A&amp;rsquo; 需要 &amp;lsquo;B&amp;rsquo; 才能成功执行，则 &amp;lsquo;A&amp;rsquo; 依赖于 &amp;lsquo;B&amp;rsquo;。在软件世界中，依赖项是您的应用程序成功执行所需的任何东西。它基本上是应用程序所需的任何外部支持库。例如zuul、hystrix、lombok、jdbc等。
最初，我们曾经通过以下方式管理依赖项：
 从互联网上手动下载所需库的jar文件并将其添加到我们的项目中。 编写一个脚本，该脚本将通过网络从外部源自动下载库。  使用这些工具之前面临的问题：
 通过从 Internet 上手动下载来添加依赖项是一项非常累人的任务。 如果外部源的 URL 通过 Internet 更改，我们的脚本可能会失败。 在我们的应用程序中识别和管理传递依赖是非常困难的。  **Depende Management Tools依赖管理工具:**它解决和管理应用程序所需的依赖关系。
什么是构建工具？
 构建工具是从源代码自动创建可执行应用程序的程序（例如，.apk对于 Android 应用程序）。构建包括将代码编译、链接和打包成可用或可执行的形式。
基本上，构建自动化是编写脚本或自动化软件开发人员在日常活动中执行的各种任务的行为，例如：
 下载并管理依赖项。 将源代码编译成二进制代码。 打包那个二进制代码。 运行测试。 部署到生产系统。   我们为什么要使用构建工具或构建自动化？
 在小型项目中，开发人员通常会手动调用构建过程。这对于大型项目来说是不切实际的，因为很难跟踪需要构建的内容、构建过程中的顺序和依赖关系。使用自动化工具可以使构建过程更加一致。
 各种可用的构建工具 ：
  Java - Ant、Maven、Gradle。 .NET 框架 - NAnt c# - MsBuild。   Apache Ant Ant是 Apache Tomcat 代码库的一部分，并于 2000 年作为独立项目发布.</description>
    </item>
    
    <item>
      <title>BIO vs NIO</title>
      <link>https://daiwei.dev/posts/java/java_socket/</link>
      <pubDate>Wed, 17 Nov 2021 16:19:45 +0800</pubDate>
      
      <guid>https://daiwei.dev/posts/java/java_socket/</guid>
      <description>**同步和异步：**同步和异步是针对应用程序和内核的交互而言的，同步指的是用户进程触发IO 操作并等待或者轮询的去查看IO 操作是否就绪，而异步是指用户进程触发IO 操作以后便开始做自己的事情，而当IO 操作已经完成的时候会得到IO 完成的通知。
以银行取款为例：
同步 ： 自己亲自出马持银行卡到银行取钱（使用同步 IO 时，Java 自己处理IO 读写）；
异步 ： 委托一小弟拿银行卡到银行取钱，然后给你（使用异步IO 时，Java 将 IO 读写委托给OS 处理，需要将数据缓冲区地址和大小传给OS(银行卡和密码)，OS 需要支持异步IO操作API）；
**阻塞和非阻塞：**阻塞和非阻塞是针对于进程在访问数据的时候，根据IO操作的就绪状态来采取的不同方式，说白了是一种读取或者写入操作方法的实现方式，阻塞方式下读取或者写入函数将一直等待，而非阻塞方式下，读取或者写入方法会立即返回一个状态值。
以银行取款为例：
阻塞 ： ATM排队取款，你只能等待（使用阻塞IO时，Java调用会一直阻塞到读写完成才返回）；
非阻塞 ： 柜台取款，取个号，然后坐在椅子上做其它事，等号广播会通知你办理，没到号你就不能去，你可以不断问大堂经理排到了没有，大堂经理如果说还没到你就不能去（使用非阻塞IO时，如果不能读写Java调用会马上返回，当IO事件分发器通知可读写时再继续进行读写，不断循环直到读写完成）
1.BIO 编程
Blocking IO： 同步阻塞的编程方式。
BIO编程方式通常是在JDK1.4版本之前常用的编程方式。编程实现过程为：首先在服务端启动一个ServerSocket来监听网络请求，客户端启动Socket发起网络请求，默认情况下ServerSocket回建立一个线程来处理此请求，如果服务端没有线程可用，客户端则会阻塞等待或遭到拒绝。
且建立好的连接，在通讯过程中，是同步的。在并发处理效率上比较低。大致结构如下：
同步并阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，当然可以通过线程池机制改善。
BIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序直观简单易理解。
使用线程池机制改善后的BIO模型图如下:
2.NIO 编程：Unblocking IO（New IO）： 同步非阻塞的编程方式。
NIO本身是基于事件驱动思想来完成的，其主要想解决的是BIO的大并发问题，NIO基于Reactor，当socket有流可读或可写入socket时，操作系统会相应的通知引用程序进行处理，应用再将流读取到缓冲区或写入操作系统。也就是说，这个时候，已经不是一个连接就要对应一个处理线程了，而是有效的请求，对应一个线程，当连接没有数据时，是没有工作线程来处理的。
NIO的最重要的地方是当一个连接创建后，不需要对应一个线程，这个连接会被注册到多路复用器上面，所以所有的连接只需要一个线程就可以搞定，当这个线程中的多路复用器进行轮询的时候，发现连接上有请求的话，才开启一个线程进行处理，也就是一个请求一个线程模式。
在NIO的处理方式中，当一个请求来的话，开启线程进行处理，可能会等待后端应用的资源(JDBC连接等)，其实这个线程就被阻塞了，当并发上来的话，还是会有BIO一样的问题
3.AIO编程：Asynchronous IO： 异步非阻塞的编程方式。
与NIO不同，当进行读写操作时，只须直接调用API的read或write方法即可。这两种方法均为异步的，对于读操作而言，当有流可读取时，操作系统会将可读的流传入read方法的缓冲区，并通知应用程序；对于写操作而言，当操作系统将write方法传递的流写入完毕时，操作系统主动通知应用程序。即可以理解为，read/write方法都是异步的，完成后会主动调用回调函数。在JDK1.7中，这部分内容被称作NIO.2，主要在java.nio.channels包下增加了下面四个异步通道：AsynchronousSocketChannel、AsynchronousServerSocketChannel、AsynchronousFileChannel、AsynchronousDatagramChannel
bio示例 server示例
1public class Server { 2 3 public static void main(String[] args) { 4 int port = genPort(args); 5 6 ServerSocket server = null; 7 ExecutorService service = Executors.</description>
    </item>
    
    <item>
      <title>Java_Roadmap</title>
      <link>https://daiwei.dev/posts/java/java_roadmap/</link>
      <pubDate>Wed, 17 Nov 2021 16:19:45 +0800</pubDate>
      
      <guid>https://daiwei.dev/posts/java/java_roadmap/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Java_design</title>
      <link>https://daiwei.dev/posts/java/java_design/</link>
      <pubDate>Tue, 09 Nov 2021 12:11:11 +0800</pubDate>
      
      <guid>https://daiwei.dev/posts/java/java_design/</guid>
      <description>Design Principles   SOILD
  Single Responsibility Principle (SRP) 单一职责原则
Each class should have a single purpose.
  Open/Closed Principle (OCP) 开闭原则
software entities (classes, modules, functions, etc.) should be open for extension but closed for modification.
  Liscov Substitution Principle (LSP) 替换原则
functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.
  Interface Segregation Principle (ISP) 接口隔离原则</description>
    </item>
    
    <item>
      <title>Java_oop</title>
      <link>https://daiwei.dev/posts/java/java_oop/</link>
      <pubDate>Tue, 09 Nov 2021 11:30:25 +0800</pubDate>
      
      <guid>https://daiwei.dev/posts/java/java_oop/</guid>
      <description>Object-oriented programming (OOP) is a programming based on the concept of “objects” that contain data and methods. The primary purpose of object-oriented programming is to increase the flexibility and maintainability of programs. Object oriented programming brings together data and its behaviour(methods) in a single location(object) makes it easier to understand how a program works.
面向对象程序设计（Object Oriented Programming，OOP）是一种计算机编程架构。OOP的一条基本原则是计算机程序由单个能够起到子程序作用的单元或对象组合而成。OOP达到了软件工程的三个主要目标：重用性、灵活性和扩展性。OOP=对象+类+继承+多态+消息，其中核心概念是类和对象。
除了OOP, 还有面向过程(Procedure Oriented Programming)，是一种以过程为中心的编程思想。这些都是以什么正在发生为主要目标进行编程。函数式编程（Functional Programming），data更多的围绕operation， 所以添加新的方法很容易。
What is an Object 什么是对象？对象就是一组数据 data 和行为 behaviour (aka method).</description>
    </item>
    
    <item>
      <title>线程创建方式4: threadpool</title>
      <link>https://daiwei.dev/posts/java/java_threadpool/</link>
      <pubDate>Wed, 03 Nov 2021 15:57:02 +0800</pubDate>
      
      <guid>https://daiwei.dev/posts/java/java_threadpool/</guid>
      <description>提前建好多个线程放入线程池中，使用时直接获取。避免频繁创建销毁线程，实现线程重复利用。
线程池类似公交车🚌，每个人都可以按自己的需选择乘坐任何一辆公交车。
好处：
 建好线程创建时间，提高程序相应速度。 线程可重复利用，降低系统资源消耗。 便于线程管理，提高编程效率。  线程池API:
 ExecutorService 线程池接口，常见子类 ThreadPoolExecutor Executor 工具类，线程池工厂类，用于创建并返回不同类型的线程。  1package threadpool; 2 3import java.util.concurrent.ExecutorService; 4import java.util.concurrent.Executors; 5import java.util.concurrent.ThreadPoolExecutor; 6import java.util.concurrent.TimeUnit; 7 8/** 9* 线程创建方式4： ThreadPool 10*/ 11public class ThreadPool { 12 public static void main(String[] args) { 13 ExecutorService service = Executors.newScheduledThreadPool(10); 14 15 //设置线程池属性，先把ExecutorService 转换成 ThreadPoolExecutor 16 //ThreadPoolExecutor service1 = (ThreadPoolExecutor) service; 17 //service1.setCorePoolSize(5); 18 //service1.setKeepAliveTime(100, TimeUnit.MILLISECONDS); 19 20 //service.submit(Callable callable);//适合适用于Callable 21 service.</description>
    </item>
    
    <item>
      <title>创建线程的方式3: Callable</title>
      <link>https://daiwei.dev/posts/java/java_callable/</link>
      <pubDate>Wed, 03 Nov 2021 15:39:23 +0800</pubDate>
      
      <guid>https://daiwei.dev/posts/java/java_callable/</guid>
      <description>1package callableTest; 2 3import java.util.concurrent.Callable; 4import java.util.concurrent.ExecutionException; 5import java.util.concurrent.FutureTask; 6 7/** 8* 创建线程方式3：实现 callable 接口。-----JDK5.0新增 9*/ 10public class ThreadNew { 11 public static void main (String[] arg) { 12 NumThread num = new NumThread(); 13 14 // Future接口可以对Runnable, callable的执行结果进行取消，查询和获取。 15 // FutureTask 同时实现了Runnable &amp;amp; Future接口， 16 // 既可作为线程被Runnable执行，又可以作为Future得到Callable的返回值。 17 FutureTask&amp;lt;Integer&amp;gt; futureTask = new FutureTask&amp;lt;&amp;gt;(num); 18 19 new Thread(futureTask).start(); 20 21 try { 22 //get()返回值即callable实现类override call() 返回值 23 Integer sum = futureTask.</description>
    </item>
    
    <item>
      <title>Thread Communication</title>
      <link>https://daiwei.dev/posts/java/thread_communication/</link>
      <pubDate>Wed, 03 Nov 2021 13:16:20 +0800</pubDate>
      
      <guid>https://daiwei.dev/posts/java/thread_communication/</guid>
      <description>1/** 2* 线程通信例子：两个线程交替打印 integer 1-10 3* 涉及3个方法： 4* wait(): 当前线程进入wait状态，并释放线程监视器。 5* notify(): 唤醒一个处于wait状态中优先级最高的线程。 6* notifyAll(): 唤醒所有处于wait状态的线程。 7* 8* 1. 3个方法都必须是用在同步代码块或者同步方法中。 9* 2. 3个方法的调用者必须是同步代码块或者同步方法中的同步监视器。 10* 3. 3个方法是定义在java.Lang.Object类中， 并不是 thread 类中。 11*/ 12public class CommunicationTest { 13 public static void main (String[] args) { 14 NumberPrinter n = new NumberPrinter(); 15 Thread t1 = new Thread(n); 16 Thread t2 = new Thread(n); 17 18 t1.start(); 19 t2.start(); 20 } 21} 22 23class NumberPrinter implements Runnable { 24 int i = 1; 25 26 @Override 27 public void run() { 28 while (true) { 29 synchronized (this) { 30 notify(); // 必须使用同步监视器this来调用，this.</description>
    </item>
    
    <item>
      <title>Java Lock</title>
      <link>https://daiwei.dev/posts/java/java_lock/</link>
      <pubDate>Wed, 03 Nov 2021 10:10:07 +0800</pubDate>
      
      <guid>https://daiwei.dev/posts/java/java_lock/</guid>
      <description>1Module: java.base 2Package: java.util.concurrent.locks 3Interface Lock 4 5All Known Implementing Classes: 6ReentrantLock, ReentrantReadWriteLock.ReadLock, ReentrantReadWriteLock.WriteLock Lock实现提供了比使用synchronized方法和语句获得的更广泛的锁定操作。它们允许更灵活的结构，可能具有完全不同的属性，并且可能支持多个关联 Condition对象。
锁是用于控制多个线程对共享资源的访问的工具。通常，锁提供对共享资源的独占访问：一次只有一个线程可以获取锁，所有对共享资源的访问都需要先获取锁。但是，某些锁可能允许并发访问共享资源，例如ReadWriteLock.
synchronized方法或语句的使用提供对与每个对象关联的隐式监视器锁的访问，但强制所有锁的获取和释放以块结构的方式发生：当获取多个锁时，它们必须以相反的顺序释放，并且所有锁必须在获得它们的同一个词法范围内释放。
虽然synchronized方法和语句的作用域机制使使用监视器锁编程变得更加容易，并有助于避免许多涉及锁的常见编程错误，但在某些情况下，您需要以更灵活的方式使用锁。例如，一些遍历并发访问数据结构的算法需要使用“hand-over-hand”或“chainlocking”：你先获取节点A的锁，然后节点B，然后释放A，获取C，然后释放B并获得 D 等等。所述的实施方式中 Lock接口通过允许获得并在不同的范围释放的锁，并允许获得并以任何顺序释放多个锁使得能够使用这样的技术。
这种增加的灵活性带来了额外的责任。块结构锁的缺失消除了synchronized 方法和语句中发生的锁的自动释放。在大多数情况下，应使用以下习语：
1 Lock l = new Lock; 2 l.lock(); 3 try { 4 // access the resource protected by this lock 5 } finally { 6 l.unlock(); 7 } 当锁定和解锁发生在不同的作用域时，必须注意确保持有锁时执行的所有代码都受到 try-finally 或 try-catch 的保护，以确保在必要时释放锁。
1package lockTest; 2 3 4import java.util.concurrent.locks.ReentrantLock; 5 6/** 7* ConcurrentThread Safety 8* The solution 1: synchronized 9* The solution 2: lock 10*/ 11public class LockTest { 12 public static void main(String[] args) { 13 Window w = new Window(); 14 15 Thread t1 = new Thread(w); 16 Thread t2 = new Thread(w); 17 Thread t3 = new Thread(w); 18 19 t1.</description>
    </item>
    
    <item>
      <title>Threads Safety</title>
      <link>https://daiwei.dev/posts/java/threadssafety/</link>
      <pubDate>Tue, 26 Oct 2021 12:08:57 +0800</pubDate>
      
      <guid>https://daiwei.dev/posts/java/threadssafety/</guid>
      <description>Unsafe threads in tickets system 不安全线程:
1public class WindowTest2 { 2 public static void main (String[] args) { 3 Window2 w = new Window2(); 4 5 Thread t1 = new Thread (w); 6 Thread t2 = new Thread (w); 7 Thread t3 = new Thread (w); 8 9 t1.setName(&amp;#34;Window_1&amp;#34;); 10 t2.setName(&amp;#34;Window_2&amp;#34;); 11 t3.setName(&amp;#34;Window_3&amp;#34;); 12 13 t1.start(); 14 t2.start(); 15 t3.start(); 16 } 17} 18 19class Window2 implements Runnable { 20 private int tickets = 100; 21 22 @Override 23 public void run() { 24 while(true) { 25 if(tickets &amp;gt; 0) { 26 try { 27 Thread.</description>
    </item>
    
  </channel>
</rss>
